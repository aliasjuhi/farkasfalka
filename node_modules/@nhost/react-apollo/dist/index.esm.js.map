{"version":3,"file":"index.esm.js","sources":["../src/hooks.tsx","../src/provider.tsx"],"sourcesContent":["import {\n  DocumentNode,\n  OperationVariables,\n  QueryHookOptions,\n  SubscriptionHookOptions,\n  TypedDocumentNode,\n  useQuery,\n  useSubscription\n} from '@apollo/client'\nimport { useAuthenticated } from '@nhost/react'\n\nexport function useAuthQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions = { ...options, skip: options?.skip || !isAuthenticated }\n  return useQuery(query, newOptions)\n}\n\nexport function useAuthSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions: SubscriptionHookOptions<TData, TVariables> = {\n    ...options,\n    skip: options?.skip || !isAuthenticated\n  }\n\n  return useSubscription(subscription, newOptions)\n}\n\n// TODO consider other hooks\n/*\n- useAuthLazyQuery\n- useAuthMutation\n- useRoleQuery\n- useRoleLazyQuery\n- useRoleMutation\n- useRoleSubscription\n*/\n","import React, { PropsWithChildren, useEffect, useState } from 'react'\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { createApolloClient, NhostApolloClientOptions } from '@nhost/apollo'\n\n// This is needed because ApolloProvider can't be rendered without a client. To be able to render\n// the children without our client, we need an ApolloProvider because of potential underlying\n// useQuery hooks in customer applications. This way ApolloProvider and children can be rendered.\nconst mockApolloClient = new ApolloClient({ cache: new InMemoryCache() })\n\nexport const NhostApolloProvider: React.FC<PropsWithChildren<NhostApolloClientOptions>> = ({\n  children,\n  ...options\n}) => {\n  // * See https://github.com/nhost/nhost/pull/214#pullrequestreview-889730478\n  const [client, setClient] = useState<ReturnType<typeof createApolloClient>>()\n\n  // Note: Because we're using XState under the hood, we need to make sure to start the interpreter\n  // on the client side when the component is mounted. This is why we're using `useState` and\n  // `useEffect`.\n  useEffect(() => {\n    if (!client) {\n      setClient(createApolloClient(options))\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <ApolloProvider client={client || mockApolloClient}>{children}</ApolloProvider>\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO,sBACL,OACA,SACA;AACA,QAAM,kBAAkB;AACxB,QAAM,aAAa,iCAAK,UAAL,EAAc,MAAM,oCAAS,SAAQ,CAAC;AAClD,SAAA,SAAS,OAAO,UAAU;AACnC;AAEO,6BACL,cACA,SACA;AACA,QAAM,kBAAkB;AACxB,QAAM,aAAyD,iCAC1D,UAD0D;AAAA,IAE7D,MAAM,oCAAS,SAAQ,CAAC;AAAA,EAAA;AAGnB,SAAA,gBAAgB,cAAc,UAAU;AACjD;ACvBA,MAAM,mBAAmB,IAAI,aAAa,EAAE,OAAO,IAAI,iBAAiB;AAEjE,MAAM,sBAA6E,CAAC,OAGrF;AAHqF,eACzF;AAAA;AAAA,MADyF,IAEtF,oBAFsF,IAEtF;AAAA,IADH;AAAA;AAIM,QAAA,CAAC,QAAQ,aAAa,SAAgD;AAK5E,YAAU,MAAM;AACd,QAAI,CAAC,QAAQ;AACD,gBAAA,mBAAmB,OAAO,CAAC;AAAA,IACvC;AAAA,EAGF,GAAG,CAAE,CAAA;AAEL,SAAQ,sBAAA,cAAA,gBAAA;AAAA,IAAe,QAAQ,UAAU;AAAA,EAAA,GAAmB,QAAS;AACvE;;"}