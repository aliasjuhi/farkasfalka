var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { InMemoryCache, createHttpLink, split, from, ApolloClient } from "@apollo/client/core";
import { setContext } from "@apollo/client/link/context";
import { GraphQLWsLink } from "@apollo/client/link/subscriptions";
import { getMainDefinition } from "@apollo/client/utilities";
import { createClient } from "graphql-ws";
function createRestartableClient(options) {
  let restartRequested = false;
  let restart = () => {
    restartRequested = true;
  };
  let _started = false;
  const started = () => _started;
  const client = createClient(__spreadProps(__spreadValues({}, options), {
    on: __spreadProps(__spreadValues({}, options.on), {
      connected: () => {
        _started = true;
      },
      opened: (originalSocket) => {
        var _a, _b;
        const socket = originalSocket;
        (_b = (_a = options.on) == null ? void 0 : _a.opened) == null ? void 0 : _b.call(_a, socket);
        restart = () => {
          if (socket.readyState === WebSocket.OPEN) {
            socket.close(4205, "Client Restart");
          } else {
            restartRequested = true;
          }
        };
        if (restartRequested) {
          restartRequested = false;
          restart();
        }
      }
    })
  }));
  return __spreadProps(__spreadValues({}, client), {
    restart: () => restart(),
    started
  });
}
const isBrowser = typeof window !== "undefined";
const createApolloClient = ({
  nhost,
  graphqlUrl,
  headers = {},
  publicRole = "public",
  fetchPolicy,
  cache = new InMemoryCache(),
  connectToDevTools = isBrowser && false,
  onError
}) => {
  let backendUrl = graphqlUrl || (nhost == null ? void 0 : nhost.graphql.getUrl());
  if (!backendUrl) {
    throw Error("Can't initialize the Apollo Client: no backend Url has been provided");
  }
  const interpreter = nhost == null ? void 0 : nhost.auth.client.interpreter;
  let token = null;
  const getAuthHeaders = () => {
    const resHeaders = __spreadProps(__spreadValues({}, headers), {
      "Sec-WebSocket-Protocol": "graphql-ws"
    });
    if (token) {
      resHeaders.authorization = `Bearer ${token}`;
    } else {
      resHeaders.role = publicRole;
    }
    return resHeaders;
  };
  const uri = backendUrl;
  const wsClient = isBrowser && createRestartableClient({
    url: uri.startsWith("https") ? uri.replace(/^https/, "wss") : uri.replace(/^http/, "ws"),
    connectionParams: () => ({
      headers: __spreadValues(__spreadValues({}, headers), getAuthHeaders())
    })
  });
  const wsLink = wsClient && new GraphQLWsLink(wsClient);
  const httpLink = setContext((_, { headers: headers2 }) => {
    return {
      headers: __spreadValues(__spreadValues({}, headers2), getAuthHeaders())
    };
  }).concat(createHttpLink({
    uri
  }));
  const link = wsLink ? split(({ query }) => {
    const mainDefinition = getMainDefinition(query);
    const { kind } = mainDefinition;
    let operation;
    if ("operation" in mainDefinition) {
      operation = mainDefinition.operation;
    }
    return kind === "OperationDefinition" && operation === "subscription";
  }, wsLink, httpLink) : httpLink;
  const apolloClientOptions = {
    cache: cache || new InMemoryCache(),
    ssrMode: !isBrowser,
    defaultOptions: {
      watchQuery: {
        fetchPolicy
      }
    },
    connectToDevTools
  };
  apolloClientOptions.link = typeof onError === "function" ? from([onError, link]) : from([link]);
  const client = new ApolloClient(apolloClientOptions);
  interpreter == null ? void 0 : interpreter.onTransition(async (state, event) => {
    if (["SIGNOUT", "SIGNED_IN", "TOKEN_CHANGED"].includes(event.type)) {
      const newToken = state.context.accessToken.value;
      token = newToken;
      if (event.type === "SIGNOUT") {
        try {
          await client.resetStore();
        } catch (error) {
          console.error("Error resetting Apollo client cache");
          console.error(error);
        }
      } else {
        if (isBrowser && wsClient && wsClient.started()) {
          wsClient.restart();
        }
      }
    }
  });
  return client;
};
export { createApolloClient };
//# sourceMappingURL=index.esm.js.map
