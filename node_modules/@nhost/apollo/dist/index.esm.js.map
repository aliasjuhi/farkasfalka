{"version":3,"file":"index.esm.js","sources":["../src/ws.ts","../src/index.ts"],"sourcesContent":["// * See https://github.com/enisdenjo/graphql-ws#graceful-restart\nimport { Client, ClientOptions, createClient } from 'graphql-ws'\n\nexport interface RestartableClient extends Client {\n  restart(): void\n  started(): boolean\n}\n\nexport function createRestartableClient(options: ClientOptions): RestartableClient {\n  let restartRequested = false\n  let restart = () => {\n    restartRequested = true\n  }\n  let _started = false\n  const started = () => _started\n\n  const client = createClient({\n    ...options,\n    on: {\n      ...options.on,\n      connected: () => {\n        _started = true\n      },\n      opened: (originalSocket) => {\n        const socket = originalSocket as WebSocket\n        options.on?.opened?.(socket)\n\n        restart = () => {\n          if (socket.readyState === WebSocket.OPEN) {\n            // if the socket is still open for the restart, do the restart\n            socket.close(4205, 'Client Restart')\n          } else {\n            // otherwise the socket might've closed, indicate that you want\n            // a restart on the next opened event\n            restartRequested = true\n          }\n        }\n\n        // just in case you were eager to restart\n        if (restartRequested) {\n          restartRequested = false\n          restart()\n        }\n      }\n    }\n  })\n\n  return {\n    ...client,\n    restart: () => restart(),\n    started\n  }\n}\n","import {\n  ApolloClient,\n  ApolloClientOptions,\n  createHttpLink,\n  from,\n  InMemoryCache,\n  RequestHandler,\n  split,\n  WatchQueryFetchPolicy\n} from '@apollo/client/core'\nimport { setContext } from '@apollo/client/link/context'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { createRestartableClient } from './ws'\nconst isBrowser = typeof window !== 'undefined'\n\nexport type NhostApolloClientOptions = {\n  nhost?: NhostClient\n  graphqlUrl?: string\n  headers?: any\n  publicRole?: string\n  fetchPolicy?: WatchQueryFetchPolicy\n  connectToDevTools?: boolean\n  cache?: InMemoryCache\n  onError?: RequestHandler\n}\n\nexport const createApolloClient = ({\n  nhost,\n  graphqlUrl,\n  headers = {},\n  publicRole = 'public',\n  fetchPolicy,\n  cache = new InMemoryCache(),\n  connectToDevTools = isBrowser && process.env.NODE_ENV === 'development',\n  onError\n}: NhostApolloClientOptions): ApolloClient<any> => {\n  let backendUrl = graphqlUrl || nhost?.graphql.getUrl()\n  if (!backendUrl) {\n    throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\")\n  }\n  const interpreter = nhost?.auth.client.interpreter\n\n  let token: string | null = null\n\n  const getAuthHeaders = () => {\n    // add headers\n    const resHeaders = {\n      ...headers,\n      'Sec-WebSocket-Protocol': 'graphql-ws'\n    }\n\n    // add auth headers if signed in\n    // or add 'public' role if not signed in\n    if (token) {\n      resHeaders.authorization = `Bearer ${token}`\n    } else {\n      // ? Not sure it changes anything for Hasura\n      resHeaders.role = publicRole\n    }\n\n    return resHeaders\n  }\n\n  const uri = backendUrl\n\n  const wsClient =\n    isBrowser &&\n    createRestartableClient({\n      url: uri.startsWith('https') ? uri.replace(/^https/, 'wss') : uri.replace(/^http/, 'ws'),\n      connectionParams: () => ({\n        headers: {\n          ...headers,\n          ...getAuthHeaders()\n        }\n      })\n    })\n  const wsLink = wsClient && new GraphQLWsLink(wsClient)\n\n  const httpLink = setContext((_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        ...getAuthHeaders()\n      }\n    }\n  }).concat(\n    createHttpLink({\n      uri\n    })\n  )\n\n  const link = wsLink\n    ? split(\n        ({ query }) => {\n          const mainDefinition = getMainDefinition(query)\n\n          const { kind } = mainDefinition\n          let operation\n          if ('operation' in mainDefinition) {\n            operation = mainDefinition.operation\n          }\n\n          return kind === 'OperationDefinition' && operation === 'subscription'\n        },\n        wsLink,\n        httpLink\n      )\n    : httpLink\n\n  const apolloClientOptions: ApolloClientOptions<any> = {\n    cache: cache || new InMemoryCache(),\n    ssrMode: !isBrowser,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy\n      }\n    },\n    connectToDevTools\n  }\n\n  // add link\n  apolloClientOptions.link = typeof onError === 'function' ? from([onError, link]) : from([link])\n\n  const client = new ApolloClient(apolloClientOptions)\n\n  interpreter?.onTransition(async (state, event) => {\n    if (['SIGNOUT', 'SIGNED_IN', 'TOKEN_CHANGED'].includes(event.type)) {\n      const newToken = state.context.accessToken.value\n      token = newToken\n      if (event.type === 'SIGNOUT') {\n        try {\n          await client.resetStore()\n        } catch (error) {\n          console.error('Error resetting Apollo client cache')\n          console.error(error)\n        }\n      } else {\n        if (isBrowser && wsClient && wsClient.started()) {\n          wsClient.restart()\n        }\n      }\n    }\n  })\n\n  return client\n}\n"],"names":[],"mappings":"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"}