{"version":3,"file":"index.cjs.js","sources":["../src/ws.ts","../src/index.ts"],"sourcesContent":["// * See https://github.com/enisdenjo/graphql-ws#graceful-restart\nimport { Client, ClientOptions, createClient } from 'graphql-ws'\n\nexport interface RestartableClient extends Client {\n  restart(): void\n  started(): boolean\n}\n\nexport function createRestartableClient(options: ClientOptions): RestartableClient {\n  let restartRequested = false\n  let restart = () => {\n    restartRequested = true\n  }\n  let _started = false\n  const started = () => _started\n\n  const client = createClient({\n    ...options,\n    on: {\n      ...options.on,\n      connected: () => {\n        _started = true\n      },\n      opened: (originalSocket) => {\n        const socket = originalSocket as WebSocket\n        options.on?.opened?.(socket)\n\n        restart = () => {\n          if (socket.readyState === WebSocket.OPEN) {\n            // if the socket is still open for the restart, do the restart\n            socket.close(4205, 'Client Restart')\n          } else {\n            // otherwise the socket might've closed, indicate that you want\n            // a restart on the next opened event\n            restartRequested = true\n          }\n        }\n\n        // just in case you were eager to restart\n        if (restartRequested) {\n          restartRequested = false\n          restart()\n        }\n      }\n    }\n  })\n\n  return {\n    ...client,\n    restart: () => restart(),\n    started\n  }\n}\n","import {\n  ApolloClient,\n  ApolloClientOptions,\n  createHttpLink,\n  from,\n  InMemoryCache,\n  RequestHandler,\n  split,\n  WatchQueryFetchPolicy\n} from '@apollo/client/core'\nimport { setContext } from '@apollo/client/link/context'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { createRestartableClient } from './ws'\nconst isBrowser = typeof window !== 'undefined'\n\nexport type NhostApolloClientOptions = {\n  nhost?: NhostClient\n  graphqlUrl?: string\n  headers?: any\n  publicRole?: string\n  fetchPolicy?: WatchQueryFetchPolicy\n  connectToDevTools?: boolean\n  cache?: InMemoryCache\n  onError?: RequestHandler\n}\n\nexport const createApolloClient = ({\n  nhost,\n  graphqlUrl,\n  headers = {},\n  publicRole = 'public',\n  fetchPolicy,\n  cache = new InMemoryCache(),\n  connectToDevTools = isBrowser && process.env.NODE_ENV === 'development',\n  onError\n}: NhostApolloClientOptions): ApolloClient<any> => {\n  let backendUrl = graphqlUrl || nhost?.graphql.getUrl()\n  if (!backendUrl) {\n    throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\")\n  }\n  const interpreter = nhost?.auth.client.interpreter\n\n  let token: string | null = null\n\n  const getAuthHeaders = () => {\n    // add headers\n    const resHeaders = {\n      ...headers,\n      'Sec-WebSocket-Protocol': 'graphql-ws'\n    }\n\n    // add auth headers if signed in\n    // or add 'public' role if not signed in\n    if (token) {\n      resHeaders.authorization = `Bearer ${token}`\n    } else {\n      // ? Not sure it changes anything for Hasura\n      resHeaders.role = publicRole\n    }\n\n    return resHeaders\n  }\n\n  const uri = backendUrl\n\n  const wsClient =\n    isBrowser &&\n    createRestartableClient({\n      url: uri.startsWith('https') ? uri.replace(/^https/, 'wss') : uri.replace(/^http/, 'ws'),\n      connectionParams: () => ({\n        headers: {\n          ...headers,\n          ...getAuthHeaders()\n        }\n      })\n    })\n  const wsLink = wsClient && new GraphQLWsLink(wsClient)\n\n  const httpLink = setContext((_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        ...getAuthHeaders()\n      }\n    }\n  }).concat(\n    createHttpLink({\n      uri\n    })\n  )\n\n  const link = wsLink\n    ? split(\n        ({ query }) => {\n          const mainDefinition = getMainDefinition(query)\n\n          const { kind } = mainDefinition\n          let operation\n          if ('operation' in mainDefinition) {\n            operation = mainDefinition.operation\n          }\n\n          return kind === 'OperationDefinition' && operation === 'subscription'\n        },\n        wsLink,\n        httpLink\n      )\n    : httpLink\n\n  const apolloClientOptions: ApolloClientOptions<any> = {\n    cache: cache || new InMemoryCache(),\n    ssrMode: !isBrowser,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy\n      }\n    },\n    connectToDevTools\n  }\n\n  // add link\n  apolloClientOptions.link = typeof onError === 'function' ? from([onError, link]) : from([link])\n\n  const client = new ApolloClient(apolloClientOptions)\n\n  interpreter?.onTransition(async (state, event) => {\n    if (['SIGNOUT', 'SIGNED_IN', 'TOKEN_CHANGED'].includes(event.type)) {\n      const newToken = state.context.accessToken.value\n      token = newToken\n      if (event.type === 'SIGNOUT') {\n        try {\n          await client.resetStore()\n        } catch (error) {\n          console.error('Error resetting Apollo client cache')\n          console.error(error)\n        }\n      } else {\n        if (isBrowser && wsClient && wsClient.started()) {\n          wsClient.restart()\n        }\n      }\n    }\n  })\n\n  return client\n}\n"],"names":["createClient","InMemoryCache","GraphQLWsLink","setContext","createHttpLink","split","getMainDefinition","from","ApolloClient"],"mappings":"otBAQO,WAAiC,EAA2C,CACjF,GAAI,GAAmB,GACnB,EAAU,IAAM,CACC,EAAA,EAAA,EAEjB,EAAW,GACf,KAAM,GAAU,IAAM,EAEhB,EAASA,EAAAA,aAAa,OACvB,GADuB,CAE1B,GAAI,OACC,EAAQ,IADT,CAEF,UAAW,IAAM,CACJ,EAAA,EACb,EACA,OAAQ,AAAC,GAAmB,SAC1B,KAAM,GAAS,EACP,QAAA,KAAA,cAAI,SAAJ,eAAa,GAErB,EAAU,IAAM,CACV,AAAA,EAAO,aAAe,UAAU,KAE3B,EAAA,MAAM,KAAM,gBAAgB,EAIhB,EAAA,EACrB,EAIE,GACiB,GAAA,GACX,IAEZ,CACF,EAAA,EACD,EAEM,MAAA,QACF,GADE,CAEL,QAAS,IAAM,EAAQ,EACvB,SAAA,EAEJ,CCpCA,KAAM,GAAY,MAAO,SAAW,YAavB,EAAqB,CAAC,CACjC,QACA,aACA,UAAU,CAAC,EACX,aAAa,SACb,cACA,QAAQ,GAAIC,GAAAA,cACZ,oBAAoB,GAAa,GACjC,aACiD,CACjD,GAAI,GAAa,GAAc,kBAAO,QAAQ,UAC9C,GAAI,CAAC,EACH,KAAM,OAAM,sEAAsE,EAE9E,KAAA,GAAc,iBAAO,KAAK,OAAO,YAEvC,GAAI,GAAuB,KAE3B,KAAM,GAAiB,IAAM,CAE3B,KAAM,GAAa,OACd,GADc,CAEjB,yBAA0B,YAAA,GAK5B,MAAI,GACF,EAAW,cAAgB,UAAU,IAGrC,EAAW,KAAO,EAGb,CAAA,EAGH,EAAM,EAEN,EACJ,GACA,EAAwB,CACtB,IAAK,EAAI,WAAW,OAAO,EAAI,EAAI,QAAQ,SAAU,KAAK,EAAI,EAAI,QAAQ,QAAS,IAAI,EACvF,iBAAkB,IAAO,EACvB,QAAS,OACJ,GACA,EAAe,EACpB,EACF,CACD,EACG,EAAS,GAAY,GAAIC,GAAA,cAAc,CAAQ,EAE/C,EAAWC,EAAAA,WAAW,CAAC,EAAG,CAAE,QAAc,KACvC,EACL,QAAS,OACJ,GACA,EAAe,EACpB,EAEH,EAAE,OACDC,iBAAe,CACb,KACD,CAAA,CACH,EAEM,EAAO,EACTC,EACE,MAAA,CAAC,CAAE,WAAY,CACP,KAAA,GAAiBC,oBAAkB,CAAK,EAExC,CAAE,QAAS,EACb,GAAA,GACJ,MAAI,aAAe,IACjB,GAAY,EAAe,WAGtB,IAAS,uBAAyB,IAAc,cAAA,EAEzD,EACA,CACF,EACA,EAEE,EAAgD,CACpD,MAAO,GAAS,GAAIL,iBACpB,QAAS,CAAC,EACV,eAAgB,CACd,WAAY,CACV,aACF,CACF,EACA,mBAAA,EAIF,EAAoB,KAAO,MAAO,IAAY,WAAaM,EAAAA,KAAK,CAAC,EAAS,CAAI,CAAC,EAAIA,EAAAA,KAAK,CAAC,CAAI,CAAC,EAExF,KAAA,GAAS,GAAIC,gBAAa,CAAmB,EAEtC,kBAAA,aAAa,MAAO,EAAO,IAAU,CAC5C,GAAA,CAAC,UAAW,YAAa,eAAe,EAAE,SAAS,EAAM,IAAI,EAG3D,GADI,EADS,EAAM,QAAQ,YAAY,MAEvC,EAAM,OAAS,UACb,GAAA,CACF,KAAM,GAAO,mBACN,GACP,QAAQ,MAAM,qCAAqC,EACnD,QAAQ,MAAM,CAAK,CACrB,KAEA,AAAI,IAAa,GAAY,EAAS,QAAA,GACpC,EAAS,QAAQ,CAGvB,GAGK,CACT"}