{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { print } from \"graphql\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { isNonNullObject, Observable } from \"../../utilities/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nfunction isLikeCloseEvent(val) {\n  return isNonNullObject(val) && 'code' in val && 'reason' in val;\n}\nvar GraphQLWsLink = function (_super) {\n  __extends(GraphQLWsLink, _super);\n  function GraphQLWsLink(client) {\n    var _this = _super.call(this) || this;\n    _this.client = client;\n    return _this;\n  }\n  GraphQLWsLink.prototype.request = function (operation) {\n    var _this = this;\n    return new Observable(function (observer) {\n      return _this.client.subscribe(__assign(__assign({}, operation), {\n        query: print(operation.query)\n      }), {\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n        error: function error(err) {\n          if (err instanceof Error) {\n            return observer.error(err);\n          }\n          if (isLikeCloseEvent(err)) {\n            return observer.error(new Error(\"Socket closed with event \".concat(err.code, \" \").concat(err.reason || \"\")));\n          }\n          return observer.error(new ApolloError({\n            graphQLErrors: Array.isArray(err) ? err : [err]\n          }));\n        }\n      });\n    });\n  };\n  return GraphQLWsLink;\n}(ApolloLink);\nexport { GraphQLWsLink };","map":null,"metadata":{},"sourceType":"module"}