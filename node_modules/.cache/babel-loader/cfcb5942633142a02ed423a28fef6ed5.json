{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) {\n    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n  for (var prop in source) {\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  }\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return target;\n};\nimport { HasuraAuthClient } from \"@nhost/hasura-auth-js\";\nimport { HasuraStorageClient } from \"@nhost/hasura-storage-js\";\nimport axios from \"axios\";\nimport { print } from \"graphql\";\nvar NhostFunctionsClient = /*#__PURE__*/function () {\n  function NhostFunctionsClient(params) {\n    _classCallCheck(this, NhostFunctionsClient);\n    var url = params.url,\n      adminSecret = params.adminSecret;\n    this.accessToken = null;\n    this.adminSecret = adminSecret;\n    this.instance = axios.create({\n      baseURL: url\n    });\n  }\n  _createClass(NhostFunctionsClient, [{\n    key: \"call\",\n    value: function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, data, config) {\n        var headers, res;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                headers = __spreadValues(__spreadValues({}, this.generateAccessTokenHeaders()), config == null ? void 0 : config.headers);\n                _context.prev = 1;\n                _context.next = 4;\n                return this.instance.post(url, data, __spreadProps(__spreadValues({}, config), {\n                  headers: headers\n                }));\n              case 4:\n                res = _context.sent;\n                _context.next = 11;\n                break;\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                if (!(_context.t0 instanceof Error)) {\n                  _context.next = 11;\n                  break;\n                }\n                return _context.abrupt(\"return\", {\n                  res: null,\n                  error: _context.t0\n                });\n              case 11:\n                if (res) {\n                  _context.next = 13;\n                  break;\n                }\n                return _context.abrupt(\"return\", {\n                  res: null,\n                  error: new Error(\"Unable to make post request to funtion\")\n                });\n              case 13:\n                return _context.abrupt(\"return\", {\n                  res: res,\n                  error: null\n                });\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n      function call(_x, _x2, _x3) {\n        return _call.apply(this, arguments);\n      }\n      return call;\n    }()\n  }, {\n    key: \"setAccessToken\",\n    value: function setAccessToken(accessToken) {\n      if (!accessToken) {\n        this.accessToken = null;\n        return;\n      }\n      this.accessToken = accessToken;\n    }\n  }, {\n    key: \"generateAccessTokenHeaders\",\n    value: function generateAccessTokenHeaders() {\n      if (this.adminSecret) {\n        return {\n          \"x-hasura-admin-secret\": this.adminSecret\n        };\n      }\n      if (this.accessToken) {\n        return {\n          Authorization: \"Bearer \".concat(this.accessToken)\n        };\n      }\n      return {};\n    }\n  }]);\n  return NhostFunctionsClient;\n}();\nvar NhostGraphqlClient = /*#__PURE__*/function () {\n  function NhostGraphqlClient(params) {\n    _classCallCheck(this, NhostGraphqlClient);\n    var url = params.url,\n      adminSecret = params.adminSecret;\n    this.url = url;\n    this.accessToken = null;\n    this.adminSecret = adminSecret;\n    this.instance = axios.create({\n      baseURL: url\n    });\n  }\n  _createClass(NhostGraphqlClient, [{\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(document, variables, config) {\n        var headers, operationName, res, responseData, data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                headers = __spreadValues(__spreadValues({}, this.generateAccessTokenHeaders()), config == null ? void 0 : config.headers);\n                _context2.prev = 1;\n                operationName = \"\";\n                _context2.next = 5;\n                return this.instance.post(\"\", {\n                  operationName: operationName || void 0,\n                  query: typeof document === \"string\" ? document : print(document),\n                  variables: variables\n                }, __spreadProps(__spreadValues({}, config), {\n                  headers: headers\n                }));\n              case 5:\n                res = _context2.sent;\n                responseData = res.data;\n                data = responseData.data;\n                if (!responseData.errors) {\n                  _context2.next = 10;\n                  break;\n                }\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: responseData.errors\n                });\n              case 10:\n                if (!(typeof data !== \"object\" || Array.isArray(data) || data === null)) {\n                  _context2.next = 12;\n                  break;\n                }\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: new Error(\"incorrect response data from GraphQL server\")\n                });\n              case 12:\n                return _context2.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](1);\n                if (!(_context2.t0 instanceof Error)) {\n                  _context2.next = 19;\n                  break;\n                }\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: _context2.t0\n                });\n              case 19:\n                console.error(_context2.t0);\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: new Error(\"Unable to get do GraphQL request\")\n                });\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 15]]);\n      }));\n      function request(_x4, _x5, _x6) {\n        return _request.apply(this, arguments);\n      }\n      return request;\n    }()\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      return this.url;\n    }\n  }, {\n    key: \"setAccessToken\",\n    value: function setAccessToken(accessToken) {\n      if (!accessToken) {\n        this.accessToken = null;\n        return;\n      }\n      this.accessToken = accessToken;\n    }\n  }, {\n    key: \"generateAccessTokenHeaders\",\n    value: function generateAccessTokenHeaders() {\n      if (this.adminSecret) {\n        return {\n          \"x-hasura-admin-secret\": this.adminSecret\n        };\n      }\n      if (this.accessToken) {\n        return {\n          Authorization: \"Bearer \".concat(this.accessToken)\n        };\n      }\n      return {};\n    }\n  }]);\n  return NhostGraphqlClient;\n}();\nvar LOCALHOST_REGEX = /^localhost(:\\d+)*$/g;\nfunction urlFromParams(backendOrSubdomain, service) {\n  var backendUrl = backendOrSubdomain.backendUrl,\n    subdomain = backendOrSubdomain.subdomain,\n    region = backendOrSubdomain.region;\n  if (!backendUrl && !subdomain) {\n    throw new Error(\"Either `backendUrl` or `subdomain` must be set.\");\n  }\n  if (backendUrl) {\n    return \"\".concat(backendUrl, \"/v1/\").concat(service);\n  }\n  if (!subdomain) {\n    throw new Error(\"`subdomain` must be set if `backendUrl` is not set.\");\n  }\n  var subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX);\n  if (subdomainLocalhostFound && subdomainLocalhostFound.length > 0) {\n    var localhostFound = subdomainLocalhostFound[0];\n    if (localhostFound === \"localhost\") {\n      return \"http://localhost:1337/v1/\".concat(service);\n    }\n    return \"http://\".concat(localhostFound, \"/v1/\").concat(service);\n  }\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"localhost\".');\n  }\n  return \"https://\".concat(subdomain, \".\").concat(service, \".\").concat(region, \".nhost.run/v1\");\n}\nvar NhostClient = /*#__PURE__*/function () {\n  function NhostClient(_a) {\n    var _this = this;\n    _classCallCheck(this, NhostClient);\n    var _b = _a,\n      refreshIntervalTime = _b.refreshIntervalTime,\n      clientStorageGetter = _b.clientStorageGetter,\n      clientStorageSetter = _b.clientStorageSetter,\n      clientStorage = _b.clientStorage,\n      clientStorageType = _b.clientStorageType,\n      autoRefreshToken = _b.autoRefreshToken,\n      autoSignIn = _b.autoSignIn,\n      adminSecret = _b.adminSecret,\n      devTools = _b.devTools,\n      _b$start = _b.start,\n      start = _b$start === void 0 ? true : _b$start,\n      urlParams = __objRest(_b, [\"refreshIntervalTime\", \"clientStorageGetter\", \"clientStorageSetter\", \"clientStorage\", \"clientStorageType\", \"autoRefreshToken\", \"autoSignIn\", \"adminSecret\", \"devTools\", \"start\"]);\n    var _a2;\n    this.auth = new HasuraAuthClient({\n      url: urlFromParams(urlParams, \"auth\"),\n      refreshIntervalTime: refreshIntervalTime,\n      clientStorageGetter: clientStorageGetter,\n      clientStorageSetter: clientStorageSetter,\n      clientStorage: clientStorage,\n      clientStorageType: clientStorageType,\n      autoRefreshToken: autoRefreshToken,\n      autoSignIn: autoSignIn,\n      start: start\n    });\n    this.storage = new HasuraStorageClient({\n      url: urlFromParams(urlParams, \"storage\"),\n      adminSecret: adminSecret\n    });\n    this.functions = new NhostFunctionsClient({\n      url: urlFromParams(urlParams, \"functions\"),\n      adminSecret: adminSecret\n    });\n    this.graphql = new NhostGraphqlClient({\n      url: urlFromParams(urlParams, \"graphql\"),\n      adminSecret: adminSecret\n    });\n    this.storage.setAccessToken(this.auth.getAccessToken());\n    this.functions.setAccessToken(this.auth.getAccessToken());\n    this.graphql.setAccessToken(this.auth.getAccessToken());\n    (_a2 = this.auth.client) == null ? void 0 : _a2.onStart(function () {\n      _this.auth.onAuthStateChanged(function (_event, session) {\n        if (_event === \"SIGNED_OUT\") {\n          _this.storage.setAccessToken(void 0);\n          _this.functions.setAccessToken(void 0);\n          _this.graphql.setAccessToken(void 0);\n        }\n      });\n      _this.auth.onTokenChanged(function (session) {\n        _this.storage.setAccessToken(session == null ? void 0 : session.accessToken);\n        _this.functions.setAccessToken(session == null ? void 0 : session.accessToken);\n        _this.graphql.setAccessToken(session == null ? void 0 : session.accessToken);\n      });\n    });\n    this._adminSecret = adminSecret;\n    this.devTools = devTools;\n  }\n  _createClass(NhostClient, [{\n    key: \"adminSecret\",\n    get: function get() {\n      return this._adminSecret;\n    },\n    set: function set(newValue) {\n      this._adminSecret = newValue;\n      this.storage.setAdminSecret(newValue);\n    }\n  }]);\n  return NhostClient;\n}();\nvar createClient = function createClient(config) {\n  return new NhostClient(config);\n};\nexport { NhostClient, NhostFunctionsClient, NhostGraphqlClient, createClient };","map":{"version":3,"mappings":"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","names":["NhostFunctionsClient","params","url","adminSecret","accessToken","axios","create","baseURL","data","config","headers","__spreadValues","generateAccessTokenHeaders","instance","post","__spreadProps","res","Error","error","Authorization","NhostGraphqlClient","document","variables","operationName","query","print","responseData","errors","Array","isArray","console","LOCALHOST_REGEX","backendOrSubdomain","service","backendUrl","subdomain","region","match","subdomainLocalhostFound","length","localhostFound","NhostClient","_a","refreshIntervalTime","_b","clientStorageGetter","clientStorageSetter","clientStorage","clientStorageType","autoRefreshToken","autoSignIn","devTools","start","urlParams","HasuraAuthClient","urlFromParams","HasuraStorageClient","storage","setAccessToken","auth","getAccessToken","functions","graphql","client","onStart","onAuthStateChanged","_event","session","onTokenChanged","_adminSecret","newValue","setAdminSecret","createClient"],"sources":["C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\nhost-js\\src\\clients\\functions.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\nhost-js\\src\\clients\\graphql.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\nhost-js\\src\\utils\\helpers.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\nhost-js\\src\\core\\nhost-client.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\nhost-js\\src\\index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders, AxiosResponse } from 'axios'\n\nimport { FunctionCallResponse } from '../utils/types'\nexport interface NhostFunctionsConstructorParams {\n  /**\n   * Serverless Functions endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * @alias Functions\n */\nexport class NhostFunctionsClient {\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostFunctionsConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function.\n   *\n   * @example\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call<T = unknown, D = any>(\n    url: string,\n    data: D,\n    config?: AxiosRequestConfig\n  ): Promise<FunctionCallResponse<T>> {\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers\n    }\n\n    let res\n    try {\n      res = await this.instance.post<T, AxiosResponse<T>, D>(url, data, { ...config, headers })\n    } catch (error) {\n      if (error instanceof Error) {\n        return { res: null, error }\n      }\n    }\n\n    if (!res) {\n      return {\n        res: null,\n        error: new Error('Unable to make post request to funtion')\n      }\n    }\n\n    return { res, error: null }\n  }\n\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): AxiosRequestHeaders {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders } from 'axios'\nimport { DocumentNode, print } from 'graphql'\n\nimport { GraphqlRequestResponse, GraphqlResponse } from '../utils/types'\n\nexport interface NhostGraphqlConstructorParams {\n  /**\n   * GraphQL endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * @alias GraphQL\n */\nexport class NhostGraphqlClient {\n  private url: string\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostGraphqlConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.graphql.request` to send a GraphQL request. For more serious GraphQL usage we recommend using a GraphQL client such as Apollo Client (https://www.apollographql.com/docs/react).\n   *\n   * @example\n   * ```ts\n   * const CUSTOMERS = gql`\n   *  query {\n   *   customers {\n   *    id\n   *    name\n   *  }\n   * }\n   * `\n   * const { data, error } = await nhost.graphql.request(CUSTOMERS)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/request\n   */\n  async request<T = any, V = any>(\n    document: string | DocumentNode,\n    variables?: V,\n    config?: AxiosRequestConfig\n  ): Promise<GraphqlRequestResponse<T>> {\n    // add auth headers if any\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers\n    }\n\n    try {\n      const operationName = ''\n      const res = await this.instance.post<GraphqlResponse<T>>(\n        '',\n        {\n          operationName: operationName || undefined,\n          query: typeof document === 'string' ? document : print(document),\n          variables\n        },\n        { ...config, headers }\n      )\n\n      const responseData = res.data\n      const { data } = responseData\n\n      if (responseData.errors) {\n        return {\n          data: null,\n          error: responseData.errors\n        }\n      }\n\n      if (typeof data !== 'object' || Array.isArray(data) || data === null) {\n        return {\n          data: null,\n          error: new Error('incorrect response data from GraphQL server')\n        }\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (error instanceof Error) {\n        return { data: null, error }\n      }\n      console.error(error)\n      return {\n        data: null,\n        error: new Error('Unable to get do GraphQL request')\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.getUrl` to get the GraphQL URL.\n   *\n   * @example\n   * ```ts\n   * const url = nhost.graphql.getUrl();\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/get-url\n   */\n  getUrl(): string {\n    return this.url\n  }\n\n  /**\n   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): AxiosRequestHeaders {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import { NhostClientConstructorParams } from './types'\n\nconst LOCALHOST_REGEX = /^localhost(:\\d+)*$/g\n\n/**\n * `backendUrl` should now be used only when self-hosting\n * `subdomain` and `region` should be used instead when using the Nhost platform\n * `\n * @param backendOrSubdomain\n * @param service\n * @returns\n */\nexport function urlFromParams(\n  backendOrSubdomain: Pick<NhostClientConstructorParams, 'region' | 'subdomain' | 'backendUrl'>,\n  service: string\n) {\n  const { backendUrl, subdomain, region } = backendOrSubdomain\n\n  if (!backendUrl && !subdomain) {\n    throw new Error('Either `backendUrl` or `subdomain` must be set.')\n  }\n\n  if (backendUrl) {\n    return `${backendUrl}/v1/${service}`\n  }\n\n  // to make TS happy\n  if (!subdomain) {\n    throw new Error('`subdomain` must be set if `backendUrl` is not set.')\n  }\n\n  // check if subdomain is localhost[:port]\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX)\n  if (subdomainLocalhostFound && subdomainLocalhostFound.length > 0) {\n    const localhostFound = subdomainLocalhostFound[0]\n\n    // no port specified, use standard port 1337\n    if (localhostFound === 'localhost') {\n      return `http://localhost:1337/v1/${service}`\n    }\n\n    // port specified\n    return `http://${localhostFound}/v1/${service}`\n  }\n\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"localhost\".')\n  }\n\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\nimport { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { NhostFunctionsClient } from '../clients/functions'\nimport { NhostGraphqlClient } from '../clients/graphql'\nimport { urlFromParams } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\nexport class NhostClient {\n  auth: HasuraAuthClient\n  storage: HasuraStorageClient\n  functions: NhostFunctionsClient\n  graphql: NhostGraphqlClient\n  private _adminSecret?: string\n  readonly devTools?: boolean\n\n  /**\n   * Nhost Client\n   *\n   * @example\n   * ```ts\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime,\n    clientStorageGetter,\n    clientStorageSetter,\n    clientStorage,\n    clientStorageType,\n    autoRefreshToken,\n    autoSignIn,\n    adminSecret,\n    devTools,\n    start = true,\n    ...urlParams\n  }: NhostClientConstructorParams) {\n    this.auth = new HasuraAuthClient({\n      url: urlFromParams(urlParams, 'auth'),\n      refreshIntervalTime,\n      clientStorageGetter,\n      clientStorageSetter,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start\n    })\n\n    this.storage = new HasuraStorageClient({\n      url: urlFromParams(urlParams, 'storage'),\n      adminSecret\n    })\n\n    this.functions = new NhostFunctionsClient({\n      url: urlFromParams(urlParams, 'functions'),\n      adminSecret\n    })\n\n    this.graphql = new NhostGraphqlClient({\n      url: urlFromParams(urlParams, 'graphql'),\n      adminSecret\n    })\n\n    // * Set current token if token is already accessable\n    this.storage.setAccessToken(this.auth.getAccessToken())\n    this.functions.setAccessToken(this.auth.getAccessToken())\n    this.graphql.setAccessToken(this.auth.getAccessToken())\n\n    this.auth.client?.onStart(() => {\n      // * Set access token when signing out\n      this.auth.onAuthStateChanged((_event, session) => {\n        if (_event === 'SIGNED_OUT') {\n          this.storage.setAccessToken(undefined)\n          this.functions.setAccessToken(undefined)\n          this.graphql.setAccessToken(undefined)\n        }\n      })\n\n      // * Update access token for clients, including when signin in\n      this.auth.onTokenChanged((session) => {\n        this.storage.setAccessToken(session?.accessToken)\n        this.functions.setAccessToken(session?.accessToken)\n        this.graphql.setAccessToken(session?.accessToken)\n      })\n    })\n    this._adminSecret = adminSecret\n    this.devTools = devTools\n  }\n\n  get adminSecret(): string | undefined {\n    return this._adminSecret\n  }\n\n  set adminSecret(newValue: string | undefined) {\n    this._adminSecret = newValue\n    this.storage.setAdminSecret(newValue)\n    // TODO inconsistent API: storage can change admin secret, but functions/graphql cannot\n    // this.functions.setAdminSecret(newValue)\n    // this.graphql.setAdminSecret(newValue)\n  }\n}\n","import { NhostClientConstructorParams } from './utils/types'\nimport { NhostClient } from './core'\n\nconst createClient = (config: NhostClientConstructorParams) => new NhostClient(config)\n\nexport * from './clients'\nexport * from './core'\nexport * from './utils/types'\nexport { createClient }\n"]},"metadata":{},"sourceType":"module"}