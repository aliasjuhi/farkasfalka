{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeIsBetween = exports.dateIsBetween = exports.dateHourIsBetween = void 0;\nvar _start_of_day = _interopRequireDefault(require(\"date-fns/start_of_day\"));\nvar _is_after = _interopRequireDefault(require(\"date-fns/is_after\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// Helper function that uses date-fns methods to determine if a date is between two other dates\nconst dateHourIsBetween = (start, candidate, end) => (candidate.getTime() === start.getTime() || (0, _is_after.default)(candidate, start)) && (candidate.getTime() === end.getTime() || (0, _is_after.default)(end, candidate));\nexports.dateHourIsBetween = dateHourIsBetween;\nconst dateIsBetween = (start, candidate, end) => {\n  const startOfCandidate = (0, _start_of_day.default)(candidate);\n  const startOfStart = (0, _start_of_day.default)(start);\n  const startOfEnd = (0, _start_of_day.default)(end);\n  return (startOfCandidate.getTime() === startOfStart.getTime() || (0, _is_after.default)(startOfCandidate, startOfStart)) && (startOfCandidate.getTime() === startOfEnd.getTime() || (0, _is_after.default)(startOfEnd, startOfCandidate));\n};\nexports.dateIsBetween = dateIsBetween;\nconst timeIsBetween = (start, candidate, end) => {\n  const candidateTime = candidate.getHours() * 60 + candidate.getMinutes();\n  const startTime = start.getHours() * 60 + start.getMinutes();\n  const endTime = end.getHours() * 60 + end.getMinutes();\n  return candidateTime >= startTime && candidateTime <= endTime;\n};\nexports.timeIsBetween = timeIsBetween;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;;;;;;;AAEA;AACO,MAAMA,iBAAiB,GAAG,CAACC,KAAD,EAAcC,SAAd,EAA+BC,GAA/B,KAC/B,CAACD,SAAS,CAACE,OAAV,OAAwBH,KAAK,CAACG,OAAN,EAAxB,IAA2C,uBAAQF,SAAR,EAAmBD,KAAnB,CAA5C,MACCC,SAAS,CAACE,OAAV,OAAwBD,GAAG,CAACC,OAAJ,EAAxB,IAAyC,uBAAQD,GAAR,EAAaD,SAAb,CAD1C,CADK;;AAIA,MAAMG,aAAa,GAAG,CAACJ,KAAD,EAAcC,SAAd,EAA+BC,GAA/B,KAAsD;EACjF,MAAMG,gBAAgB,GAAG,2BAAWJ,SAAX,CAAzB;EACA,MAAMK,YAAY,GAAG,2BAAWN,KAAX,CAArB;EACA,MAAMO,UAAU,GAAG,2BAAWL,GAAX,CAAnB;EAEA,OACE,CAACG,gBAAgB,CAACF,OAAjB,OAA+BG,YAAY,CAACH,OAAb,EAA/B,IAAyD,uBAAQE,gBAAR,EAA0BC,YAA1B,CAA1D,MACCD,gBAAgB,CAACF,OAAjB,OAA+BI,UAAU,CAACJ,OAAX,EAA/B,IAAuD,uBAAQI,UAAR,EAAoBF,gBAApB,CADxD,CADF;AAID,CATM;;AAWA,MAAMG,aAAa,GAAG,CAACR,KAAD,EAAcC,SAAd,EAA+BC,GAA/B,KAAsD;EACjF,MAAMO,aAAa,GAAGR,SAAS,CAACS,QAAV,KAAuB,EAAvB,GAA4BT,SAAS,CAACU,UAAV,EAAlD;EACA,MAAMC,SAAS,GAAGZ,KAAK,CAACU,QAAN,KAAmB,EAAnB,GAAwBV,KAAK,CAACW,UAAN,EAA1C;EACA,MAAME,OAAO,GAAGX,GAAG,CAACQ,QAAJ,KAAiB,EAAjB,GAAsBR,GAAG,CAACS,UAAJ,EAAtC;EAEA,OAAOF,aAAa,IAAIG,SAAjB,IAA8BH,aAAa,IAAII,OAAtD;AACD,CANM","names":["dateHourIsBetween","start","candidate","end","getTime","dateIsBetween","startOfCandidate","startOfStart","startOfEnd","timeIsBetween","candidateTime","getHours","getMinutes","startTime","endTime"],"sources":["C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\react-schedule-selector\\src\\lib\\date-utils.ts"],"sourcesContent":["import startOfDay from 'date-fns/start_of_day'\nimport isAfter from 'date-fns/is_after'\n\n// Helper function that uses date-fns methods to determine if a date is between two other dates\nexport const dateHourIsBetween = (start: Date, candidate: Date, end: Date): boolean =>\n  (candidate.getTime() === start.getTime() || isAfter(candidate, start)) &&\n  (candidate.getTime() === end.getTime() || isAfter(end, candidate))\n\nexport const dateIsBetween = (start: Date, candidate: Date, end: Date): boolean => {\n  const startOfCandidate = startOfDay(candidate)\n  const startOfStart = startOfDay(start)\n  const startOfEnd = startOfDay(end)\n\n  return (\n    (startOfCandidate.getTime() === startOfStart.getTime() || isAfter(startOfCandidate, startOfStart)) &&\n    (startOfCandidate.getTime() === startOfEnd.getTime() || isAfter(startOfEnd, startOfCandidate))\n  )\n}\n\nexport const timeIsBetween = (start: Date, candidate: Date, end: Date): boolean => {\n  const candidateTime = candidate.getHours() * 60 + candidate.getMinutes()\n  const startTime = start.getHours() * 60 + start.getMinutes()\n  const endTime = end.getHours() * 60 + end.getMinutes()\n\n  return candidateTime >= startTime && candidateTime <= endTime\n}\n"]},"metadata":{},"sourceType":"script"}