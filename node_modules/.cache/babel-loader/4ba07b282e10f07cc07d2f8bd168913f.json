{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from 'react';\nexport function useFirestoreQuery(query) {\n  _s();\n  const [docs, setDocs] = useState([]);\n\n  // Store current query in ref\n  const queryRef = useRef(query);\n\n  // Compare current query with the previous one\n  useEffect(() => {\n    var _queryRef$curent;\n    // Use Firestore built-in 'isEqual' method\n    // to compare queries\n    if (!(queryRef !== null && queryRef !== void 0 && (_queryRef$curent = queryRef.curent) !== null && _queryRef$curent !== void 0 && _queryRef$curent.isEqual(query))) {\n      queryRef.current = query;\n    }\n  });\n\n  // Re-run data listener only if query has changed\n  useEffect(() => {\n    if (!queryRef.current) {\n      return null;\n    }\n\n    // Subscribe to query with onSnapshot\n    const unsubscribe = queryRef.current.onSnapshot(querySnapshot => {\n      // Get all documents from collection - with IDs\n      const data = querySnapshot.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      // Update state\n      setDocs(data);\n    });\n\n    // Detach listener\n    return unsubscribe;\n  }, [queryRef]);\n  return docs;\n}\n_s(useFirestoreQuery, \"Re5UcHB+INAeXTC2rNtMGWgiZSw=\");\nexport function useAuthState(auth) {\n  _s2();\n  const [initializing, setInitializing] = useState(true);\n  const [user, setUser] = useState(() => auth.currentUser);\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n      if (initializing) {\n        setInitializing(false);\n      }\n    });\n\n    // Cleanup subscription\n    return unsubscribe;\n  }, [auth, initializing]);\n  return {\n    user,\n    initializing\n  };\n}\n_s2(useAuthState, \"1y5OXjZSOZEq7yaIlGqOitqtnTg=\");\nexport function useLocalStorage(key, initialValue) {\n  _s3();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n_s3(useLocalStorage, \"z0XdM4TLkDZuzSOGq1lQIVlfpgk=\");\nexport function useMedia(queries, values, defaultValue) {\n  _s4();\n  // Array containing a media query list for each query\n  const mediaQueryLists = queries.map(q => window.matchMedia(q));\n\n  // Function that gets value based on matching media query\n  const getValue = useCallback(() => {\n    // Get index of first media query that matches\n    const index = mediaQueryLists.findIndex(mql => mql.matches);\n    // Return related value or defaultValue if none\n    return typeof values[index] !== 'undefined' ? values[index] : defaultValue;\n  }, [mediaQueryLists, values, defaultValue]);\n\n  // State and setter for matched value\n  const [value, setValue] = useState(getValue);\n  useEffect(() => {\n    // Event listener callback\n    // Note: By defining getValue outside of useEffect we ensure that it has ...\n    // ... current values of hook args (as this hook callback is created once on mount).\n    const handler = () => setValue(getValue);\n    // Set a listener for each media query with above handler as callback.\n    mediaQueryLists.forEach(mql => mql.addListener(handler));\n    // Remove listeners on cleanup\n    return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\n  }, [getValue, mediaQueryLists]);\n  return value;\n}\n_s4(useMedia, \"e+PQ5vNDHpJn//CUrGMhOOWZeEw=\");\nexport function useDarkMode() {\n  _s5();\n  // See if user has set a browser or OS preference for dark mode.\n  const prefersDarkMode = useMedia(['(prefers-color-scheme: dark)'], [true], false);\n\n  // Use our useLocalStorage hook to persist state through a page refresh\n  const [enabled, setEnabled] = useLocalStorage('dark-mode-enabled', prefersDarkMode);\n\n  // Fire off effect that add/removes dark mode class\n  useEffect(() => {\n    const className = 'dark';\n    const element = window.document.body;\n    if (enabled) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }, [enabled] // Only re-call effect when value changes\n  );\n\n  // Return enabled state and setter\n  return [enabled, setEnabled];\n}\n_s5(useDarkMode, \"A4e7DHAPR7cIAoKN75jTiwgtryE=\", false, function () {\n  return [useMedia, useLocalStorage];\n});","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","useFirestoreQuery","query","docs","setDocs","queryRef","curent","isEqual","current","unsubscribe","onSnapshot","querySnapshot","data","map","doc","id","useAuthState","auth","initializing","setInitializing","user","setUser","currentUser","onAuthStateChanged","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify","useMedia","queries","values","defaultValue","mediaQueryLists","q","matchMedia","getValue","index","findIndex","mql","matches","handler","forEach","addListener","removeListener","useDarkMode","prefersDarkMode","enabled","setEnabled","className","element","document","body","classList","add","remove"],"sources":["C:/Users/Alias/weboldal/web-login/src/Chat/src/hooks.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\r\n\r\nexport function useFirestoreQuery(query) {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  // Store current query in ref\r\n  const queryRef = useRef(query);\r\n\r\n  // Compare current query with the previous one\r\n  useEffect(() => {\r\n    // Use Firestore built-in 'isEqual' method\r\n    // to compare queries\r\n    if (!queryRef?.curent?.isEqual(query)) {\r\n      queryRef.current = query;\r\n    }\r\n  });\r\n\r\n  // Re-run data listener only if query has changed\r\n  useEffect(() => {\r\n    if (!queryRef.current) {\r\n      return null;\r\n    }\r\n\r\n    // Subscribe to query with onSnapshot\r\n    const unsubscribe = queryRef.current.onSnapshot(querySnapshot => {\r\n      // Get all documents from collection - with IDs\r\n      const data = querySnapshot.docs.map(doc => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      // Update state\r\n      setDocs(data);\r\n    });\r\n\r\n    // Detach listener\r\n    return unsubscribe;\r\n  }, [queryRef]);\r\n\r\n  return docs;\r\n}\r\n\r\nexport function useAuthState(auth) {\r\n  const [initializing, setInitializing] = useState(true);\r\n  const [user, setUser] = useState(() => auth.currentUser);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      if (user) {\r\n        setUser(user);\r\n      } else {\r\n        setUser(false);\r\n      }\r\n      if (initializing) {\r\n        setInitializing(false);\r\n      }\r\n    });\r\n\r\n    // Cleanup subscription\r\n    return unsubscribe;\r\n  }, [auth, initializing]);\r\n\r\n  return { user, initializing };\r\n}\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport function useMedia(queries, values, defaultValue) {\r\n  // Array containing a media query list for each query\r\n  const mediaQueryLists = queries.map(q => window.matchMedia(q));\r\n\r\n  // Function that gets value based on matching media query\r\n  const getValue = useCallback(() => {\r\n    // Get index of first media query that matches\r\n    const index = mediaQueryLists.findIndex(mql => mql.matches);\r\n    // Return related value or defaultValue if none\r\n    return typeof values[index] !== 'undefined' ? values[index] : defaultValue;\r\n  }, [mediaQueryLists, values, defaultValue]);\r\n\r\n  // State and setter for matched value\r\n  const [value, setValue] = useState(getValue);\r\n\r\n  useEffect(() => {\r\n    // Event listener callback\r\n    // Note: By defining getValue outside of useEffect we ensure that it has ...\r\n    // ... current values of hook args (as this hook callback is created once on mount).\r\n    const handler = () => setValue(getValue);\r\n    // Set a listener for each media query with above handler as callback.\r\n    mediaQueryLists.forEach(mql => mql.addListener(handler));\r\n    // Remove listeners on cleanup\r\n    return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\r\n  }, [getValue, mediaQueryLists]);\r\n\r\n  return value;\r\n}\r\n\r\nexport function useDarkMode() {\r\n  // See if user has set a browser or OS preference for dark mode.\r\n  const prefersDarkMode = useMedia(\r\n    ['(prefers-color-scheme: dark)'],\r\n    [true],\r\n    false\r\n  );\r\n\r\n  // Use our useLocalStorage hook to persist state through a page refresh\r\n  const [enabled, setEnabled] = useLocalStorage(\r\n    'dark-mode-enabled',\r\n    prefersDarkMode\r\n  );\r\n\r\n  // Fire off effect that add/removes dark mode class\r\n  useEffect(\r\n    () => {\r\n      const className = 'dark';\r\n      const element = window.document.body;\r\n      if (enabled) {\r\n        element.classList.add(className);\r\n      } else {\r\n        element.classList.remove(className);\r\n      }\r\n    },\r\n    [enabled] // Only re-call effect when value changes\r\n  );\r\n\r\n  // Return enabled state and setter\r\n  return [enabled, setEnabled];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}