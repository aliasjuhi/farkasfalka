{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Alias\\\\weboldal\\\\web-login\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Alias\\\\weboldal\\\\web-login\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Alias\\\\weboldal\\\\web-login\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Alias\\\\weboldal\\\\web-login\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) {\n    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nimport axios from \"axios\";\nimport FormData$1 from \"form-data\";\nimport { createMachine, assign, spawn, send, actions } from \"xstate\";\nvar HasuraStorageApi = /*#__PURE__*/function () {\n  function HasuraStorageApi(_ref) {\n    var url = _ref.url;\n    _classCallCheck(this, HasuraStorageApi);\n    this.url = url;\n    this.httpClient = axios.create({\n      baseURL: this.url\n    });\n  }\n  _createClass(HasuraStorageApi, [{\n    key: \"upload\",\n    value: function () {\n      var _upload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n        var formData, res;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                formData = params.formData;\n                _context.prev = 1;\n                _context.next = 4;\n                return this.httpClient.post(\"/files\", formData, {\n                  headers: __spreadProps(__spreadValues(__spreadValues({}, this.generateUploadHeaders(params)), this.generateAuthHeaders()), {\n                    \"Content-Type\": \"multipart/form-data\"\n                  })\n                });\n              case 4:\n                res = _context.sent;\n                return _context.abrupt(\"return\", {\n                  fileMetadata: res.data,\n                  error: null\n                });\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                return _context.abrupt(\"return\", {\n                  fileMetadata: null,\n                  error: _context.t0\n                });\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 8]]);\n      }));\n      function upload(_x) {\n        return _upload.apply(this, arguments);\n      }\n      return upload;\n    }()\n  }, {\n    key: \"getPresignedUrl\",\n    value: function () {\n      var _getPresignedUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n        var fileId, res;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                fileId = params.fileId;\n                _context2.next = 4;\n                return this.httpClient.get(\"/files/\".concat(fileId, \"/presignedurl\"), {\n                  headers: __spreadValues({}, this.generateAuthHeaders())\n                });\n              case 4:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  presignedUrl: res.data,\n                  error: null\n                });\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", {\n                  presignedUrl: null,\n                  error: _context2.t0\n                });\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n      function getPresignedUrl(_x2) {\n        return _getPresignedUrl.apply(this, arguments);\n      }\n      return getPresignedUrl;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {\n        var fileId;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                fileId = params.fileId;\n                _context3.next = 4;\n                return this.httpClient.delete(\"/files/\".concat(fileId), {\n                  headers: __spreadValues({}, this.generateAuthHeaders())\n                });\n              case 4:\n                return _context3.abrupt(\"return\", {\n                  error: null\n                });\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", {\n                  error: _context3.t0\n                });\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n      function _delete(_x3) {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }, {\n    key: \"setAccessToken\",\n    value: function setAccessToken(accessToken) {\n      this.accessToken = accessToken;\n      return this;\n    }\n  }, {\n    key: \"setAdminSecret\",\n    value: function setAdminSecret(adminSecret) {\n      this.adminSecret = adminSecret;\n      return this;\n    }\n  }, {\n    key: \"generateUploadHeaders\",\n    value: function generateUploadHeaders(params) {\n      var bucketId = params.bucketId,\n        name = params.name,\n        id = params.id;\n      var uploadheaders = {};\n      if (bucketId) {\n        uploadheaders[\"x-nhost-bucket-id\"] = bucketId;\n      }\n      if (id) {\n        uploadheaders[\"x-nhost-file-id\"] = id;\n      }\n      if (name) {\n        uploadheaders[\"x-nhost-file-name\"] = name;\n      }\n      return uploadheaders;\n    }\n  }, {\n    key: \"generateAuthHeaders\",\n    value: function generateAuthHeaders() {\n      if (!this.adminSecret && !this.accessToken) {\n        return null;\n      }\n      if (this.adminSecret) {\n        return {\n          \"x-hasura-admin-secret\": this.adminSecret\n        };\n      }\n      return {\n        Authorization: \"Bearer \".concat(this.accessToken)\n      };\n    }\n  }]);\n  return HasuraStorageApi;\n}();\nvar HasuraStorageClient = /*#__PURE__*/function () {\n  function HasuraStorageClient(_ref2) {\n    var url = _ref2.url,\n      adminSecret = _ref2.adminSecret;\n    _classCallCheck(this, HasuraStorageClient);\n    this.url = url;\n    this.api = new HasuraStorageApi({\n      url: url\n    });\n    this.setAdminSecret(adminSecret);\n  }\n  _createClass(HasuraStorageClient, [{\n    key: \"upload\",\n    value: function () {\n      var _upload2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(params) {\n        var formData, _yield$this$api$uploa, fileMetadata, error;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (\"file\" in params) {\n                  formData = new FormData$1();\n                  formData.append(\"file\", params.file);\n                } else {\n                  formData = params.formData;\n                }\n                _context4.next = 3;\n                return this.api.upload(__spreadProps(__spreadValues({}, params), {\n                  formData: formData\n                }));\n              case 3:\n                _yield$this$api$uploa = _context4.sent;\n                fileMetadata = _yield$this$api$uploa.fileMetadata;\n                error = _yield$this$api$uploa.error;\n                if (!error) {\n                  _context4.next = 8;\n                  break;\n                }\n                return _context4.abrupt(\"return\", {\n                  fileMetadata: null,\n                  error: error\n                });\n              case 8:\n                if (fileMetadata) {\n                  _context4.next = 10;\n                  break;\n                }\n                return _context4.abrupt(\"return\", {\n                  fileMetadata: null,\n                  error: new Error(\"Invalid file returned\")\n                });\n              case 10:\n                return _context4.abrupt(\"return\", {\n                  fileMetadata: fileMetadata,\n                  error: null\n                });\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function upload(_x4) {\n        return _upload2.apply(this, arguments);\n      }\n      return upload;\n    }()\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(params) {\n      return this.getPublicUrl(params);\n    }\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(params) {\n      var fileId = params.fileId;\n      return \"\".concat(this.url, \"/files/\").concat(fileId);\n    }\n  }, {\n    key: \"getPresignedUrl\",\n    value: function () {\n      var _getPresignedUrl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(params) {\n        var _yield$this$api$getPr, presignedUrl, error;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.api.getPresignedUrl(params);\n              case 2:\n                _yield$this$api$getPr = _context5.sent;\n                presignedUrl = _yield$this$api$getPr.presignedUrl;\n                error = _yield$this$api$getPr.error;\n                if (!error) {\n                  _context5.next = 7;\n                  break;\n                }\n                return _context5.abrupt(\"return\", {\n                  presignedUrl: null,\n                  error: error\n                });\n              case 7:\n                if (presignedUrl) {\n                  _context5.next = 9;\n                  break;\n                }\n                return _context5.abrupt(\"return\", {\n                  presignedUrl: null,\n                  error: new Error(\"Invalid file id\")\n                });\n              case 9:\n                return _context5.abrupt(\"return\", {\n                  presignedUrl: presignedUrl,\n                  error: null\n                });\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getPresignedUrl(_x5) {\n        return _getPresignedUrl2.apply(this, arguments);\n      }\n      return getPresignedUrl;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(params) {\n        var _yield$this$api$delet, error;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.api.delete(params);\n              case 2:\n                _yield$this$api$delet = _context6.sent;\n                error = _yield$this$api$delet.error;\n                if (!error) {\n                  _context6.next = 6;\n                  break;\n                }\n                return _context6.abrupt(\"return\", {\n                  error: error\n                });\n              case 6:\n                return _context6.abrupt(\"return\", {\n                  error: null\n                });\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function _delete(_x6) {\n        return _delete3.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }, {\n    key: \"setAccessToken\",\n    value: function setAccessToken(accessToken) {\n      this.api.setAccessToken(accessToken);\n      return this;\n    }\n  }, {\n    key: \"setAdminSecret\",\n    value: function setAdminSecret(adminSecret) {\n      this.api.setAdminSecret(adminSecret);\n      return this;\n    }\n  }]);\n  return HasuraStorageClient;\n}();\nvar INITIAL_FILE_CONTEXT = {\n  progress: null,\n  loaded: 0,\n  error: null\n};\nvar createFileUploadMachine = function createFileUploadMachine() {\n  return createMachine({\n    preserveActionOrder: true,\n    schema: {\n      context: {},\n      events: {}\n    },\n    tsTypes: {},\n    context: __spreadValues({}, INITIAL_FILE_CONTEXT),\n    initial: \"idle\",\n    on: {\n      DESTROY: {\n        actions: \"sendDestroy\",\n        target: \"stopped\"\n      }\n    },\n    states: {\n      idle: {\n        on: {\n          ADD: {\n            actions: \"addFile\"\n          },\n          UPLOAD: {\n            cond: \"hasFile\",\n            target: \"uploading\"\n          }\n        }\n      },\n      uploading: {\n        entry: \"resetProgress\",\n        on: {\n          UPLOAD_PROGRESS: {\n            actions: [\"incrementProgress\", \"sendProgress\"]\n          },\n          UPLOAD_DONE: \"uploaded\",\n          UPLOAD_ERROR: \"error\",\n          CANCEL: \"idle\"\n        },\n        invoke: {\n          src: \"uploadFile\"\n        }\n      },\n      uploaded: {\n        entry: [\"setFileMetadata\", \"sendDone\"]\n      },\n      error: {\n        entry: [\"setError\", \"sendError\"]\n      },\n      stopped: {\n        type: \"final\"\n      }\n    }\n  }, {\n    guards: {\n      hasFile: function hasFile(context, event) {\n        return !!context.file || !!event.file;\n      }\n    },\n    actions: {\n      incrementProgress: assign({\n        loaded: function loaded(_, _ref3) {\n          var _loaded = _ref3.loaded;\n          return _loaded;\n        },\n        progress: function progress(_, _ref4) {\n          var _progress = _ref4.progress;\n          return _progress;\n        }\n      }),\n      setFileMetadata: assign({\n        id: function id(_, _ref5) {\n          var _id = _ref5.id;\n          return _id;\n        },\n        bucketId: function bucketId(_, _ref6) {\n          var _bucketId = _ref6.bucketId;\n          return _bucketId;\n        },\n        progress: function progress(_) {\n          return 100;\n        }\n      }),\n      setError: assign({\n        error: function error(_, _ref7) {\n          var _error = _ref7.error;\n          return _error;\n        }\n      }),\n      sendProgress: function sendProgress() {},\n      sendError: function sendError() {},\n      sendDestroy: function sendDestroy() {},\n      sendDone: function sendDone() {},\n      resetProgress: assign({\n        progress: function progress(_) {\n          return null;\n        },\n        loaded: function loaded(_) {\n          return 0;\n        }\n      }),\n      addFile: assign({\n        file: function file(_, _ref8) {\n          var _file = _ref8.file;\n          return _file;\n        },\n        bucketId: function bucketId(_, _ref9) {\n          var _bucketId2 = _ref9.bucketId;\n          return _bucketId2;\n        },\n        id: function id(_, _ref10) {\n          var _id2 = _ref10.id;\n          return _id2;\n        }\n      })\n    },\n    services: {\n      uploadFile: function uploadFile(context, event) {\n        return function (callback) {\n          var headers = {\n            \"Content-Type\": \"multipart/form-data\"\n          };\n          var fileId = event.id || context.id;\n          if (fileId) {\n            headers[\"x-nhost-file-id\"] = fileId;\n          }\n          var bucketId = event.bucketId || context.bucketId;\n          if (bucketId) {\n            headers[\"x-nhost-bucket-id\"] = bucketId;\n          }\n          var file = event.file || context.file;\n          headers[\"x-nhost-file-name\"] = event.name || file.name;\n          var data = new FormData();\n          data.append(\"file\", file);\n          if (event.adminSecret) {\n            headers[\"x-hasura-admin-secret\"] = event.adminSecret;\n          }\n          if (event.accessToken) {\n            headers[\"Authorization\"] = \"Bearer \".concat(event.accessToken);\n          }\n          var currentLoaded = 0;\n          var controller = new AbortController();\n          axios.post(event.url + \"/files\", data, {\n            headers: headers,\n            signal: controller.signal,\n            onUploadProgress: function onUploadProgress(event2) {\n              var loaded = Math.round(event2.loaded * file.size / event2.total);\n              var additions = loaded - currentLoaded;\n              currentLoaded = loaded;\n              callback({\n                type: \"UPLOAD_PROGRESS\",\n                progress: Math.round(loaded * 100 / event2.total),\n                loaded: loaded,\n                additions: additions\n              });\n            }\n          }).then(function (_ref11) {\n            var _ref11$data = _ref11.data,\n              id = _ref11$data.id,\n              bucketId2 = _ref11$data.bucketId;\n            callback({\n              type: \"UPLOAD_DONE\",\n              id: id,\n              bucketId: bucketId2\n            });\n          }).catch(function (_ref12) {\n            var response = _ref12.response,\n              message = _ref12.message;\n            var _a, _b, _c, _d, _e;\n            callback({\n              type: \"UPLOAD_ERROR\",\n              error: {\n                status: (_a = response == null ? void 0 : response.status) != null ? _a : 0,\n                message: ((_c = (_b = response == null ? void 0 : response.data) == null ? void 0 : _b.error) == null ? void 0 : _c.message) || message,\n                error: ((_e = (_d = response == null ? void 0 : response.data) == null ? void 0 : _d.error) == null ? void 0 : _e.message) || message\n              }\n            });\n          });\n          return function () {\n            controller.abort();\n          };\n        };\n      }\n    }\n  });\n};\nvar pure = actions.pure,\n  sendParent = actions.sendParent;\nvar createMultipleFilesUploadMachine = function createMultipleFilesUploadMachine() {\n  return createMachine({\n    id: \"files-list\",\n    schema: {\n      context: {},\n      events: {}\n    },\n    tsTypes: {},\n    context: {\n      progress: null,\n      files: [],\n      loaded: 0,\n      total: 0\n    },\n    initial: \"idle\",\n    on: {\n      UPLOAD: {\n        cond: \"hasFileToDownload\",\n        actions: \"addItem\",\n        target: \"uploading\"\n      },\n      ADD: {\n        actions: \"addItem\"\n      },\n      REMOVE: {\n        actions: \"removeItem\"\n      }\n    },\n    states: {\n      idle: {\n        entry: [\"resetProgress\", \"resetLoaded\", \"resetTotal\"],\n        on: {\n          CLEAR: {\n            actions: \"clearList\",\n            target: \"idle\"\n          }\n        }\n      },\n      uploading: {\n        entry: [\"upload\", \"startProgress\", \"resetLoaded\", \"resetTotal\"],\n        on: {\n          UPLOAD_PROGRESS: {\n            actions: [\"incrementProgress\"]\n          },\n          UPLOAD_DONE: [{\n            cond: \"isAllUploaded\",\n            target: \"uploaded\"\n          }, {\n            cond: \"isAllUploadedOrError\",\n            target: \"error\"\n          }],\n          UPLOAD_ERROR: [{\n            cond: \"isAllUploaded\",\n            target: \"uploaded\"\n          }, {\n            cond: \"isAllUploadedOrError\",\n            target: \"error\"\n          }],\n          CANCEL: {\n            actions: \"cancel\",\n            target: \"idle\"\n          }\n        }\n      },\n      uploaded: {\n        entry: \"setUploaded\",\n        on: {\n          CLEAR: {\n            actions: \"clearList\",\n            target: \"idle\"\n          }\n        }\n      },\n      error: {\n        on: {\n          CLEAR: {\n            actions: \"clearList\",\n            target: \"idle\"\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      hasFileToDownload: function hasFileToDownload(context, event) {\n        return context.files.some(function (ref) {\n          return ref.getSnapshot().matches(\"idle\");\n        }) || !!event.files;\n      },\n      isAllUploaded: function isAllUploaded(context) {\n        return context.files.every(function (item) {\n          var _a;\n          return (_a = item.getSnapshot()) == null ? void 0 : _a.matches(\"uploaded\");\n        });\n      },\n      isAllUploadedOrError: function isAllUploadedOrError(context) {\n        return context.files.every(function (item) {\n          var snap = item.getSnapshot();\n          return (snap == null ? void 0 : snap.matches(\"error\")) || (snap == null ? void 0 : snap.matches(\"uploaded\"));\n        });\n      }\n    },\n    actions: {\n      incrementProgress: assign(function (context, event) {\n        var loaded = context.loaded + event.additions;\n        var progress = Math.round(loaded * 100 / context.total);\n        return __spreadProps(__spreadValues({}, context), {\n          loaded: loaded,\n          progress: progress\n        });\n      }),\n      setUploaded: assign({\n        progress: function progress(_) {\n          return 100;\n        },\n        loaded: function loaded(_ref13) {\n          var files = _ref13.files;\n          return files.map(function (ref) {\n            return ref.getSnapshot();\n          }).filter(function (snap) {\n            return snap.matches(\"uploaded\");\n          }).reduce(function (agg, curr) {\n            var _a;\n            return agg + ((_a = curr.context.file) == null ? void 0 : _a.size);\n          }, 0);\n        }\n      }),\n      resetTotal: assign({\n        total: function total(_ref14) {\n          var files = _ref14.files;\n          return files.map(function (ref) {\n            return ref.getSnapshot();\n          }).filter(function (snap) {\n            return !snap.matches(\"uploaded\");\n          }).reduce(function (agg, curr) {\n            var _a;\n            return agg + ((_a = curr.context.file) == null ? void 0 : _a.size);\n          }, 0);\n        }\n      }),\n      resetLoaded: assign({\n        loaded: function loaded(_) {\n          return 0;\n        }\n      }),\n      startProgress: assign({\n        progress: function progress(_) {\n          return 0;\n        }\n      }),\n      resetProgress: assign({\n        progress: function progress(_) {\n          return null;\n        }\n      }),\n      addItem: assign(function (context, _ref15) {\n        var files = _ref15.files,\n          bucketId = _ref15.bucketId;\n        var additions = files ? Array.isArray(files) ? files : \"length\" in files ? Array.from(files) : [files] : [];\n        var total = context.total + additions.reduce(function (agg, curr) {\n          return agg + curr.size;\n        }, 0);\n        var progress = Math.round(context.loaded * 100 / total);\n        return {\n          files: [].concat(_toConsumableArray(context.files), _toConsumableArray(additions.map(function (file) {\n            return spawn(createFileUploadMachine().withConfig({\n              actions: {\n                sendProgress: sendParent(function (_, _ref16) {\n                  var additions2 = _ref16.additions;\n                  return {\n                    type: \"UPLOAD_PROGRESS\",\n                    additions: additions2\n                  };\n                }),\n                sendDone: sendParent(\"UPLOAD_DONE\"),\n                sendError: sendParent(\"UPLOAD_ERROR\"),\n                sendDestroy: sendParent(\"REMOVE\")\n              }\n            }).withContext(__spreadProps(__spreadValues({}, INITIAL_FILE_CONTEXT), {\n              file: file,\n              bucketId: bucketId\n            })), {\n              sync: true\n            });\n          }))),\n          total: total,\n          loaded: context.loaded,\n          progress: progress\n        };\n      }),\n      removeItem: assign({\n        files: function files(context) {\n          return context.files.filter(function (ref) {\n            var _a, _b;\n            var stopped = (_a = ref.getSnapshot()) == null ? void 0 : _a.matches(\"stopped\");\n            if (stopped) {\n              (_b = ref.stop) == null ? void 0 : _b.call(ref);\n            }\n            return !stopped;\n          });\n        }\n      }),\n      clearList: pure(function (context) {\n        return context.files.map(function (ref) {\n          return send({\n            type: \"DESTROY\"\n          }, {\n            to: ref.id\n          });\n        });\n      }),\n      upload: pure(function (context, event) {\n        return context.files.map(function (ref) {\n          return send(event, {\n            to: ref.id\n          });\n        });\n      }),\n      cancel: pure(function (context) {\n        return context.files.map(function (ref) {\n          return send({\n            type: \"CANCEL\"\n          }, {\n            to: ref.id\n          });\n        });\n      })\n    }\n  });\n};\nvar uploadFilePromise = /*#__PURE__*/function () {\n  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(nhost, interpreter, params) {\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            return _context7.abrupt(\"return\", new Promise(function (resolve) {\n              interpreter.send(__spreadValues({\n                type: \"UPLOAD\",\n                url: nhost.storage.url,\n                accessToken: nhost.auth.getAccessToken(),\n                adminSecret: nhost.adminSecret\n              }, params));\n              interpreter.subscribe(function (s) {\n                var _a;\n                if (s.matches(\"error\")) {\n                  resolve({\n                    error: s.context.error,\n                    isError: true,\n                    isUploaded: false\n                  });\n                } else if (s.matches(\"uploaded\")) {\n                  resolve({\n                    error: null,\n                    isError: false,\n                    isUploaded: true,\n                    id: s.context.id,\n                    bucketId: s.context.id,\n                    name: (_a = s.context.file) == null ? void 0 : _a.name\n                  });\n                }\n              });\n            }));\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return function uploadFilePromise(_x7, _x8, _x9) {\n    return _ref17.apply(this, arguments);\n  };\n}();\nvar uploadMultipleFilesPromise = /*#__PURE__*/function () {\n  var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(nhost, service, params) {\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", new Promise(function (resolve) {\n              service.send({\n                type: \"UPLOAD\",\n                url: nhost.storage.url,\n                accessToken: nhost.auth.getAccessToken(),\n                adminSecret: nhost.adminSecret,\n                bucketId: params == null ? void 0 : params.bucketId,\n                files: params == null ? void 0 : params.files\n              });\n              service.onTransition(function (s) {\n                if (s.matches(\"error\")) {\n                  resolve({\n                    errors: s.context.files.filter(function (ref) {\n                      var _a;\n                      return (_a = ref.getSnapshot()) == null ? void 0 : _a.context.error;\n                    }),\n                    isError: true,\n                    files: []\n                  });\n                } else if (s.matches(\"uploaded\")) {\n                  resolve({\n                    errors: [],\n                    isError: false,\n                    files: s.context.files\n                  });\n                }\n              });\n            }));\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return function uploadMultipleFilesPromise(_x10, _x11, _x12) {\n    return _ref18.apply(this, arguments);\n  };\n}();\nexport { HasuraStorageApi, HasuraStorageClient, INITIAL_FILE_CONTEXT, createFileUploadMachine, createMultipleFilesUploadMachine, uploadFilePromise, uploadMultipleFilesPromise };","map":null,"metadata":{},"sourceType":"module"}