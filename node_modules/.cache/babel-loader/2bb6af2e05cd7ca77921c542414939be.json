{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nimport { HasuraAuthClient } from \"@nhost/hasura-auth-js\";\nimport { HasuraStorageClient } from \"@nhost/hasura-storage-js\";\nimport axios from \"axios\";\nimport { print } from \"graphql\";\nclass NhostFunctionsClient {\n  constructor(params) {\n    const {\n      url,\n      adminSecret\n    } = params;\n    this.accessToken = null;\n    this.adminSecret = adminSecret;\n    this.instance = axios.create({\n      baseURL: url\n    });\n  }\n  async call(url, data, config) {\n    const headers = __spreadValues(__spreadValues({}, this.generateAccessTokenHeaders()), config == null ? void 0 : config.headers);\n    let res;\n    try {\n      res = await this.instance.post(url, data, __spreadProps(__spreadValues({}, config), {\n        headers\n      }));\n    } catch (error) {\n      if (error instanceof Error) {\n        return {\n          res: null,\n          error\n        };\n      }\n    }\n    if (!res) {\n      return {\n        res: null,\n        error: new Error(\"Unable to make post request to funtion\")\n      };\n    }\n    return {\n      res,\n      error: null\n    };\n  }\n  setAccessToken(accessToken) {\n    if (!accessToken) {\n      this.accessToken = null;\n      return;\n    }\n    this.accessToken = accessToken;\n  }\n  generateAccessTokenHeaders() {\n    if (this.adminSecret) {\n      return {\n        \"x-hasura-admin-secret\": this.adminSecret\n      };\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      };\n    }\n    return {};\n  }\n}\nclass NhostGraphqlClient {\n  constructor(params) {\n    const {\n      url,\n      adminSecret\n    } = params;\n    this.url = url;\n    this.accessToken = null;\n    this.adminSecret = adminSecret;\n    this.instance = axios.create({\n      baseURL: url\n    });\n  }\n  async request(document, variables, config) {\n    const headers = __spreadValues(__spreadValues({}, this.generateAccessTokenHeaders()), config == null ? void 0 : config.headers);\n    try {\n      const operationName = \"\";\n      const res = await this.instance.post(\"\", {\n        operationName: operationName || void 0,\n        query: typeof document === \"string\" ? document : print(document),\n        variables\n      }, __spreadProps(__spreadValues({}, config), {\n        headers\n      }));\n      const responseData = res.data;\n      const {\n        data\n      } = responseData;\n      if (responseData.errors) {\n        return {\n          data: null,\n          error: responseData.errors\n        };\n      }\n      if (typeof data !== \"object\" || Array.isArray(data) || data === null) {\n        return {\n          data: null,\n          error: new Error(\"incorrect response data from GraphQL server\")\n        };\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        return {\n          data: null,\n          error\n        };\n      }\n      console.error(error);\n      return {\n        data: null,\n        error: new Error(\"Unable to get do GraphQL request\")\n      };\n    }\n  }\n  getUrl() {\n    return this.url;\n  }\n  setAccessToken(accessToken) {\n    if (!accessToken) {\n      this.accessToken = null;\n      return;\n    }\n    this.accessToken = accessToken;\n  }\n  generateAccessTokenHeaders() {\n    if (this.adminSecret) {\n      return {\n        \"x-hasura-admin-secret\": this.adminSecret\n      };\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      };\n    }\n    return {};\n  }\n}\nconst LOCALHOST_REGEX = /^localhost(:\\d+)*$/g;\nfunction urlFromParams(backendOrSubdomain, service) {\n  const {\n    backendUrl,\n    subdomain,\n    region\n  } = backendOrSubdomain;\n  if (!backendUrl && !subdomain) {\n    throw new Error(\"Either `backendUrl` or `subdomain` must be set.\");\n  }\n  if (backendUrl) {\n    return `${backendUrl}/v1/${service}`;\n  }\n  if (!subdomain) {\n    throw new Error(\"`subdomain` must be set if `backendUrl` is not set.\");\n  }\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX);\n  if (subdomainLocalhostFound && subdomainLocalhostFound.length > 0) {\n    const localhostFound = subdomainLocalhostFound[0];\n    if (localhostFound === \"localhost\") {\n      return `http://localhost:1337/v1/${service}`;\n    }\n    return `http://${localhostFound}/v1/${service}`;\n  }\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"localhost\".');\n  }\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`;\n}\nclass NhostClient {\n  constructor(_a) {\n    var _b = _a,\n      {\n        refreshIntervalTime,\n        clientStorageGetter,\n        clientStorageSetter,\n        clientStorage,\n        clientStorageType,\n        autoRefreshToken,\n        autoSignIn,\n        adminSecret,\n        devTools,\n        start = true\n      } = _b,\n      urlParams = __objRest(_b, [\"refreshIntervalTime\", \"clientStorageGetter\", \"clientStorageSetter\", \"clientStorage\", \"clientStorageType\", \"autoRefreshToken\", \"autoSignIn\", \"adminSecret\", \"devTools\", \"start\"]);\n    var _a2;\n    this.auth = new HasuraAuthClient({\n      url: urlFromParams(urlParams, \"auth\"),\n      refreshIntervalTime,\n      clientStorageGetter,\n      clientStorageSetter,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start\n    });\n    this.storage = new HasuraStorageClient({\n      url: urlFromParams(urlParams, \"storage\"),\n      adminSecret\n    });\n    this.functions = new NhostFunctionsClient({\n      url: urlFromParams(urlParams, \"functions\"),\n      adminSecret\n    });\n    this.graphql = new NhostGraphqlClient({\n      url: urlFromParams(urlParams, \"graphql\"),\n      adminSecret\n    });\n    this.storage.setAccessToken(this.auth.getAccessToken());\n    this.functions.setAccessToken(this.auth.getAccessToken());\n    this.graphql.setAccessToken(this.auth.getAccessToken());\n    (_a2 = this.auth.client) == null ? void 0 : _a2.onStart(() => {\n      this.auth.onAuthStateChanged((_event, session) => {\n        if (_event === \"SIGNED_OUT\") {\n          this.storage.setAccessToken(void 0);\n          this.functions.setAccessToken(void 0);\n          this.graphql.setAccessToken(void 0);\n        }\n      });\n      this.auth.onTokenChanged(session => {\n        this.storage.setAccessToken(session == null ? void 0 : session.accessToken);\n        this.functions.setAccessToken(session == null ? void 0 : session.accessToken);\n        this.graphql.setAccessToken(session == null ? void 0 : session.accessToken);\n      });\n    });\n    this._adminSecret = adminSecret;\n    this.devTools = devTools;\n  }\n  get adminSecret() {\n    return this._adminSecret;\n  }\n  set adminSecret(newValue) {\n    this._adminSecret = newValue;\n    this.storage.setAdminSecret(newValue);\n  }\n}\nconst createClient = config => new NhostClient(config);\nexport { NhostClient, NhostFunctionsClient, NhostGraphqlClient, createClient };","map":{"version":3,"mappings":"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","names":["NhostFunctionsClient","constructor","params","url","adminSecret","accessToken","axios","create","baseURL","call","data","config","headers","__spreadValues","generateAccessTokenHeaders","res","instance","post","__spreadProps","error","Error","setAccessToken","Authorization","NhostGraphqlClient","request","document","variables","operationName","query","print","responseData","errors","Array","isArray","console","getUrl","LOCALHOST_REGEX","backendOrSubdomain","service","backendUrl","subdomain","region","match","subdomainLocalhostFound","length","localhostFound","NhostClient","_a","refreshIntervalTime","clientStorageGetter","clientStorageSetter","clientStorage","clientStorageType","autoRefreshToken","autoSignIn","devTools","start","_b","urlParams","HasuraAuthClient","urlFromParams","HasuraStorageClient","storage","auth","getAccessToken","functions","graphql","client","onStart","onAuthStateChanged","_event","session","onTokenChanged","_adminSecret","newValue","setAdminSecret","createClient"],"sources":["C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\nhost-js\\src\\clients\\functions.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\nhost-js\\src\\clients\\graphql.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\nhost-js\\src\\utils\\helpers.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\nhost-js\\src\\core\\nhost-client.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\nhost-js\\src\\index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders, AxiosResponse } from 'axios'\n\nimport { FunctionCallResponse } from '../utils/types'\nexport interface NhostFunctionsConstructorParams {\n  /**\n   * Serverless Functions endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * @alias Functions\n */\nexport class NhostFunctionsClient {\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostFunctionsConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function.\n   *\n   * @example\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call<T = unknown, D = any>(\n    url: string,\n    data: D,\n    config?: AxiosRequestConfig\n  ): Promise<FunctionCallResponse<T>> {\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers\n    }\n\n    let res\n    try {\n      res = await this.instance.post<T, AxiosResponse<T>, D>(url, data, { ...config, headers })\n    } catch (error) {\n      if (error instanceof Error) {\n        return { res: null, error }\n      }\n    }\n\n    if (!res) {\n      return {\n        res: null,\n        error: new Error('Unable to make post request to funtion')\n      }\n    }\n\n    return { res, error: null }\n  }\n\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): AxiosRequestHeaders {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import axios, { AxiosInstance, AxiosRequestConfig, AxiosRequestHeaders } from 'axios'\nimport { DocumentNode, print } from 'graphql'\n\nimport { GraphqlRequestResponse, GraphqlResponse } from '../utils/types'\n\nexport interface NhostGraphqlConstructorParams {\n  /**\n   * GraphQL endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n\n/**\n * @alias GraphQL\n */\nexport class NhostGraphqlClient {\n  private url: string\n  private instance: AxiosInstance\n  private accessToken: string | null\n  private adminSecret?: string\n\n  constructor(params: NhostGraphqlConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n    this.instance = axios.create({\n      baseURL: url\n    })\n  }\n\n  /**\n   * Use `nhost.graphql.request` to send a GraphQL request. For more serious GraphQL usage we recommend using a GraphQL client such as Apollo Client (https://www.apollographql.com/docs/react).\n   *\n   * @example\n   * ```ts\n   * const CUSTOMERS = gql`\n   *  query {\n   *   customers {\n   *    id\n   *    name\n   *  }\n   * }\n   * `\n   * const { data, error } = await nhost.graphql.request(CUSTOMERS)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/request\n   */\n  async request<T = any, V = any>(\n    document: string | DocumentNode,\n    variables?: V,\n    config?: AxiosRequestConfig\n  ): Promise<GraphqlRequestResponse<T>> {\n    // add auth headers if any\n    const headers = {\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers\n    }\n\n    try {\n      const operationName = ''\n      const res = await this.instance.post<GraphqlResponse<T>>(\n        '',\n        {\n          operationName: operationName || undefined,\n          query: typeof document === 'string' ? document : print(document),\n          variables\n        },\n        { ...config, headers }\n      )\n\n      const responseData = res.data\n      const { data } = responseData\n\n      if (responseData.errors) {\n        return {\n          data: null,\n          error: responseData.errors\n        }\n      }\n\n      if (typeof data !== 'object' || Array.isArray(data) || data === null) {\n        return {\n          data: null,\n          error: new Error('incorrect response data from GraphQL server')\n        }\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (error instanceof Error) {\n        return { data: null, error }\n      }\n      console.error(error)\n      return {\n        data: null,\n        error: new Error('Unable to get do GraphQL request')\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.getUrl` to get the GraphQL URL.\n   *\n   * @example\n   * ```ts\n   * const url = nhost.graphql.getUrl();\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/get-url\n   */\n  getUrl(): string {\n    return this.url\n  }\n\n  /**\n   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/graphql/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  private generateAccessTokenHeaders(): AxiosRequestHeaders {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import { NhostClientConstructorParams } from './types'\n\nconst LOCALHOST_REGEX = /^localhost(:\\d+)*$/g\n\n/**\n * `backendUrl` should now be used only when self-hosting\n * `subdomain` and `region` should be used instead when using the Nhost platform\n * `\n * @param backendOrSubdomain\n * @param service\n * @returns\n */\nexport function urlFromParams(\n  backendOrSubdomain: Pick<NhostClientConstructorParams, 'region' | 'subdomain' | 'backendUrl'>,\n  service: string\n) {\n  const { backendUrl, subdomain, region } = backendOrSubdomain\n\n  if (!backendUrl && !subdomain) {\n    throw new Error('Either `backendUrl` or `subdomain` must be set.')\n  }\n\n  if (backendUrl) {\n    return `${backendUrl}/v1/${service}`\n  }\n\n  // to make TS happy\n  if (!subdomain) {\n    throw new Error('`subdomain` must be set if `backendUrl` is not set.')\n  }\n\n  // check if subdomain is localhost[:port]\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX)\n  if (subdomainLocalhostFound && subdomainLocalhostFound.length > 0) {\n    const localhostFound = subdomainLocalhostFound[0]\n\n    // no port specified, use standard port 1337\n    if (localhostFound === 'localhost') {\n      return `http://localhost:1337/v1/${service}`\n    }\n\n    // port specified\n    return `http://${localhostFound}/v1/${service}`\n  }\n\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"localhost\".')\n  }\n\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\nimport { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { NhostFunctionsClient } from '../clients/functions'\nimport { NhostGraphqlClient } from '../clients/graphql'\nimport { urlFromParams } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\nexport class NhostClient {\n  auth: HasuraAuthClient\n  storage: HasuraStorageClient\n  functions: NhostFunctionsClient\n  graphql: NhostGraphqlClient\n  private _adminSecret?: string\n  readonly devTools?: boolean\n\n  /**\n   * Nhost Client\n   *\n   * @example\n   * ```ts\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime,\n    clientStorageGetter,\n    clientStorageSetter,\n    clientStorage,\n    clientStorageType,\n    autoRefreshToken,\n    autoSignIn,\n    adminSecret,\n    devTools,\n    start = true,\n    ...urlParams\n  }: NhostClientConstructorParams) {\n    this.auth = new HasuraAuthClient({\n      url: urlFromParams(urlParams, 'auth'),\n      refreshIntervalTime,\n      clientStorageGetter,\n      clientStorageSetter,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start\n    })\n\n    this.storage = new HasuraStorageClient({\n      url: urlFromParams(urlParams, 'storage'),\n      adminSecret\n    })\n\n    this.functions = new NhostFunctionsClient({\n      url: urlFromParams(urlParams, 'functions'),\n      adminSecret\n    })\n\n    this.graphql = new NhostGraphqlClient({\n      url: urlFromParams(urlParams, 'graphql'),\n      adminSecret\n    })\n\n    // * Set current token if token is already accessable\n    this.storage.setAccessToken(this.auth.getAccessToken())\n    this.functions.setAccessToken(this.auth.getAccessToken())\n    this.graphql.setAccessToken(this.auth.getAccessToken())\n\n    this.auth.client?.onStart(() => {\n      // * Set access token when signing out\n      this.auth.onAuthStateChanged((_event, session) => {\n        if (_event === 'SIGNED_OUT') {\n          this.storage.setAccessToken(undefined)\n          this.functions.setAccessToken(undefined)\n          this.graphql.setAccessToken(undefined)\n        }\n      })\n\n      // * Update access token for clients, including when signin in\n      this.auth.onTokenChanged((session) => {\n        this.storage.setAccessToken(session?.accessToken)\n        this.functions.setAccessToken(session?.accessToken)\n        this.graphql.setAccessToken(session?.accessToken)\n      })\n    })\n    this._adminSecret = adminSecret\n    this.devTools = devTools\n  }\n\n  get adminSecret(): string | undefined {\n    return this._adminSecret\n  }\n\n  set adminSecret(newValue: string | undefined) {\n    this._adminSecret = newValue\n    this.storage.setAdminSecret(newValue)\n    // TODO inconsistent API: storage can change admin secret, but functions/graphql cannot\n    // this.functions.setAdminSecret(newValue)\n    // this.graphql.setAdminSecret(newValue)\n  }\n}\n","import { NhostClientConstructorParams } from './utils/types'\nimport { NhostClient } from './core'\n\nconst createClient = (config: NhostClientConstructorParams) => new NhostClient(config)\n\nexport * from './clients'\nexport * from './core'\nexport * from './utils/types'\nexport { createClient }\n"]},"metadata":{},"sourceType":"module"}