{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Alias/weboldal/web-login/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) {\n    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return a;\n};\nvar __spreadProps = function __spreadProps(a, b) {\n  return __defProps(a, __getOwnPropDescs(b));\n};\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n  for (var prop in source) {\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  }\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return target;\n};\nimport { NhostClient as NhostClient$1 } from \"@nhost/nhost-js\";\nimport produce from \"immer\";\nimport React, { createContext, useRef, useEffect, useContext, useState, useMemo, useCallback } from \"react\";\nimport { useInterpret, useSelector } from \"@xstate/react\";\nimport { addSecurityKeyPromise, createChangeEmailMachine, changeEmailPromise, createChangePasswordMachine, changePasswordPromise, createEnableMfaMachine, generateQrCodePromise, activateMfaPromise, encodeQueryParameters, rewriteRedirectTo, createResetPasswordMachine, resetPasswordPromise, createSendVerificationEmailMachine, sendVerificationEmailPromise, signInAnonymousPromise, signInEmailPasswordPromise, signInMfaTotpPromise, signInEmailPasswordlessPromise, signInEmailSecurityKeyPromise, signInSmsPasswordlessPromise, signInSmsPasswordlessOtpPromise, signOutPromise, signUpEmailPasswordPromise, signUpEmailSecurityKeyPromise } from \"@nhost/core\";\nimport jwt_decode from \"jwt-decode\";\nimport { createFileUploadMachine, uploadFilePromise, createMultipleFilesUploadMachine, uploadMultipleFilesPromise } from \"@nhost/hasura-storage-js\";\nvar NhostClient = /*#__PURE__*/function (_NhostClient$) {\n  _inherits(NhostClient, _NhostClient$);\n  var _super = _createSuper(NhostClient);\n  function NhostClient(params) {\n    _classCallCheck(this, NhostClient);\n    return _super.call(this, __spreadProps(__spreadValues({}, params), {\n      start: false\n    }));\n  }\n  return _createClass(NhostClient);\n}(NhostClient$1);\nvar NhostReactContext = createContext({});\nvar NhostReactProvider = function NhostReactProvider(_a) {\n  var _b = _a,\n    nhost = _b.nhost,\n    initial = _b.initial,\n    props = __objRest(_b, [\"nhost\", \"initial\"]);\n  var machine = nhost.auth.client.machine;\n  var interpreter = useInterpret(machine, {\n    devTools: nhost.devTools,\n    context: produce(machine.context, function (ctx) {\n      var _a2, _b2;\n      if (initial) {\n        ctx.user = initial.user;\n        ctx.refreshToken.value = (_a2 = initial.refreshToken) != null ? _a2 : null;\n        ctx.accessToken.value = (_b2 = initial.accessToken) != null ? _b2 : null;\n        ctx.accessToken.expiresAt = new Date(Date.now() + initial.accessTokenExpiresIn * 1e3);\n      }\n    })\n  }).start();\n  var isInitialMount = useRef(true);\n  useEffect(function () {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      if (initial) {\n        interpreter.send(\"SESSION_UPDATE\", {\n          data: {\n            session: initial\n          }\n        });\n      }\n    }\n  }, [initial, interpreter]);\n  nhost.auth.client.interpreter = interpreter;\n  return /* @__PURE__ */React.createElement(NhostReactContext.Provider, {\n    value: nhost\n  }, props.children);\n};\nvar useAuthInterpreter = function useAuthInterpreter() {\n  var _a;\n  var nhost = useContext(NhostReactContext);\n  var interpreter = (_a = nhost.auth) == null ? void 0 : _a.client.interpreter;\n  if (!interpreter) throw Error(\"No interpreter\");\n  return interpreter;\n};\nvar useAccessToken = function useAccessToken() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    return state.context.accessToken.value;\n  });\n};\nvar useNhostClient = function useNhostClient() {\n  var nhost = useContext(NhostReactContext);\n  return nhost;\n};\nvar useAddSecurityKey = function useAddSecurityKey() {\n  var nhost = useNhostClient();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    error = _useState2[0],\n    setError = _useState2[1];\n  var isSuccess = !error;\n  var isError = !!error;\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var add = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(nickname) {\n      var result, error2;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsLoading(true);\n              _context.next = 3;\n              return addSecurityKeyPromise(nhost.auth.client, nickname);\n            case 3:\n              result = _context.sent;\n              error2 = result.error;\n              if (error2) {\n                setError(error2);\n              }\n              setIsLoading(false);\n              return _context.abrupt(\"return\", result);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function add(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return {\n    add: add,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    isError: isError,\n    error: error\n  };\n};\nvar useAuthenticated = function useAuthenticated() {\n  var service = useAuthInterpreter();\n  var _useState5 = useState(!!service.status && service.state.matches({\n      authentication: \"signedIn\"\n    })),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isAuthenticated = _useState6[0],\n    setIsAuthenticated = _useState6[1];\n  useEffect(function () {\n    var subscription = service.subscribe(function (state) {\n      var newValue = state.matches({\n        authentication: \"signedIn\"\n      });\n      setIsAuthenticated(newValue);\n    });\n    return subscription.unsubscribe;\n  }, [service]);\n  return isAuthenticated;\n};\nvar useAuthenticationStatus = function useAuthenticationStatus() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    return {\n      isAuthenticated: state.matches({\n        authentication: \"signedIn\"\n      }),\n      isLoading: state.hasTag(\"loading\"),\n      error: state.context.errors.authentication || null,\n      isError: state.matches({\n        authentication: {\n          signedOut: \"failed\"\n        }\n      })\n    };\n  }, function (a, b) {\n    return a.isAuthenticated === b.isAuthenticated && a.isLoading === b.isLoading;\n  });\n};\nvar useAuthLoading = function useAuthLoading() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    return state.hasTag(\"loading\");\n  });\n};\nfunction useChangeEmail(a, b) {\n  var stateEmail = useMemo(function () {\n    return typeof a === \"string\" ? a : void 0;\n  }, [a]);\n  var stateOptions = useMemo(function () {\n    return typeof a !== \"string\" ? a : b;\n  }, [a, b]);\n  var nhost = useNhostClient();\n  var machine = useMemo(function () {\n    return createChangeEmailMachine(nhost.auth.client);\n  }, [nhost]);\n  var service = useInterpret(machine);\n  var isLoading = useSelector(service, function (s) {\n    return s.matches(\"requesting\");\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.error;\n  });\n  var isError = useSelector(service, function (state) {\n    return state.matches(\"idle.error\");\n  });\n  var needsEmailVerification = useSelector(service, function (state) {\n    return state.matches(\"idle.success\");\n  });\n  var changeEmail = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(valueEmail) {\n      var valueOptions,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              valueOptions = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : stateOptions;\n              return _context2.abrupt(\"return\", changeEmailPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valueOptions));\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [service, stateEmail, stateOptions]);\n  return {\n    changeEmail: changeEmail,\n    isLoading: isLoading,\n    needsEmailVerification: needsEmailVerification,\n    isError: isError,\n    error: error\n  };\n}\nvar useChangePassword = function useChangePassword(statePassword) {\n  var nhost = useNhostClient();\n  var machine = useMemo(function () {\n    return createChangePasswordMachine(nhost.auth.client);\n  }, [nhost]);\n  var service = useInterpret(machine);\n  var isError = useSelector(service, function (state) {\n    return state.matches({\n      idle: \"error\"\n    });\n  });\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches({\n      idle: \"success\"\n    });\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.error;\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches(\"requesting\");\n  });\n  var changePassword = function changePassword(valuePassword) {\n    return changePasswordPromise(service, typeof valuePassword === \"string\" ? valuePassword : statePassword);\n  };\n  return {\n    changePassword: changePassword,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    isError: isError,\n    error: error\n  };\n};\nvar useConfigMfa = function useConfigMfa() {\n  var nhost = useNhostClient();\n  var machine = useMemo(function () {\n    return createEnableMfaMachine(nhost.auth.client);\n  }, [nhost]);\n  var service = useInterpret(machine);\n  var isError = useSelector(service, function (state) {\n    return state.matches({\n      idle: \"error\"\n    }) || state.matches({\n      generated: {\n        idle: \"error\"\n      }\n    });\n  });\n  var isGenerating = useSelector(service, function (state) {\n    return state.matches(\"generating\");\n  });\n  var isGenerated = useSelector(service, function (state) {\n    return state.matches(\"generated\");\n  });\n  var isActivating = useSelector(service, function (state) {\n    return state.matches({\n      generated: \"activating\"\n    });\n  });\n  var isActivated = useSelector(service, function (state) {\n    return state.matches({\n      generated: \"activated\"\n    });\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.error;\n  });\n  var qrCodeDataUrl = useSelector(service, function (state) {\n    return state.context.imageUrl || \"\";\n  });\n  var generateQrCode = function generateQrCode() {\n    return generateQrCodePromise(service);\n  };\n  var activateMfa = function activateMfa(code) {\n    return activateMfaPromise(service, code);\n  };\n  return {\n    generateQrCode: generateQrCode,\n    isGenerating: isGenerating,\n    qrCodeDataUrl: qrCodeDataUrl,\n    isGenerated: isGenerated,\n    activateMfa: activateMfa,\n    isActivating: isActivating,\n    isActivated: isActivated,\n    isError: isError,\n    error: error\n  };\n};\nvar useDecodedAccessToken = function useDecodedAccessToken() {\n  var jwt = useAccessToken();\n  return jwt ? jwt_decode(jwt) : null;\n};\nvar useFileUploadItem = function useFileUploadItem(ref) {\n  var nhost = useNhostClient();\n  var add = function add(params) {\n    ref.send({\n      type: \"ADD\",\n      file: params.file,\n      bucketId: params.bucketId || bucketId\n    });\n  };\n  var upload = function upload(params) {\n    return uploadFilePromise(nhost, ref, {\n      file: params.file,\n      bucketId: params.bucketId || bucketId,\n      id: id,\n      name: name\n    });\n  };\n  var cancel = function cancel() {\n    ref.send(\"CANCEL\");\n  };\n  var destroy = function destroy() {\n    ref.send(\"DESTROY\");\n  };\n  var isUploading = useSelector(ref, function (state) {\n    return state.matches(\"uploading\");\n  });\n  var isUploaded = useSelector(ref, function (state) {\n    return state.matches(\"uploaded\");\n  });\n  var isError = useSelector(ref, function (state) {\n    return state.matches(\"error\");\n  });\n  var error = useSelector(ref, function (state) {\n    return state.context.error || null;\n  });\n  var progress = useSelector(ref, function (state) {\n    return state.context.progress;\n  });\n  var id = useSelector(ref, function (state) {\n    return state.context.id;\n  });\n  var bucketId = useSelector(ref, function (state) {\n    return state.context.bucketId;\n  });\n  var name = useSelector(ref, function (state) {\n    var _a;\n    return (_a = state.context.file) == null ? void 0 : _a.name;\n  });\n  return {\n    add: add,\n    upload: upload,\n    cancel: cancel,\n    destroy: destroy,\n    isUploaded: isUploaded,\n    isUploading: isUploading,\n    isError: isError,\n    error: error,\n    progress: progress,\n    id: id,\n    bucketId: bucketId,\n    name: name\n  };\n};\nvar useFileUpload = function useFileUpload() {\n  var service = useInterpret(createFileUploadMachine);\n  return useFileUploadItem(service);\n};\nvar useHasuraClaims = function useHasuraClaims() {\n  var claims = useDecodedAccessToken();\n  return (claims == null ? void 0 : claims[\"https://hasura.io/jwt/claims\"]) || null;\n};\nvar useHasuraClaim = function useHasuraClaim(name) {\n  var hasuraClaims = useHasuraClaims();\n  return (hasuraClaims == null ? void 0 : hasuraClaims[name.startsWith(\"x-hasura-\") ? name : \"x-hasura-\".concat(name)]) || null;\n};\nvar useMultipleFilesUpload = function useMultipleFilesUpload() {\n  var nhost = useNhostClient();\n  var _useState7 = useState([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    errors = _useState8[0],\n    setErrors = _useState8[1];\n  var service = useInterpret(createMultipleFilesUploadMachine, {}, function (state) {\n    if (state.event.type === \"UPLOAD_ERROR\") {\n      setErrors(state.context.files.filter(function (ref) {\n        var _a;\n        return (_a = ref.getSnapshot()) == null ? void 0 : _a.context.error;\n      }));\n    } else if ((state.matches(\"uploaded\") || state.event.type === \"CLEAR\") && errors.length > 0) {\n      setErrors([]);\n    }\n  });\n  var add = function add(params) {\n    service.send(__spreadValues({\n      type: \"ADD\"\n    }, params));\n  };\n  var upload = function upload(params) {\n    return uploadMultipleFilesPromise(nhost, service, params);\n  };\n  var cancel = function cancel() {\n    service.send(\"CANCEL\");\n  };\n  var clear = function clear() {\n    service.send(\"CLEAR\");\n  };\n  var isUploading = useSelector(service, function (state) {\n    return state.matches(\"uploading\");\n  });\n  var isUploaded = useSelector(service, function (state) {\n    return state.matches(\"uploaded\");\n  });\n  var isError = useSelector(service, function (state) {\n    return state.matches(\"error\");\n  });\n  var progress = useSelector(service, function (state) {\n    return state.context.progress;\n  });\n  var files = useSelector(service, function (state) {\n    return state.context.files;\n  });\n  return {\n    upload: upload,\n    add: add,\n    clear: clear,\n    cancel: cancel,\n    progress: progress,\n    isUploaded: isUploaded,\n    isUploading: isUploading,\n    files: files,\n    isError: isError,\n    errors: errors\n  };\n};\nvar useUserData = function useUserData() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    return state.context.user;\n  }, function (a, b) {\n    return (a && JSON.stringify(a)) === (b && JSON.stringify(b));\n  });\n};\nvar useNhostAuth = function useNhostAuth() {\n  var _useAuthenticationSta = useAuthenticationStatus(),\n    isLoading = _useAuthenticationSta.isLoading,\n    isAuthenticated = _useAuthenticationSta.isAuthenticated;\n  var user = useUserData();\n  return useMemo(function () {\n    return {\n      isLoading: isLoading,\n      isAuthenticated: isAuthenticated,\n      user: user\n    };\n  }, [isLoading, isAuthenticated, user]);\n};\nvar useNhostBackendUrl = function useNhostBackendUrl() {\n  var nhost = useContext(NhostReactContext);\n  return nhost.auth.client.backendUrl.replace(\"/v1/auth\", \"\");\n};\nvar useProviderLink = function useProviderLink(options) {\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isSSR = _useState10[0],\n    setIsSSR = _useState10[1];\n  useEffect(function () {\n    setIsSSR(false);\n  }, []);\n  var nhost = useContext(NhostReactContext);\n  return new Proxy({}, {\n    get: function get(_, provider) {\n      return encodeQueryParameters(\"\".concat(nhost.auth.client.backendUrl, \"/signin/provider/\").concat(provider), rewriteRedirectTo(isSSR ? void 0 : nhost.auth.client.clientUrl, options));\n    }\n  });\n};\nvar useResetPassword = function useResetPassword(a, b) {\n  var stateEmail = typeof a === \"string\" ? a : void 0;\n  var stateOptions = typeof a !== \"string\" ? a : b;\n  var nhost = useNhostClient();\n  var machine = useMemo(function () {\n    return createResetPasswordMachine(nhost.auth.client);\n  }, [nhost]);\n  var service = useInterpret(machine);\n  var isLoading = useSelector(service, function (s) {\n    return s.matches(\"requesting\");\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.error;\n  });\n  var isError = useSelector(service, function (state) {\n    return state.matches(\"idle.error\");\n  });\n  var isSent = useSelector(service, function (state) {\n    return state.matches(\"idle.success\");\n  });\n  var resetPassword = function resetPassword(valueEmail) {\n    var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    return resetPasswordPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valueOptions);\n  };\n  return {\n    resetPassword: resetPassword,\n    isLoading: isLoading,\n    isSent: isSent,\n    isError: isError,\n    error: error\n  };\n};\nvar useSendVerificationEmail = function useSendVerificationEmail(a, b) {\n  var stateEmail = typeof a === \"string\" ? a : void 0;\n  var stateOptions = typeof a !== \"string\" ? a : b;\n  var nhost = useNhostClient();\n  var machine = useMemo(function () {\n    return createSendVerificationEmailMachine(nhost.auth.client);\n  }, [nhost]);\n  var service = useInterpret(machine);\n  var isError = useSelector(service, function (state) {\n    return state.matches({\n      idle: \"error\"\n    });\n  });\n  var isSent = useSelector(service, function (state) {\n    return state.matches({\n      idle: \"success\"\n    });\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.error;\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches(\"requesting\");\n  });\n  var sendEmail = function sendEmail(valueEmail) {\n    var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    return sendVerificationEmailPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valueOptions);\n  };\n  return {\n    sendEmail: sendEmail,\n    isLoading: isLoading,\n    isSent: isSent,\n    isError: isError,\n    error: error\n  };\n};\nvar useSignInAnonymous = function useSignInAnonymous() {\n  var service = useAuthInterpreter();\n  var signInAnonymous = function signInAnonymous() {\n    return signInAnonymousPromise(service);\n  };\n  var error = useSelector(service, function (state) {\n    return state.context.errors.authentication || null;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error);\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        authenticating: \"anonymous\"\n      }\n    });\n  });\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches({\n      authentication: \"signedIn\"\n    });\n  });\n  var isError = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        signedOut: \"failed\"\n      }\n    });\n  });\n  var user = useSelector(service, function (state) {\n    return state.context.user;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id);\n  });\n  var accessToken = useSelector(service, function (state) {\n    return state.context.accessToken.value;\n  });\n  return {\n    accessToken: accessToken,\n    error: error,\n    isError: isError,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    signInAnonymous: signInAnonymous,\n    user: user\n  };\n};\nvar useSignInEmailPassword = function useSignInEmailPassword(stateEmail, statePassword, stateOtp) {\n  var service = useAuthInterpreter();\n  var signInEmailPassword = function signInEmailPassword(valueEmail, valuePassword) {\n    return signInEmailPasswordPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, typeof valuePassword === \"string\" ? valuePassword : statePassword);\n  };\n  var sendMfaOtp = function sendMfaOtp(valueOtp) {\n    return signInMfaTotpPromise(service, typeof valueOtp === \"string\" ? valueOtp : stateOtp);\n  };\n  var user = useSelector(service, function (state) {\n    return state.context.user;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id);\n  });\n  var accessToken = useSelector(service, function (state) {\n    return state.context.accessToken.value;\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.errors.authentication || null;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error);\n  });\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches({\n      authentication: \"signedIn\"\n    });\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        authenticating: \"password\"\n      }\n    });\n  }, function (a, b) {\n    return a === b;\n  });\n  var needsEmailVerification = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        signedOut: \"noErrors\"\n      },\n      registration: {\n        incomplete: \"needsEmailVerification\"\n      }\n    });\n  }, function (a, b) {\n    return a === b;\n  });\n  var needsMfaOtp = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        signedOut: \"needsMfa\"\n      }\n    });\n  }, function (a, b) {\n    return a === b;\n  });\n  var isError = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        signedOut: \"failed\"\n      }\n    });\n  }, function (a, b) {\n    return a === b;\n  });\n  var mfa = useSelector(service, function (state) {\n    return state.context.mfa;\n  });\n  return {\n    accessToken: accessToken,\n    error: error,\n    isError: isError,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    needsEmailVerification: needsEmailVerification,\n    needsMfaOtp: needsMfaOtp,\n    mfa: mfa,\n    sendMfaOtp: sendMfaOtp,\n    signInEmailPassword: signInEmailPassword,\n    user: user\n  };\n};\nfunction useSignInEmailPasswordless(a, b) {\n  var stateEmail = typeof a === \"string\" ? a : void 0;\n  var stateOptions = typeof a === \"string\" ? b : a;\n  var service = useAuthInterpreter();\n  var signInEmailPasswordless = function signInEmailPasswordless(valueEmail) {\n    var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    return signInEmailPasswordlessPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valueOptions);\n  };\n  var error = useSelector(service, function (state) {\n    return state.context.errors.registration || null;\n  }, function (a2, b2) {\n    return (a2 == null ? void 0 : a2.error) === (b2 == null ? void 0 : b2.error);\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches(\"registration.passwordlessEmail\");\n  });\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches(\"registration.incomplete.needsEmailVerification\");\n  });\n  var isError = useSelector(service, function (state) {\n    return state.matches(\"registration.incomplete.failed\");\n  });\n  return {\n    signInEmailPasswordless: signInEmailPasswordless,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    isError: isError,\n    error: error\n  };\n}\nvar useSignInEmailSecurityKey = function useSignInEmailSecurityKey() {\n  var service = useAuthInterpreter();\n  var signInEmailSecurityKey = function signInEmailSecurityKey(email) {\n    return signInEmailSecurityKeyPromise(service, email);\n  };\n  var user = useSelector(service, function (state) {\n    return state.context.user;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id);\n  });\n  var accessToken = useSelector(service, function (state) {\n    return state.context.accessToken.value;\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.errors.authentication || null;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error);\n  });\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches({\n      authentication: \"signedIn\"\n    });\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        authenticating: \"securityKeyEmail\"\n      }\n    });\n  }, function (a, b) {\n    return a === b;\n  });\n  var needsEmailVerification = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        signedOut: \"noErrors\"\n      },\n      registration: {\n        incomplete: \"needsEmailVerification\"\n      }\n    });\n  }, function (a, b) {\n    return a === b;\n  });\n  var isError = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        signedOut: \"failed\"\n      }\n    });\n  }, function (a, b) {\n    return a === b;\n  });\n  return {\n    accessToken: accessToken,\n    error: error,\n    isError: isError,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    needsEmailVerification: needsEmailVerification,\n    signInEmailSecurityKey: signInEmailSecurityKey,\n    user: user\n  };\n};\nfunction useSignInSmsPasswordless(stateOptions) {\n  var service = useAuthInterpreter();\n  var _useState11 = useState(\"\"),\n    _useState12 = _slicedToArray(_useState11, 2),\n    _phoneNumber = _useState12[0],\n    setPhoneNumber = _useState12[1];\n  var signInSmsPasswordless = function signInSmsPasswordless(phoneNumber) {\n    var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    setPhoneNumber(phoneNumber);\n    return signInSmsPasswordlessPromise(service, phoneNumber, valueOptions);\n  };\n  var sendOtp = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var _len,\n        args,\n        _key,\n        phoneNumber,\n        code2,\n        code,\n        _args3 = arguments;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              for (_len = _args3.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = _args3[_key];\n              }\n              if (!(args.length === 2)) {\n                _context3.next = 4;\n                break;\n              }\n              phoneNumber = args[0], code2 = args[1];\n              return _context3.abrupt(\"return\", signInSmsPasswordlessOtpPromise(service, phoneNumber, code2));\n            case 4:\n              code = args[0];\n              return _context3.abrupt(\"return\", signInSmsPasswordlessOtpPromise(service, _phoneNumber, code));\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return function sendOtp() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var error = useSelector(service, function (state) {\n    return state.context.errors.registration || null;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error);\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches(\"registration.passwordlessSms\") || state.matches(\"registration.passwordlessSmsOtp\");\n  });\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches(\"authentication.signedIn\");\n  });\n  var needsOtp = useSelector(service, function (state) {\n    return state.matches(\"registration.incomplete.needsOtp\");\n  });\n  var isError = useSelector(service, function (state) {\n    return state.matches(\"registration.incomplete.failed\");\n  });\n  return {\n    signInSmsPasswordless: signInSmsPasswordless,\n    sendOtp: sendOtp,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    needsOtp: needsOtp,\n    isError: isError,\n    error: error\n  };\n}\nvar useSignOut = function useSignOut() {\n  var stateAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var service = useAuthInterpreter();\n  var signOut = function signOut(valueAll) {\n    return signOutPromise(service, typeof valueAll === \"boolean\" ? valueAll : stateAll);\n  };\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches({\n      authentication: {\n        signedOut: \"success\"\n      }\n    });\n  }, function (a, b) {\n    return a === b;\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.errors.signout || null;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error);\n  });\n  return {\n    signOut: signOut,\n    isSuccess: isSuccess,\n    error: error\n  };\n};\nvar useSignUpEmailPassword = function useSignUpEmailPassword(a, b, c) {\n  var stateEmail = typeof a === \"string\" ? a : void 0;\n  var statePassword = typeof b === \"string\" ? b : void 0;\n  var stateOptions = c || (typeof a !== \"string\" ? a : void 0);\n  var service = useAuthInterpreter();\n  var isError = useSelector(service, function (state) {\n    return !!state.context.errors.registration;\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.errors.registration || null;\n  }, function (a2, b2) {\n    return (a2 == null ? void 0 : a2.error) === (b2 == null ? void 0 : b2.error);\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches(\"registration.emailPassword\");\n  });\n  var needsEmailVerification = useSelector(service, function (state) {\n    return state.matches(\"registration.incomplete.needsEmailVerification\");\n  });\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches({\n      authentication: \"signedIn\",\n      registration: \"complete\"\n    });\n  });\n  var signUpEmailPassword = function signUpEmailPassword(valueEmail) {\n    var valuePassword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : statePassword;\n    var valueOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stateOptions;\n    return signUpEmailPasswordPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valuePassword, valueOptions);\n  };\n  var user = useSelector(service, function (state) {\n    return state.context.user;\n  }, function (a2, b2) {\n    return (a2 == null ? void 0 : a2.id) === (b2 == null ? void 0 : b2.id);\n  });\n  var accessToken = useSelector(service, function (state) {\n    return state.context.accessToken.value;\n  });\n  return {\n    accessToken: accessToken,\n    error: error,\n    isError: isError,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    needsEmailVerification: needsEmailVerification,\n    signUpEmailPassword: signUpEmailPassword,\n    user: user\n  };\n};\nvar useSignUpEmailSecurityKeyEmail = function useSignUpEmailSecurityKeyEmail(hookOptions) {\n  var service = useAuthInterpreter();\n  var isError = useSelector(service, function (state) {\n    return !!state.context.errors.registration;\n  });\n  var error = useSelector(service, function (state) {\n    return state.context.errors.registration || null;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error);\n  });\n  var isLoading = useSelector(service, function (state) {\n    return state.matches(\"registration.securityKey\");\n  });\n  var needsEmailVerification = useSelector(service, function (state) {\n    return state.matches(\"registration.incomplete.needsEmailVerification\");\n  });\n  var isSuccess = useSelector(service, function (state) {\n    return state.matches({\n      authentication: \"signedIn\",\n      registration: \"complete\"\n    });\n  });\n  var signUpEmailSecurityKey = function signUpEmailSecurityKey(email) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : hookOptions;\n    return signUpEmailSecurityKeyPromise(service, email, options);\n  };\n  var user = useSelector(service, function (state) {\n    return state.context.user;\n  }, function (a, b) {\n    return (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id);\n  });\n  var accessToken = useSelector(service, function (state) {\n    return state.context.accessToken.value;\n  });\n  return {\n    accessToken: accessToken,\n    error: error,\n    isError: isError,\n    isLoading: isLoading,\n    isSuccess: isSuccess,\n    needsEmailVerification: needsEmailVerification,\n    signUpEmailSecurityKey: signUpEmailSecurityKey,\n    user: user\n  };\n};\nvar useUserAvatarUrl = function useUserAvatarUrl() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.avatarUrl;\n  }, function (a, b) {\n    return a === b;\n  });\n};\nvar useAvatarUrl = useUserAvatarUrl;\nvar useUserDefaultRole = function useUserDefaultRole() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.defaultRole;\n  }, function (a, b) {\n    return a === b;\n  });\n};\nvar useDefaultRole = useUserDefaultRole;\nvar useUserDisplayName = function useUserDisplayName() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.displayName;\n  }, function (a, b) {\n    return a === b;\n  });\n};\nvar useDisplayName = useUserDisplayName;\nvar useUserEmail = function useUserEmail() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.email;\n  }, function (a, b) {\n    return a === b;\n  });\n};\nvar useEmail = useUserEmail;\nvar useUserId = function useUserId() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.id;\n  }, function (a, b) {\n    return a === b;\n  });\n};\nvar useUserIsAnonymous = function useUserIsAnonymous() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.isAnonymous;\n  }, function (a, b) {\n    return a === b;\n  });\n};\nvar useIsAnonymous = useUserIsAnonymous;\nvar useUserLocale = function useUserLocale() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.locale;\n  }, function (a, b) {\n    return a === b;\n  });\n};\nvar useUserRoles = function useUserRoles() {\n  var service = useAuthInterpreter();\n  return useSelector(service, function (state) {\n    var _a;\n    return ((_a = state.context.user) == null ? void 0 : _a.roles) || [];\n  }, function (a, b) {\n    return a.every(function (i) {\n      return b.includes(i) && b.every(function (i2) {\n        return a.includes(i2);\n      });\n    });\n  });\n};\nexport { NhostClient, NhostReactContext, NhostReactProvider, useAccessToken, useAddSecurityKey, useAuthInterpreter, useAuthLoading, useAuthenticated, useAuthenticationStatus, useAvatarUrl, useChangeEmail, useChangePassword, useConfigMfa, useDecodedAccessToken, useDefaultRole, useDisplayName, useEmail, useFileUpload, useFileUploadItem, useHasuraClaim, useHasuraClaims, useIsAnonymous, useMultipleFilesUpload, useNhostAuth, useNhostBackendUrl, useNhostClient, useProviderLink, useResetPassword, useSendVerificationEmail, useSignInAnonymous, useSignInEmailPassword, useSignInEmailPasswordless, useSignInEmailSecurityKey, useSignInSmsPasswordless, useSignOut, useSignUpEmailPassword, useSignUpEmailSecurityKeyEmail, useUserAvatarUrl, useUserData, useUserDefaultRole, useUserDisplayName, useUserEmail, useUserId, useUserIsAnonymous, useUserLocale, useUserRoles };","map":{"version":3,"mappings":"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","names":["NhostClient","params","__spreadProps","start","VanillaClient","createContext","NhostReactProvider","_a","nhost","_b","initial","props","auth","client","machine","useInterpret","devTools","context","produce","ctx","user","value","refreshToken","accessToken","expiresAt","Date","now","accessTokenExpiresIn","useRef","useEffect","isInitialMount","current","interpreter","data","session","NhostReactContext","Provider","children","useAuthInterpreter","useContext","Error","useAccessToken","service","useSelector","state","useNhostClient","useAddSecurityKey","useState","error","setError","isSuccess","isLoading","setIsLoading","nickname","addSecurityKeyPromise","result","error2","add","isError","useAuthenticated","status","matches","authentication","isAuthenticated","setIsAuthenticated","subscription","subscribe","newValue","unsubscribe","useAuthenticationStatus","hasTag","errors","signedOut","a","b","useAuthLoading","useMemo","createChangeEmailMachine","s","changeEmail","useCallback","valueEmail","valueOptions","stateOptions","changeEmailPromise","stateEmail","needsEmailVerification","useChangePassword","statePassword","createChangePasswordMachine","idle","changePassword","valuePassword","changePasswordPromise","useConfigMfa","createEnableMfaMachine","generated","imageUrl","generateQrCode","generateQrCodePromise","activateMfa","code","activateMfaPromise","isGenerating","qrCodeDataUrl","isGenerated","isActivating","isActivated","useDecodedAccessToken","jwt","jwt_decode","useFileUploadItem","ref","send","type","file","bucketId","upload","uploadFilePromise","id","name","cancel","destroy","progress","isUploaded","isUploading","useFileUpload","createFileUploadMachine","useHasuraClaims","claims","useHasuraClaim","hasuraClaims","startsWith","useMultipleFilesUpload","setErrors","createMultipleFilesUploadMachine","event","files","filter","getSnapshot","length","__spreadValues","uploadMultipleFilesPromise","clear","useUserData","stringify","JSON","useNhostAuth","useNhostBackendUrl","backendUrl","replace","useProviderLink","options","isSSR","setIsSSR","Proxy","get","_","provider","encodeQueryParameters","rewriteRedirectTo","clientUrl","useResetPassword","createResetPasswordMachine","resetPassword","resetPasswordPromise","isSent","useSendVerificationEmail","createSendVerificationEmailMachine","sendEmail","sendVerificationEmailPromise","useSignInAnonymous","signInAnonymous","signInAnonymousPromise","authenticating","useSignInEmailPassword","stateOtp","signInEmailPassword","signInEmailPasswordPromise","sendMfaOtp","valueOtp","signInMfaTotpPromise","registration","incomplete","needsMfaOtp","mfa","signInEmailPasswordless","signInEmailPasswordlessPromise","a2","b2","useSignInEmailSecurityKey","signInEmailSecurityKey","email","signInEmailSecurityKeyPromise","_phoneNumber","setPhoneNumber","signInSmsPasswordless","phoneNumber","args","code2","signInSmsPasswordlessOtpPromise","sendOtp","needsOtp","useSignOut","stateAll","signOut","valueAll","signOutPromise","signout","useSignUpEmailPassword","c","signUpEmailPassword","signUpEmailPasswordPromise","useSignUpEmailSecurityKeyEmail","hookOptions","signUpEmailSecurityKey","signUpEmailSecurityKeyPromise","useUserAvatarUrl","avatarUrl","useAvatarUrl","useUserDefaultRole","defaultRole","useDefaultRole","useUserDisplayName","displayName","useDisplayName","useUserEmail","useEmail","useUserId","useUserIsAnonymous","isAnonymous","useIsAnonymous","useUserLocale","locale","useUserRoles","roles","every","i","includes","i2"],"sources":["C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\client.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\provider.tsx","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useAuthInterpreter.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useAccessToken.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useNhostClient.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useAddSecurityKey.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useAuthenticated.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useAuthenticationStatus.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useAuthLoading.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useChangeEmail.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useChangePassword.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useConfigMfa.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useDecodedAccessToken.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useFileUpload.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useHasuraClaims.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useHasuraClaim.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useMultipleFilesUpload.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserData.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useNhostAuth.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useNhostBackendUrl.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useProviderLink.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useResetPassword.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSendVerificationEmail.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSignInAnonymous.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSignInEmailPassword.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSignInEmailPasswordless.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSignInEmailSecurityKey.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSignInSmsPasswordless.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSignOut.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSignUpEmailPassword.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useSignUpEmailSecurityKey.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserAvatarUrl.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserDefaultRole.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserDisplayName.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserEmail.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserId.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserIsAnonymous.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserLocale.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react\\src\\useUserRoles.ts"],"sourcesContent":["import { Subdomain } from '@nhost/nhost-js'\nimport { BackendUrl } from '@nhost/nhost-js'\nimport { NhostAuthConstructorParams, NhostClient as VanillaClient } from '@nhost/nhost-js'\n\nexport interface NhostReactClientConstructorParams\n  extends Partial<BackendUrl>,\n    Partial<Subdomain>,\n    Omit<NhostAuthConstructorParams, 'url' | 'start' | 'client'> {}\n\nexport class NhostClient extends VanillaClient {\n  constructor(params: NhostReactClientConstructorParams) {\n    super({ ...params, start: false })\n  }\n}\n","import produce from 'immer'\nimport React, { createContext, PropsWithChildren, useEffect, useRef } from 'react'\n\nimport { AuthContext, NhostSession } from '@nhost/core'\nimport { NhostClient } from '@nhost/nhost-js'\nimport { useInterpret } from '@xstate/react'\n\nexport const NhostReactContext = createContext<NhostClient>({} as NhostClient)\nexport interface NhostReactProviderProps {\n  nhost: NhostClient\n  initial?: NhostSession\n}\n\nexport const NhostReactProvider: React.FC<PropsWithChildren<NhostReactProviderProps>> = ({\n  nhost,\n  initial,\n  ...props\n}) => {\n  const machine = nhost.auth.client.machine\n  const interpreter = useInterpret(machine, {\n    devTools: nhost.devTools,\n    context: produce<AuthContext>(machine.context, (ctx: AuthContext) => {\n      if (initial) {\n        ctx.user = initial.user\n        ctx.refreshToken.value = initial.refreshToken ?? null\n        ctx.accessToken.value = initial.accessToken ?? null\n        ctx.accessToken.expiresAt = new Date(Date.now() + initial.accessTokenExpiresIn * 1_000)\n      }\n    })\n  }).start()\n\n  // * Hook to send session update everytime the 'initial' props changed\n  const isInitialMount = useRef(true)\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n    } else {\n      if (initial) {\n        interpreter.send('SESSION_UPDATE', { data: { session: initial } })\n      }\n    }\n  }, [initial, interpreter])\n\n  nhost.auth.client.interpreter = interpreter\n  return <NhostReactContext.Provider value={nhost}>{props.children}</NhostReactContext.Provider>\n}\n","import { useContext } from 'react'\nimport { InterpreterFrom } from 'xstate'\n\nimport { AuthMachine } from '@nhost/core'\n\nimport { NhostReactContext } from './provider'\n\n/** @internal */\nexport const useAuthInterpreter = (): InterpreterFrom<AuthMachine> => {\n  const nhost = useContext(NhostReactContext)\n  const interpreter = nhost.auth?.client.interpreter\n  if (!interpreter) throw Error('No interpreter')\n  return interpreter\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAccessToken` to get the access token of the user.\n *\n * @example\n * ```ts\n * const accessToken = useAccessToken();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAccessToken = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.context.accessToken.value)\n}\n","import { useContext } from 'react'\n\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * Use the hook `useNhostClient` to get the Nhost JavaScript client (https://docs.nhost.io/reference/javascript).\n *\n * @example\n * ```tsx\n * const nhost = useNhostClient()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-client\n */\nexport const useNhostClient = (): NhostClient => {\n  const nhost = useContext(NhostReactContext)\n  return nhost\n}\n","import { useState } from 'react'\n\nimport {\n  ActionErrorState,\n  ActionSuccessState,\n  AddSecurityKeyHandlerResult,\n  addSecurityKeyPromise,\n  ErrorPayload\n} from '@nhost/core'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface AddSecurityKeyHandler {\n  (\n    /** Optional human-readable name of the security key */\n    nickname?: string\n  ): Promise<AddSecurityKeyHandlerResult>\n}\n\nexport interface AddSecuritKeyHookResult extends ActionErrorState, ActionSuccessState {\n  /** Add a security key to the current user with the WebAuthn API */\n  add: AddSecurityKeyHandler\n}\n\ninterface AddSecuritKeyHook {\n  (): AddSecuritKeyHookResult\n}\n\n/**\n * Use the hook `useAddSecurityKey` to add a WebAuthn security key.\n *\n * @example\n * ```tsx\n * const { add, isLoading, isSuccess, isError, error } = useAddSecurityKey()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await add('key nickname')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-add-security-key\n */\nexport const useAddSecurityKey: AddSecuritKeyHook = () => {\n  const nhost = useNhostClient()\n  const [error, setError] = useState<ErrorPayload | null>(null)\n  const isSuccess = !error\n  const isError = !!error\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const add: AddSecurityKeyHandler = async (nickname) => {\n    setIsLoading(true)\n    const result = await addSecurityKeyPromise(nhost.auth.client, nickname)\n    const { error } = result\n    if (error) {\n      setError(error)\n    }\n    setIsLoading(false)\n    return result\n  }\n\n  return { add, isLoading, isSuccess, isError, error }\n}\n","import { useEffect, useState } from 'react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticated` to get the authentication status of the user.\n *\n * @example\n * ```ts\n * const isAuthenticated = useAuthenticated();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAuthenticated = () => {\n  const service = useAuthInterpreter()\n  const [isAuthenticated, setIsAuthenticated] = useState(\n    !!service.status && service.state.matches({ authentication: 'signedIn' })\n  )\n  useEffect(() => {\n    const subscription = service.subscribe((state) => {\n      const newValue = state.matches({ authentication: 'signedIn' })\n      setIsAuthenticated(newValue)\n    })\n    return subscription.unsubscribe\n  }, [service])\n  return isAuthenticated\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticationStatus` to get the authentication status for the user.\n *\n * @example\n * ```tsx\n * const { isAuthenticated, isLoading } = useAuthenticationStatus();\n * ```\n */\nexport const useAuthenticationStatus = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => ({\n      isAuthenticated: state.matches({ authentication: 'signedIn' }),\n      isLoading: state.hasTag('loading'),\n      error: state.context.errors.authentication || null,\n      isError: state.matches({ authentication: { signedOut: 'failed' } })\n    }),\n    (a, b) => a.isAuthenticated === b.isAuthenticated && a.isLoading === b.isLoading\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * @deprecated\n * When using both {@link useAuthLoading} and {@link useAuthenticated} together, their initial state will change\n * three times:\n *\n * `(true, false)` -> `(false, false)` -> `(false, true)`\n *\n * Use {@link useAuthenticationStatus} instead.\n */\nexport const useAuthLoading = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.hasTag('loading'))\n}\n","import { useCallback, useMemo } from 'react'\n\nimport {\n  ChangeEmailHandlerResult,\n  ChangeEmailOptions,\n  changeEmailPromise,\n  ChangeEmailState,\n  createChangeEmailMachine\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangeEmailHandler {\n  (email: string, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n}\n\nexport interface ChangeEmailHookResult extends ChangeEmailState {\n  /** Requests the email change. Returns a promise with the current context  */\n  changeEmail: ChangeEmailHandler\n}\n\n/**\n * Use the hook `useChangeEmail` to change email for the user.\n *\n * @example\n * ```tsx\n * const { changeEmail, isLoading, needsEmailVerification, isError, error } = useChangeEmail();\n *\n * console.log({ isLoading, needsEmailVerification, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changeEmail({\n *     email: 'new@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-email\n */\nexport function useChangeEmail(options?: ChangeEmailOptions): ChangeEmailHookResult\n\n/**\n * @deprecated\n */\nexport function useChangeEmail(email?: string, options?: ChangeEmailOptions): ChangeEmailHookResult\n\nexport function useChangeEmail(a?: string | ChangeEmailOptions, b?: ChangeEmailOptions) {\n  const stateEmail = useMemo(() => (typeof a === 'string' ? a : undefined), [a])\n  const stateOptions = useMemo(() => (typeof a !== 'string' ? a : b), [a, b])\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangeEmailMachine(nhost.auth.client), [nhost])\n\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const needsEmailVerification = useSelector(service, (state) => state.matches('idle.success'))\n\n  const changeEmail: ChangeEmailHandler = useCallback(\n    async (valueEmail?: string | unknown, valueOptions = stateOptions) =>\n      changeEmailPromise(\n        service,\n        typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n        valueOptions\n      ),\n    [service, stateEmail, stateOptions]\n  )\n\n  return { changeEmail, isLoading, needsEmailVerification, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  ActionErrorState,\n  ActionSuccessState,\n  ChangePasswordHandlerResult,\n  changePasswordPromise,\n  createChangePasswordMachine\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangePasswordHandler {\n  (password: string): Promise<ChangePasswordHandlerResult>\n  /** @deprecated */\n  (password?: unknown): Promise<ChangePasswordHandlerResult>\n}\n\nexport interface ChangePasswordHookResult extends ActionErrorState, ActionSuccessState {\n  /** Requests the password change. Returns a promise with the current context */\n  changePassword: ChangePasswordHandler\n}\n\ninterface ChangePasswordHook {\n  (): ChangePasswordHookResult\n  /** @deprecated */\n  (email?: string): ChangePasswordHookResult\n}\n\n/**\n * Use the hook `useChangePassword` to change password for the user.\n *\n * @example\n * ```tsx\n * const { changePassword, isLoading, isSuccess, isError, error } = useChangePassword();\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changePassword('my-new-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-password\n */\nexport const useChangePassword: ChangePasswordHook = (statePassword?: string) => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangePasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSuccess = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const changePassword: ChangePasswordHandler = (valuePassword?: string | unknown) =>\n    changePasswordPromise(\n      service,\n      typeof valuePassword === 'string' ? valuePassword : (statePassword as string)\n    )\n\n  return { changePassword, isLoading, isSuccess, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  ActivateMfaHandlerResult,\n  activateMfaPromise,\n  ActivateMfaState,\n  createEnableMfaMachine,\n  GenerateQrCodeHandlerResult,\n  generateQrCodePromise,\n  GenerateQrCodeState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ConfigMfaState extends ActivateMfaState, GenerateQrCodeState {\n  generateQrCode: () => Promise<GenerateQrCodeHandlerResult>\n  activateMfa: (code: string) => Promise<ActivateMfaHandlerResult>\n}\n\n// TODO documentation when available in Nhost Cloud - see changelog\nexport const useConfigMfa = (): ConfigMfaState => {\n  const nhost = useNhostClient()\n\n  const machine = useMemo(() => createEnableMfaMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ idle: 'error' }) || state.matches({ generated: { idle: 'error' } })\n  )\n  const isGenerating = useSelector(service, (state) => state.matches('generating'))\n  const isGenerated = useSelector(service, (state) => state.matches('generated'))\n  const isActivating = useSelector(service, (state) => state.matches({ generated: 'activating' }))\n  const isActivated = useSelector(service, (state) => state.matches({ generated: 'activated' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const qrCodeDataUrl = useSelector(service, (state) => state.context.imageUrl || '')\n\n  const generateQrCode = () => generateQrCodePromise(service)\n\n  const activateMfa = (code: string) => activateMfaPromise(service, code)\n\n  return {\n    generateQrCode,\n    isGenerating,\n    qrCodeDataUrl,\n    isGenerated,\n    activateMfa,\n    isActivating,\n    isActivated,\n    isError,\n    error\n  }\n}\n","import jwt_decode from 'jwt-decode'\n\nimport { JWTClaims } from '@nhost/core'\n\nimport { useAccessToken } from './useAccessToken'\n\n/**\n * Use the hook `useDecodedAccessToken` to get the decoded access token of the user.\n *\n * @example\n * ```tsx\n * const decodedAccessToken = useDecodedAccessToken()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-decoded-access-token\n */\nexport const useDecodedAccessToken = () => {\n  const jwt = useAccessToken()\n  return jwt ? jwt_decode<JWTClaims>(jwt) : null\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport {\n  createFileUploadMachine,\n  FileItemRef,\n  FileUploadMachine,\n  FileUploadState,\n  StorageUploadFileParams,\n  UploadFileHandlerResult,\n  uploadFilePromise\n} from '@nhost/hasura-storage-js'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\nexport interface FileUploadHookResult extends FileUploadState {\n  /**\n   * Add the file without uploading it.\n   */\n  add: (params: StorageUploadFileParams) => void\n\n  /**\n   * Upload the file given as a parameter, or that has been previously added.\n   */\n  upload: (params: Partial<StorageUploadFileParams>) => Promise<UploadFileHandlerResult>\n\n  /**\n   * Cancel the ongoing upload.\n   */\n  cancel: () => void\n\n  /**\n   * @internal - used by the MultipleFilesUpload component to notice the file should be removed from the list.\n   */\n  destroy: () => void\n}\n\nexport type { FileItemRef }\n\n/**\n * Use the hook `useFileUploadItem` to control the file upload of a file in a multiple file upload.\n *\n * It has the same signature as `useFileUpload`.\n *\n * @example\n * ```tsx\n * const Item = ({itemRef}) => {\n *    const { name, progress} = useFileUploadItem(itemRef)\n *    return <li>{name} {progress}</li>\n * }\n *\n * const List = () => {\n *    const { list } = useMultipleFilesUpload()\n *    return <ul>\n *            {list.map((itemRef) => <Item key={item.id} itemRef={item} />)}\n *           </ul>\n * }\n *\n * ```\n */\nexport const useFileUploadItem = (\n  ref: FileItemRef | InterpreterFrom<FileUploadMachine>\n): FileUploadHookResult => {\n  const nhost = useNhostClient()\n\n  const add = (params: StorageUploadFileParams) => {\n    ref.send({\n      type: 'ADD',\n      file: params.file,\n      bucketId: params.bucketId || bucketId\n    })\n  }\n\n  const upload = (params: Partial<StorageUploadFileParams>) =>\n    uploadFilePromise(nhost, ref, {\n      file: params.file,\n      bucketId: params.bucketId || bucketId,\n      id,\n      name\n    })\n\n  const cancel = () => {\n    ref.send('CANCEL')\n  }\n\n  const destroy = () => {\n    ref.send('DESTROY')\n  }\n\n  const isUploading = useSelector(ref, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(ref, (state) => state.matches('uploaded'))\n  const isError = useSelector(ref, (state) => state.matches('error'))\n  const error = useSelector(ref, (state) => state.context.error || null)\n  const progress = useSelector(ref, (state) => state.context.progress)\n  const id = useSelector(ref, (state) => state.context.id)\n  const bucketId = useSelector(ref, (state) => state.context.bucketId)\n  const name = useSelector(ref, (state) => state.context.file?.name)\n\n  return {\n    add,\n    upload,\n    cancel,\n    destroy,\n    isUploaded,\n    isUploading,\n    isError,\n    error,\n    progress,\n    id,\n    bucketId,\n    name\n  }\n}\n\n/**\n * Use the hook `useFileUpload` to upload a file.\n *\n * @example\n * ```tsx\n * const {  add,\n *  upload,\n *  cancel,\n *  isUploaded,\n *  isUploading,\n *  isError,\n *  progress,\n *  id,\n *  bucketId,\n *  name\n * } = useFileUpload();\n *\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await upload({ file })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-file-upload\n */\nexport const useFileUpload = (): FileUploadHookResult => {\n  const service = useInterpret(createFileUploadMachine)\n\n  return useFileUploadItem(service)\n}\n","\nimport { useDecodedAccessToken } from './useDecodedAccessToken'\n\n/**\n * Use the hook `useHasuraClaims` to get the Hasura claims of the user.\n *\n * @example\n * ```tsx\n * const hasuraClaims = useHasuraClaims()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claims\n */\nexport const useHasuraClaims = () => {\n  const claims = useDecodedAccessToken()\n  return claims?.['https://hasura.io/jwt/claims'] || null\n}\n","import { useHasuraClaims } from './useHasuraClaims'\n\n/**\n * Use the hook `useHasuraClaim` to get the value of a specific Hasura claim of the user.\n *\n * @example\n * ```tsx\n * // if `x-hasura-company-id` exists as a custom claim\n * const companyId = useHasuraClaim('company-id')\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claim\n */\nexport const useHasuraClaim = (name: string) => {\n  const hasuraClaims = useHasuraClaims()\n  return hasuraClaims?.[name.startsWith('x-hasura-') ? name : `x-hasura-${name}`] || null\n}\n","import { useState } from 'react'\n\nimport {\n  createMultipleFilesUploadMachine,\n  FileItemRef,\n  MultipleFilesHandlerResult,\n  MultipleFilesUploadState,\n  UploadMultipleFilesActionParams,\n  uploadMultipleFilesPromise\n} from '@nhost/hasura-storage-js'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\nexport interface MultipleFilesHookResult extends MultipleFilesUploadState {\n  /**\n   * Add one or multiple files to add to the list of files to upload.\n   */\n  add: (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => void\n  /**\n   * Upload the files that has been previously added to the list.\n   */\n  upload: (params?: UploadMultipleFilesActionParams) => Promise<MultipleFilesHandlerResult>\n  /**\n   * Cancel the ongoing upload. The files that have been successfully uploaded will not be deleted from the server.\n   */\n  cancel: () => void\n  /**\n   * Clear the list of files.\n   */\n  clear: () => void\n}\n\n/**\n * Use the hook `useFileUpload` to upload multiple files.\n *\n * @example\n * ```tsx\n * const { upload, add, clear, progress, isUploaded, isUploading, files, isError, cancel } = useMultipleFilesUpload()\n *\n * const addFile = async (files: File | File[] | FileList) => {\n *   add({ files })\n * }\n *\n * const handleSubmit = async (e) => {\n *   e.preventDefault();\n *   upload()\n * }\n * ```\n * @docs https://docs.nhost.io/reference/react/use-multiple-files-upload\n */\nexport const useMultipleFilesUpload = (): MultipleFilesHookResult => {\n  const nhost = useNhostClient()\n\n  const [errors, setErrors] = useState<FileItemRef[]>([])\n  const service = useInterpret(createMultipleFilesUploadMachine, {}, (state) => {\n    if (state.event.type === 'UPLOAD_ERROR') {\n      setErrors(state.context.files.filter((ref) => ref.getSnapshot()?.context.error))\n    } else if ((state.matches('uploaded') || state.event.type === 'CLEAR') && errors.length > 0) {\n      setErrors([])\n    }\n  })\n\n  const add = (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => {\n    service.send({ type: 'ADD', ...params })\n  }\n\n  const upload = (params?: UploadMultipleFilesActionParams) =>\n    uploadMultipleFilesPromise(nhost, service, params)\n\n  const cancel = () => {\n    service.send('CANCEL')\n  }\n\n  const clear = () => {\n    service.send('CLEAR')\n  }\n\n  const isUploading = useSelector(service, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(service, (state) => state.matches('uploaded'))\n  const isError = useSelector(service, (state) => state.matches('error'))\n\n  const progress = useSelector(service, (state) => state.context.progress)\n  const files = useSelector(service, (state) => state.context.files)\n\n  return {\n    upload,\n    add,\n    clear,\n    cancel,\n    progress,\n    isUploaded,\n    isUploading,\n    files,\n    isError,\n    errors\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserData` to get the user data of the user.\n *\n * @example\n * ```tsx\n * const userData = useUserData();\n * ```\n * \n   * @example Example of user data\n```json\n{\n  \"avatarUrl\": \"https://s.gravatar.com/avatar\",\n  \"createdAt\": \"2022-04-11T16:33:14.780439+00:00\",\n  \"defaultRole\": \"user\",\n  \"displayName\": \"John Doe\",\n  \"email\": \"john@nhost.io\",\n  \"id\": \"05e054c7-a722-42e7-90a6-3f77a2f118c8\",\n  \"isAnonymous\": false,\n  \"locale\": \"en\",\n  \"metadata\": {\n    \"lastName\": \"Doe\",\n    \"firstName\": \"John\"\n  },\n  \"roles\": [\"user\", \"me\"]\n}\n```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-data\n */\nexport const useUserData = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => (a && JSON.stringify(a)) === (b && JSON.stringify(b))\n  )\n}\n","import { useMemo } from 'react'\n\nimport { useAuthenticationStatus } from './useAuthenticationStatus'\nimport { useUserData } from './useUserData'\n\n/**\n * @deprecated\n * This hook ensures backward compatibility with `@nhost/react-auth`, which is deprecated.\n */\nexport const useNhostAuth = () => {\n  const { isLoading, isAuthenticated } = useAuthenticationStatus()\n  const user = useUserData()\n  return useMemo(() => ({ isLoading, isAuthenticated, user }), [isLoading, isAuthenticated, user])\n}\n","import { useContext } from 'react'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * @deprecated Nhost services can now be split to subdomains to improve performance with CDN. Use `nhost.auth.url` or `nhost.storage.url` instead.\n * Use the hook `useNhostBackendUrl` to get the Nhost backend URL.\n *\n * @example\n * ```tsx\n * const nhostBackendUrl = useNhostBackendUrl()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-backend-url\n */\nexport const useNhostBackendUrl = () => {\n  const nhost = useContext(NhostReactContext)\n  return nhost.auth.client.backendUrl.replace('/v1/auth', '')\n}\n","import { useContext, useEffect, useState } from 'react'\n\nimport { encodeQueryParameters, Provider, ProviderOptions, rewriteRedirectTo } from '@nhost/core'\n\nimport { NhostReactContext } from './provider'\n\n/**\n *  Use the hook `useProviderLink` to get an OAuth provider URL that can be used to sign in users.\n *\n * @example\n * ```js\n * const providerLink = useProviderLink();\n * ```\n *\n * @example\n * ```jsx\n * import { useProviderLink } from '@nhost/react';\n *\n * const Component = () => {\n *   const { facebook, github } = useProviderLink();\n *\n *   return (\n *     <div>\n *       <a href={facebook}>Sign in with Facebook</a>\n *       <a href={github}>Sign in with GitHub</a>\n *     </div>\n *   );\n * };\n * ```\n */\nexport const useProviderLink = (options?: ProviderOptions) => {\n  /**\n   * @internal When using Nextjs or any SSR framework, nhost.auth.client.clientUrl will be set to `undefined`\n   * as its value is set to window.location.origin.\n   * This is because the request context is not available when setting up the client `new NhostClient()` outside of\n   * the React/Nextjs context.\n   */\n  const [isSSR, setIsSSR] = useState(true)\n\n  useEffect(() => {\n    setIsSSR(false)\n  }, [])\n\n  const nhost = useContext(NhostReactContext)\n\n  return new Proxy({} as Record<Provider, string>, {\n    get(_, provider: string) {\n      return encodeQueryParameters(\n        `${nhost.auth.client.backendUrl}/signin/provider/${provider}`,\n        rewriteRedirectTo(isSSR ? undefined : nhost.auth.client.clientUrl, options as any)\n      )\n    }\n  })\n}\n","import { useMemo } from 'react'\n\nimport {\n  createResetPasswordMachine,\n  ResetPasswordHandlerResult,\n  ResetPasswordOptions,\n  resetPasswordPromise,\n  ResetPasswordState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ResetPasswordHandler {\n  (email: string, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n}\n\nexport interface ResetPasswordHookResult extends ResetPasswordState {\n  /**\n   * Sends an email with a temporary connection link. Returns a promise with the current context\n   */\n  resetPassword: ResetPasswordHandler\n}\n\ninterface ResetPasswordHook {\n  (options?: ResetPasswordOptions): ResetPasswordHookResult\n  /** @deprecated */\n  (email?: string, options?: ResetPasswordOptions): ResetPasswordHookResult\n}\n\n/**\n * Use the hook `useResetPassword` to reset the password for a user. This will send a reset password link in an email to the user. When the user clicks on the reset-password link the user is automatically signed in and can change their password using the hook `useChangePassword`.\n *\n * @example\n * ```tsx\n * const { resetPassword, isLoading, isSent, isError, error } = useResetPassword();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await resetPassword('joe@example.com', {\n *     redirectTo: 'http://localhost:3000/settings/change-password'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-reset-password\n */\nexport const useResetPassword: ResetPasswordHook = (\n  a?: string | ResetPasswordOptions,\n  b?: ResetPasswordOptions\n) => {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a !== 'string' ? a : b\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createResetPasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const isSent = useSelector(service, (state) => state.matches('idle.success'))\n\n  const resetPassword: ResetPasswordHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    resetPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valueOptions\n    )\n\n  return { resetPassword, isLoading, isSent, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  createSendVerificationEmailMachine,\n  SendVerificationEmailHandlerResult,\n  SendVerificationEmailOptions,\n  sendVerificationEmailPromise,\n  SendVerificationEmailState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface SendVerificationEmailHandler {\n  (\n    email: string,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n  /** @deprecated */\n  (\n    email?: unknown,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n}\n\nexport interface SendVerificationEmailHookResult extends SendVerificationEmailState {\n  /** Resend the verification email. Returns a promise with the current context */\n  sendEmail: SendVerificationEmailHandler\n}\n\ninterface SendVerificationEmailHook {\n  (options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n  /** @deprecated */\n  (email?: string, options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n}\n\n/**\n * Use the hook `useSendVerificationEmail` to send a verification email. The verification email is sent to the user's email address and includes a link to verify the email address.\n *\n * @example\n * ```tsx\n * const { sendEmail, isLoading, isSent, isError, error } =\n  useSendVerificationEmail();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await sendEmail({\n *     email: 'joe@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-send-verification-email\n */\nexport const useSendVerificationEmail: SendVerificationEmailHook = (\n  a?: string | SendVerificationEmailOptions,\n  b?: SendVerificationEmailOptions\n) => {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a !== 'string' ? a : b\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createSendVerificationEmailMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSent = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const sendEmail: SendVerificationEmailHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    sendVerificationEmailPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valueOptions\n    )\n\n  return { sendEmail, isLoading, isSent, isError, error }\n}\n","import { signInAnonymousPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignInAnonymous` to sign in a user anonymously.\n *\n * As a result, the user will have the `anonymous` role and subsequent set of permissions.\n * The user can then be converted to a regular user at a later stage using email+password sign-up, passwordless email (magic link), or passwordless SMS.\n *\n * @example\n * ```tsx\n * const { signInAnonymous, isLoading, isSuccess, isError, error } = useSignInAnonymous()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInAnonymous();\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-anonymous\n */\nexport const useSignInAnonymous = () => {\n  const service = useAuthInterpreter()\n  const signInAnonymous = () => signInAnonymousPromise(service)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) =>\n    state.matches({ authentication: { authenticating: 'anonymous' } })\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isError = useSelector(service, (state) =>\n    state.matches({ authentication: { signedOut: 'failed' } })\n  )\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  return { accessToken, error, isError, isLoading, isSuccess, signInAnonymous, user }\n}\n","import { SignInMfaTotpHandlerResult } from '@nhost/core'\nimport {\n  SignInEmailPasswordHandlerResult,\n  signInEmailPasswordPromise,\n  SignInEmailPasswordState,\n  signInMfaTotpPromise\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordHandler {\n  (email: string, password: string): Promise<SignInEmailPasswordHandlerResult>\n  /** @deprecated */\n  (email?: unknown, password?: string): Promise<SignInEmailPasswordHandlerResult>\n}\n\ninterface SendMfaOtpHander {\n  (otp: string): Promise<SignInMfaTotpHandlerResult>\n  /** @deprecated */\n  (otp?: unknown): Promise<SignInMfaTotpHandlerResult>\n}\n\nexport interface SignInEmailPasswordHookResult extends SignInEmailPasswordState {\n  signInEmailPassword: SignInEmailPasswordHandler\n  sendMfaOtp: SendMfaOtpHander\n}\n\ninterface SignInEmailPasswordHook {\n  (): SignInEmailPasswordHookResult\n  /** @deprecated */\n  (email?: string, password?: string, otp?: string): SignInEmailPasswordHookResult\n}\n\n// TODO: Add MFA example once MFA is available at Nhost Cloud.\n/**\n * Use the hook `useSignInEmailPassword` to sign in a user using email and password.\n *\n * @example\n * ```tsx\n * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-password\n */\nexport const useSignInEmailPassword: SignInEmailPasswordHook = (\n  stateEmail?: string,\n  statePassword?: string,\n  stateOtp?: string\n) => {\n  const service = useAuthInterpreter()\n  const signInEmailPassword: SignInEmailPasswordHandler = (\n    valueEmail?: string | unknown,\n    valuePassword?: string\n  ) =>\n    signInEmailPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : stateEmail!,\n      typeof valuePassword === 'string' ? valuePassword : statePassword!\n    )\n\n  const sendMfaOtp: SendMfaOtpHander = (valueOtp?: string | unknown) =>\n    signInMfaTotpPromise(service, typeof valueOtp === 'string' ? valueOtp : stateOtp!)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const needsMfaOtp = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'needsMfa' } }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  const mfa = useSelector(service, (state) => state.context.mfa)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    needsMfaOtp,\n    mfa,\n    sendMfaOtp,\n    signInEmailPassword,\n    user\n  }\n}\n","import {\n  PasswordlessOptions,\n  SignInEmailPasswordlessHandlerResult,\n  SignInEmailPasswordState\n} from '@nhost/core'\nimport { signInEmailPasswordlessPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordlessHandler {\n  (email: string, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n}\n\nexport interface SignInEmailPasswordlessHookResult extends SignInEmailPasswordState {\n  /** Sends a magic link to the given email */\n  signInEmailPasswordless: SignInEmailPasswordlessHandler\n}\n\n/**\n * Use the hook `useSignInEmailPasswordless` to sign in a user using passwordless email (Magic Link).\n *\n * @example\n * ```tsx\n * const { signInEmailPasswordless, isLoading, isSuccess, isError, error } = useSignInEmailPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPasswordless('joe@example.com');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-passwordless\n */\nexport function useSignInEmailPasswordless(\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult\n\n/**\n * @deprecated\n */\nexport function useSignInEmailPasswordless(\n  email?: string,\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult\n\nexport function useSignInEmailPasswordless(\n  a?: string | PasswordlessOptions,\n  b?: PasswordlessOptions\n) {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a === 'string' ? b : a\n  const service = useAuthInterpreter()\n\n  const signInEmailPasswordless: SignInEmailPasswordlessHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    signInEmailPasswordlessPromise(\n      service,\n      (typeof valueEmail === 'string' ? valueEmail : stateEmail) as string,\n      valueOptions\n    )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) => state.matches('registration.passwordlessEmail'))\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInEmailPasswordless, isLoading, isSuccess, isError, error }\n}\n","import {\n  signInEmailSecurityKeyPromise,\n  SignInSecurityKeyPasswordlessHandlerResult,\n  SignInSecurityKeyPasswordlessState\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyPasswordlessHandler {\n  (email: string): Promise<SignInSecurityKeyPasswordlessHandlerResult>\n}\n\nexport interface SignInSecurityKeyPasswordlessHookResult\n  extends SignInSecurityKeyPasswordlessState {\n  signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler\n}\n\ninterface SignInSecurityKeyPasswordlessHook {\n  (): SignInSecurityKeyPasswordlessHookResult\n}\n\n/**\n * Use the hook `useSignInEmailSecurityKey` to sign in a user using their email and a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-web-authn\n */\nexport const useSignInEmailSecurityKey: SignInSecurityKeyPasswordlessHook = () => {\n  const service = useAuthInterpreter()\n  const signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler = (email: string) =>\n    signInEmailSecurityKeyPromise(service, email)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInEmailSecurityKey,\n    user\n  }\n}\n","import { useState } from 'react'\n\nimport {\n  PasswordlessOptions,\n  SignInSmsPasswordlessHandlerResult,\n  SignInSmsPasswordlessOtpHandlerResult,\n  SignInSmsPasswordlessState\n} from '@nhost/core'\nimport { signInSmsPasswordlessOtpPromise, signInSmsPasswordlessPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInSmsPasswordlessHandler {\n  (phoneNumber: string, options?: PasswordlessOptions): Promise<SignInSmsPasswordlessHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessOtpHandler {\n  (code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n  (phoneNumber: string, code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessHookResult extends SignInSmsPasswordlessState {\n  /** Sends a one-time code to the given phoneNumber */\n  signInSmsPasswordless: SignInSmsPasswordlessHandler\n  sendOtp: SignInSmsPasswordlessOtpHandler\n}\n\n/**\n * Use the hook `useSignInSmsPasswordless` to sign in a user with a one-time password sent via SMS to a phone.\n *\n * 1. The `signInSmsPasswordless` action sends a one-time password to the given phone number.\n * 2. The client is then awaiting the OTP. `needsOtp` equals true.\n * 3. After the code is received by SMS, the client sends the code with `sendOtp`. On success, the client is authenticated, and `isSuccess` equals `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInSmsPasswordless` and `sendOtp` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInSmsPasswordless, sendOtp, needsOtp, isLoading, isSuccess, isError, error } = useSignInSmsPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const askCode = async (e) => {\n *   e.preventDefault();\n *   await signInSmsPasswordless('+32455555555');\n * }\n *\n * const sendCode = async (e) => {\n *   e.preventDefault();\n *   await sendOtp('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-sms-passwordless\n */\nexport function useSignInSmsPasswordless(\n  stateOptions?: PasswordlessOptions\n): SignInSmsPasswordlessHookResult {\n  const service = useAuthInterpreter()\n  const [_phoneNumber, setPhoneNumber] = useState('')\n\n  const signInSmsPasswordless: SignInSmsPasswordlessHandler = (\n    phoneNumber: string,\n    valueOptions = stateOptions\n  ) => {\n    setPhoneNumber(phoneNumber)\n    return signInSmsPasswordlessPromise(service, phoneNumber, valueOptions)\n  }\n\n  const sendOtp: SignInSmsPasswordlessOtpHandler = async (...args: string[]) => {\n    if (args.length === 2) {\n      const [phoneNumber, code] = args\n      return signInSmsPasswordlessOtpPromise(service, phoneNumber, code)\n    }\n    const [code] = args\n    return signInSmsPasswordlessOtpPromise(service, _phoneNumber, code)\n  }\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service,\n    (state) =>\n      state.matches('registration.passwordlessSms') ||\n      state.matches('registration.passwordlessSmsOtp')\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInSmsPasswordless, sendOtp, isLoading, isSuccess, needsOtp, isError, error }\n}\n","import { signOutPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignOut` to sign out the user.\n *\n * @example\n * ```tsx\n * import { useSignOut, useAuthenticated } from '@nhost/react'\n *\n * const Component = () => {\n *   const { signOut } = useSignOut()\n *   const isAuthenticated = useAuthenticated()\n *\n *   if (isAuthenticated) {\n *     return (\n *       <button onClick={() => signOut()}>Sign Out</button>\n *     )\n *   }\n *\n *   return <div>Not authenticated</div>\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-out\n */\nexport const useSignOut = (stateAll: boolean = false) => {\n  const service = useAuthInterpreter()\n  const signOut = (valueAll?: boolean | unknown) =>\n    signOutPromise(service, typeof valueAll === 'boolean' ? valueAll : stateAll)\n\n  const isSuccess = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'success' } }),\n    (a, b) => a === b\n  )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.signout || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  return { signOut, isSuccess, error }\n}\n","import { signUpEmailPasswordPromise, SignUpEmailPasswordState, SignUpOptions } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpEmailPasswordHandlerResult = Omit<SignUpEmailPasswordState, 'isLoading'>\n\ninterface SignUpEmailPasswordHandler {\n  (\n    email: string,\n    password: string,\n    options?: SignUpOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n  /** @deprecated */\n  (\n    email?: unknown,\n    password?: string,\n    options?: SignUpOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n}\n\nexport interface SignUpEmailPasswordHookResult extends SignUpEmailPasswordState {\n  /** Used for a new user to sign up. Returns a promise with the current context */\n  signUpEmailPassword: SignUpEmailPasswordHandler\n}\n\ninterface SignUpEmailPasswordHook {\n  (options?: SignUpOptions): SignUpEmailPasswordHookResult\n  /** @deprecated */\n  (email?: string, password?: string, options?: SignUpOptions): SignUpEmailPasswordHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailPassword` to sign up a user using email and password.\n *\n * @example\n * ```tsx\n * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-email-password\n */\nexport const useSignUpEmailPassword: SignUpEmailPasswordHook = (\n  a?: string | SignUpOptions,\n  b?: string,\n  c?: SignUpOptions\n) => {\n  const stateEmail: string | undefined = typeof a === 'string' ? a : undefined\n  const statePassword: string | undefined = typeof b === 'string' ? b : undefined\n  const stateOptions = c || (typeof a !== 'string' ? a : undefined)\n\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.emailPassword'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailPassword: SignUpEmailPasswordHandler = (\n    valueEmail?: string | unknown,\n    valuePassword = statePassword,\n    valueOptions = stateOptions\n  ) =>\n    signUpEmailPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valuePassword as string,\n      valueOptions\n    )\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailPassword,\n    user\n  }\n}\n","import {\n  signUpEmailSecurityKeyPromise,\n  SignUpSecurityKeyOptions,\n  SignUpSecurityKeyState\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpSecurityKeyHandlerResult = Omit<SignUpSecurityKeyState, 'isLoading'>\n\ninterface SignUpSecurityKeyHandler {\n  (email: string, options?: SignUpSecurityKeyOptions): Promise<SignUpSecurityKeyHandlerResult>\n}\n\nexport interface SignUpSecurityKeyHookResult extends SignUpSecurityKeyState {\n  /** Used for a new user to sign up with a security key. Returns a promise with the current context */\n  signUpEmailSecurityKey: SignUpSecurityKeyHandler\n}\n\ninterface SignUpSecurityKeyHook {\n  (options?: SignUpSecurityKeyOptions): SignUpSecurityKeyHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailSecurityKey` to sign up a user with security key and an email using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signUpEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-security-key\n */\nexport const useSignUpEmailSecurityKeyEmail: SignUpSecurityKeyHook = (\n  hookOptions?: SignUpSecurityKeyOptions\n) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.securityKey'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailSecurityKey: SignUpSecurityKeyHandler = (email, options = hookOptions) =>\n    signUpEmailSecurityKeyPromise(service, email, options)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailSecurityKey,\n    user\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserAvatarUrl` to get the avatar URL of the user.\n *\n * @example\n * ```tsx\n * const userAvatarUrl = useUserAvatarUrl();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-avatar-url\n */\nexport const useUserAvatarUrl = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.avatarUrl,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserAvatarUrl} instead */\nexport const useAvatarUrl = useUserAvatarUrl\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDefaultRole` to get the default role of the user.\n *\n * @example\n * ```tsx\n * const userDefaultRole = useUserDefaultRole();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-default-role\n */\nexport const useUserDefaultRole = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.defaultRole,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserDefaultRole} instead */\nexport const useDefaultRole = useUserDefaultRole\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDisplayName` to get the display name of the user.\n *\n * @example\n * ```tsx\n * const userDisplayName = useUserDisplayName();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-display-name\n */\nexport const useUserDisplayName = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.displayName,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserDisplayName} instead */\nexport const useDisplayName = useUserDisplayName\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserEmail` to get the email of the user.\n *\n * @example\n * ```tsx\n * const userEmail = useUserEmail();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-email\n */\nexport const useUserEmail = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.email,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserEmail} instead */\nexport const useEmail = useUserEmail\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserId` to get the id of the user.\n *\n * @example\n * ```tsx\n * const userId = useUserId();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-id\n */\nexport const useUserId = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.id,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserIsAnonymous` to see if the user is anonymous or not.\n *\n * @example\n * ```tsx\n * const userIsAnonymous = useUserIsAnonymous();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-is-anonymous\n */\nexport const useUserIsAnonymous = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.isAnonymous,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserIsAnonymous} instead */\nexport const useIsAnonymous = useUserIsAnonymous\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserLocale` to get the locale of the user.\n *\n * @example\n * ```tsx\n * const userLocale = useUserLocale();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-locale\n */\nexport const useUserLocale = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.locale,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserRoles` to get all allowed roles of the user.\n *\n * @example\n * ```tsx\n * const userRoles = useUserRoles();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-roles\n */\nexport const useUserRoles = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.roles || [],\n    (a, b) => a.every((i) => b.includes(i) && b.every((i) => a.includes(i)))\n  )\n}\n"]},"metadata":{},"sourceType":"module"}