{"ast":null,"code":"import { useQuery, useSubscription, ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { useAuthenticated } from \"@nhost/react\";\nimport React, { useState, useEffect } from \"react\";\nimport { createApolloClient } from \"@nhost/apollo\";\nfunction useAuthQuery(query, options) {\n  const isAuthenticated = useAuthenticated();\n  const newOptions = {\n    ...options,\n    skip: (options == null ? void 0 : options.skip) || !isAuthenticated\n  };\n  return useQuery(query, newOptions);\n}\nfunction useAuthSubscription(subscription, options) {\n  const isAuthenticated = useAuthenticated();\n  const newOptions = {\n    ...options,\n    skip: (options == null ? void 0 : options.skip) || !isAuthenticated\n  };\n  return useSubscription(subscription, newOptions);\n}\nconst mockApolloClient = new ApolloClient({\n  cache: new InMemoryCache()\n});\nconst NhostApolloProvider = _ref => {\n  let {\n    children,\n    ...options\n  } = _ref;\n  const [client, setClient] = useState();\n  useEffect(() => {\n    if (!client) {\n      setClient(createApolloClient(options));\n    }\n  }, []);\n  return /* @__PURE__ */React.createElement(ApolloProvider, {\n    client: client || mockApolloClient\n  }, children);\n};\nexport { NhostApolloProvider, useAuthQuery, useAuthSubscription };","map":{"version":3,"mappings":";;;;AAWgB,sBACdA,OACAC,SACA;EACA,MAAMC,kBAAkBC;EAClB,mBAAa;IAAE,GAAGF;IAASG,OAAMH,mCAASG,SAAQ,CAACF;EAAA;EAClD,gBAASF,OAAOK,UAAU;AACnC;AAEgB,6BACdC,cACAL,SACA;EACA,MAAMC,kBAAkBC;EACxB,MAAME,aAAyD;IAC7D,GAAGJ;IACHG,OAAMH,mCAASG,SAAQ,CAACF;EAAA;EAGnB,uBAAgBI,cAAcD,UAAU;AACjD;ACvBA,MAAME,mBAAmB,IAAIC,aAAa;EAAEC,OAAO,IAAIC;AAAA,CAAiB;AAEjE,MAAMC,sBAA6E,QAGpF;EAAA,IAHqF;IACzFC;IAAA,GACGX;EACL;EAEE,MAAM,CAACY,QAAQC,SAAS,IAAIC,UAAgD;EAK5EC,UAAU,MAAM;IACd,IAAI,CAACH,QAAQ;MACDC,6BAAmBb,OAAO,CAAC;IACvC;EAGF,GAAG,EAAE;EAEL,OAAQ;IAAeY,QAAQA,UAAUN;EAAA,GAAmBK,QAAS;AACvE","names":["query","options","isAuthenticated","useAuthenticated","skip","newOptions","subscription","mockApolloClient","ApolloClient","cache","InMemoryCache","NhostApolloProvider","children","client","setClient","useState","useEffect"],"sources":["C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react-apollo\\src\\hooks.tsx","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\react-apollo\\src\\provider.tsx"],"sourcesContent":["import {\n  DocumentNode,\n  OperationVariables,\n  QueryHookOptions,\n  SubscriptionHookOptions,\n  TypedDocumentNode,\n  useQuery,\n  useSubscription\n} from '@apollo/client'\nimport { useAuthenticated } from '@nhost/react'\n\nexport function useAuthQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions = { ...options, skip: options?.skip || !isAuthenticated }\n  return useQuery(query, newOptions)\n}\n\nexport function useAuthSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions: SubscriptionHookOptions<TData, TVariables> = {\n    ...options,\n    skip: options?.skip || !isAuthenticated\n  }\n\n  return useSubscription(subscription, newOptions)\n}\n\n// TODO consider other hooks\n/*\n- useAuthLazyQuery\n- useAuthMutation\n- useRoleQuery\n- useRoleLazyQuery\n- useRoleMutation\n- useRoleSubscription\n*/\n","import React, { PropsWithChildren, useEffect, useState } from 'react'\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { createApolloClient, NhostApolloClientOptions } from '@nhost/apollo'\n\n// This is needed because ApolloProvider can't be rendered without a client. To be able to render\n// the children without our client, we need an ApolloProvider because of potential underlying\n// useQuery hooks in customer applications. This way ApolloProvider and children can be rendered.\nconst mockApolloClient = new ApolloClient({ cache: new InMemoryCache() })\n\nexport const NhostApolloProvider: React.FC<PropsWithChildren<NhostApolloClientOptions>> = ({\n  children,\n  ...options\n}) => {\n  // * See https://github.com/nhost/nhost/pull/214#pullrequestreview-889730478\n  const [client, setClient] = useState<ReturnType<typeof createApolloClient>>()\n\n  // Note: Because we're using XState under the hood, we need to make sure to start the interpreter\n  // on the client side when the component is mounted. This is why we're using `useState` and\n  // `useEffect`.\n  useEffect(() => {\n    if (!client) {\n      setClient(createApolloClient(options))\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <ApolloProvider client={client || mockApolloClient}>{children}</ApolloProvider>\n}\n"]},"metadata":{},"sourceType":"module"}