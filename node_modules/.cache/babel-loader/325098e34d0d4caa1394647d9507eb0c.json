{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nimport { NhostClient as NhostClient$1 } from \"@nhost/nhost-js\";\nimport produce from \"immer\";\nimport React, { createContext, useRef, useEffect, useContext, useState, useMemo, useCallback } from \"react\";\nimport { useInterpret, useSelector } from \"@xstate/react\";\nimport { addSecurityKeyPromise, createChangeEmailMachine, changeEmailPromise, createChangePasswordMachine, changePasswordPromise, createEnableMfaMachine, generateQrCodePromise, activateMfaPromise, encodeQueryParameters, rewriteRedirectTo, createResetPasswordMachine, resetPasswordPromise, createSendVerificationEmailMachine, sendVerificationEmailPromise, signInAnonymousPromise, signInEmailPasswordPromise, signInMfaTotpPromise, signInEmailPasswordlessPromise, signInEmailSecurityKeyPromise, signInSmsPasswordlessPromise, signInSmsPasswordlessOtpPromise, signOutPromise, signUpEmailPasswordPromise, signUpEmailSecurityKeyPromise } from \"@nhost/core\";\nimport jwt_decode from \"jwt-decode\";\nimport { createFileUploadMachine, uploadFilePromise, createMultipleFilesUploadMachine, uploadMultipleFilesPromise } from \"@nhost/hasura-storage-js\";\nclass NhostClient extends NhostClient$1 {\n  constructor(params) {\n    super(__spreadProps(__spreadValues({}, params), {\n      start: false\n    }));\n  }\n}\nconst NhostReactContext = createContext({});\nconst NhostReactProvider = _a => {\n  var _b = _a,\n    {\n      nhost,\n      initial\n    } = _b,\n    props = __objRest(_b, [\"nhost\", \"initial\"]);\n  const machine = nhost.auth.client.machine;\n  const interpreter = useInterpret(machine, {\n    devTools: nhost.devTools,\n    context: produce(machine.context, ctx => {\n      var _a2, _b2;\n      if (initial) {\n        ctx.user = initial.user;\n        ctx.refreshToken.value = (_a2 = initial.refreshToken) != null ? _a2 : null;\n        ctx.accessToken.value = (_b2 = initial.accessToken) != null ? _b2 : null;\n        ctx.accessToken.expiresAt = new Date(Date.now() + initial.accessTokenExpiresIn * 1e3);\n      }\n    })\n  }).start();\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      if (initial) {\n        interpreter.send(\"SESSION_UPDATE\", {\n          data: {\n            session: initial\n          }\n        });\n      }\n    }\n  }, [initial, interpreter]);\n  nhost.auth.client.interpreter = interpreter;\n  return /* @__PURE__ */React.createElement(NhostReactContext.Provider, {\n    value: nhost\n  }, props.children);\n};\nconst useAuthInterpreter = () => {\n  var _a;\n  const nhost = useContext(NhostReactContext);\n  const interpreter = (_a = nhost.auth) == null ? void 0 : _a.client.interpreter;\n  if (!interpreter) throw Error(\"No interpreter\");\n  return interpreter;\n};\nconst useAccessToken = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => state.context.accessToken.value);\n};\nconst useNhostClient = () => {\n  const nhost = useContext(NhostReactContext);\n  return nhost;\n};\nconst useAddSecurityKey = () => {\n  const nhost = useNhostClient();\n  const [error, setError] = useState(null);\n  const isSuccess = !error;\n  const isError = !!error;\n  const [isLoading, setIsLoading] = useState(false);\n  const add = async nickname => {\n    setIsLoading(true);\n    const result = await addSecurityKeyPromise(nhost.auth.client, nickname);\n    const {\n      error: error2\n    } = result;\n    if (error2) {\n      setError(error2);\n    }\n    setIsLoading(false);\n    return result;\n  };\n  return {\n    add,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  };\n};\nconst useAuthenticated = () => {\n  const service = useAuthInterpreter();\n  const [isAuthenticated, setIsAuthenticated] = useState(!!service.status && service.state.matches({\n    authentication: \"signedIn\"\n  }));\n  useEffect(() => {\n    const subscription = service.subscribe(state => {\n      const newValue = state.matches({\n        authentication: \"signedIn\"\n      });\n      setIsAuthenticated(newValue);\n    });\n    return subscription.unsubscribe;\n  }, [service]);\n  return isAuthenticated;\n};\nconst useAuthenticationStatus = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => ({\n    isAuthenticated: state.matches({\n      authentication: \"signedIn\"\n    }),\n    isLoading: state.hasTag(\"loading\"),\n    error: state.context.errors.authentication || null,\n    isError: state.matches({\n      authentication: {\n        signedOut: \"failed\"\n      }\n    })\n  }), (a, b) => a.isAuthenticated === b.isAuthenticated && a.isLoading === b.isLoading);\n};\nconst useAuthLoading = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => state.hasTag(\"loading\"));\n};\nfunction useChangeEmail(a, b) {\n  const stateEmail = useMemo(() => typeof a === \"string\" ? a : void 0, [a]);\n  const stateOptions = useMemo(() => typeof a !== \"string\" ? a : b, [a, b]);\n  const nhost = useNhostClient();\n  const machine = useMemo(() => createChangeEmailMachine(nhost.auth.client), [nhost]);\n  const service = useInterpret(machine);\n  const isLoading = useSelector(service, s => s.matches(\"requesting\"));\n  const error = useSelector(service, state => state.context.error);\n  const isError = useSelector(service, state => state.matches(\"idle.error\"));\n  const needsEmailVerification = useSelector(service, state => state.matches(\"idle.success\"));\n  const changeEmail = useCallback(async function (valueEmail) {\n    let valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    return changeEmailPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valueOptions);\n  }, [service, stateEmail, stateOptions]);\n  return {\n    changeEmail,\n    isLoading,\n    needsEmailVerification,\n    isError,\n    error\n  };\n}\nconst useChangePassword = statePassword => {\n  const nhost = useNhostClient();\n  const machine = useMemo(() => createChangePasswordMachine(nhost.auth.client), [nhost]);\n  const service = useInterpret(machine);\n  const isError = useSelector(service, state => state.matches({\n    idle: \"error\"\n  }));\n  const isSuccess = useSelector(service, state => state.matches({\n    idle: \"success\"\n  }));\n  const error = useSelector(service, state => state.context.error);\n  const isLoading = useSelector(service, state => state.matches(\"requesting\"));\n  const changePassword = valuePassword => changePasswordPromise(service, typeof valuePassword === \"string\" ? valuePassword : statePassword);\n  return {\n    changePassword,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  };\n};\nconst useConfigMfa = () => {\n  const nhost = useNhostClient();\n  const machine = useMemo(() => createEnableMfaMachine(nhost.auth.client), [nhost]);\n  const service = useInterpret(machine);\n  const isError = useSelector(service, state => state.matches({\n    idle: \"error\"\n  }) || state.matches({\n    generated: {\n      idle: \"error\"\n    }\n  }));\n  const isGenerating = useSelector(service, state => state.matches(\"generating\"));\n  const isGenerated = useSelector(service, state => state.matches(\"generated\"));\n  const isActivating = useSelector(service, state => state.matches({\n    generated: \"activating\"\n  }));\n  const isActivated = useSelector(service, state => state.matches({\n    generated: \"activated\"\n  }));\n  const error = useSelector(service, state => state.context.error);\n  const qrCodeDataUrl = useSelector(service, state => state.context.imageUrl || \"\");\n  const generateQrCode = () => generateQrCodePromise(service);\n  const activateMfa = code => activateMfaPromise(service, code);\n  return {\n    generateQrCode,\n    isGenerating,\n    qrCodeDataUrl,\n    isGenerated,\n    activateMfa,\n    isActivating,\n    isActivated,\n    isError,\n    error\n  };\n};\nconst useDecodedAccessToken = () => {\n  const jwt = useAccessToken();\n  return jwt ? jwt_decode(jwt) : null;\n};\nconst useFileUploadItem = ref => {\n  const nhost = useNhostClient();\n  const add = params => {\n    ref.send({\n      type: \"ADD\",\n      file: params.file,\n      bucketId: params.bucketId || bucketId\n    });\n  };\n  const upload = params => uploadFilePromise(nhost, ref, {\n    file: params.file,\n    bucketId: params.bucketId || bucketId,\n    id,\n    name\n  });\n  const cancel = () => {\n    ref.send(\"CANCEL\");\n  };\n  const destroy = () => {\n    ref.send(\"DESTROY\");\n  };\n  const isUploading = useSelector(ref, state => state.matches(\"uploading\"));\n  const isUploaded = useSelector(ref, state => state.matches(\"uploaded\"));\n  const isError = useSelector(ref, state => state.matches(\"error\"));\n  const error = useSelector(ref, state => state.context.error || null);\n  const progress = useSelector(ref, state => state.context.progress);\n  const id = useSelector(ref, state => state.context.id);\n  const bucketId = useSelector(ref, state => state.context.bucketId);\n  const name = useSelector(ref, state => {\n    var _a;\n    return (_a = state.context.file) == null ? void 0 : _a.name;\n  });\n  return {\n    add,\n    upload,\n    cancel,\n    destroy,\n    isUploaded,\n    isUploading,\n    isError,\n    error,\n    progress,\n    id,\n    bucketId,\n    name\n  };\n};\nconst useFileUpload = () => {\n  const service = useInterpret(createFileUploadMachine);\n  return useFileUploadItem(service);\n};\nconst useHasuraClaims = () => {\n  const claims = useDecodedAccessToken();\n  return (claims == null ? void 0 : claims[\"https://hasura.io/jwt/claims\"]) || null;\n};\nconst useHasuraClaim = name => {\n  const hasuraClaims = useHasuraClaims();\n  return (hasuraClaims == null ? void 0 : hasuraClaims[name.startsWith(\"x-hasura-\") ? name : `x-hasura-${name}`]) || null;\n};\nconst useMultipleFilesUpload = () => {\n  const nhost = useNhostClient();\n  const [errors, setErrors] = useState([]);\n  const service = useInterpret(createMultipleFilesUploadMachine, {}, state => {\n    if (state.event.type === \"UPLOAD_ERROR\") {\n      setErrors(state.context.files.filter(ref => {\n        var _a;\n        return (_a = ref.getSnapshot()) == null ? void 0 : _a.context.error;\n      }));\n    } else if ((state.matches(\"uploaded\") || state.event.type === \"CLEAR\") && errors.length > 0) {\n      setErrors([]);\n    }\n  });\n  const add = params => {\n    service.send(__spreadValues({\n      type: \"ADD\"\n    }, params));\n  };\n  const upload = params => uploadMultipleFilesPromise(nhost, service, params);\n  const cancel = () => {\n    service.send(\"CANCEL\");\n  };\n  const clear = () => {\n    service.send(\"CLEAR\");\n  };\n  const isUploading = useSelector(service, state => state.matches(\"uploading\"));\n  const isUploaded = useSelector(service, state => state.matches(\"uploaded\"));\n  const isError = useSelector(service, state => state.matches(\"error\"));\n  const progress = useSelector(service, state => state.context.progress);\n  const files = useSelector(service, state => state.context.files);\n  return {\n    upload,\n    add,\n    clear,\n    cancel,\n    progress,\n    isUploaded,\n    isUploading,\n    files,\n    isError,\n    errors\n  };\n};\nconst useUserData = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => state.context.user, (a, b) => (a && JSON.stringify(a)) === (b && JSON.stringify(b)));\n};\nconst useNhostAuth = () => {\n  const {\n    isLoading,\n    isAuthenticated\n  } = useAuthenticationStatus();\n  const user = useUserData();\n  return useMemo(() => ({\n    isLoading,\n    isAuthenticated,\n    user\n  }), [isLoading, isAuthenticated, user]);\n};\nconst useNhostBackendUrl = () => {\n  const nhost = useContext(NhostReactContext);\n  return nhost.auth.client.backendUrl.replace(\"/v1/auth\", \"\");\n};\nconst useProviderLink = options => {\n  const [isSSR, setIsSSR] = useState(true);\n  useEffect(() => {\n    setIsSSR(false);\n  }, []);\n  const nhost = useContext(NhostReactContext);\n  return new Proxy({}, {\n    get(_, provider) {\n      return encodeQueryParameters(`${nhost.auth.client.backendUrl}/signin/provider/${provider}`, rewriteRedirectTo(isSSR ? void 0 : nhost.auth.client.clientUrl, options));\n    }\n  });\n};\nconst useResetPassword = (a, b) => {\n  const stateEmail = typeof a === \"string\" ? a : void 0;\n  const stateOptions = typeof a !== \"string\" ? a : b;\n  const nhost = useNhostClient();\n  const machine = useMemo(() => createResetPasswordMachine(nhost.auth.client), [nhost]);\n  const service = useInterpret(machine);\n  const isLoading = useSelector(service, s => s.matches(\"requesting\"));\n  const error = useSelector(service, state => state.context.error);\n  const isError = useSelector(service, state => state.matches(\"idle.error\"));\n  const isSent = useSelector(service, state => state.matches(\"idle.success\"));\n  const resetPassword = function (valueEmail) {\n    let valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    return resetPasswordPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valueOptions);\n  };\n  return {\n    resetPassword,\n    isLoading,\n    isSent,\n    isError,\n    error\n  };\n};\nconst useSendVerificationEmail = (a, b) => {\n  const stateEmail = typeof a === \"string\" ? a : void 0;\n  const stateOptions = typeof a !== \"string\" ? a : b;\n  const nhost = useNhostClient();\n  const machine = useMemo(() => createSendVerificationEmailMachine(nhost.auth.client), [nhost]);\n  const service = useInterpret(machine);\n  const isError = useSelector(service, state => state.matches({\n    idle: \"error\"\n  }));\n  const isSent = useSelector(service, state => state.matches({\n    idle: \"success\"\n  }));\n  const error = useSelector(service, state => state.context.error);\n  const isLoading = useSelector(service, state => state.matches(\"requesting\"));\n  const sendEmail = function (valueEmail) {\n    let valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    return sendVerificationEmailPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valueOptions);\n  };\n  return {\n    sendEmail,\n    isLoading,\n    isSent,\n    isError,\n    error\n  };\n};\nconst useSignInAnonymous = () => {\n  const service = useAuthInterpreter();\n  const signInAnonymous = () => signInAnonymousPromise(service);\n  const error = useSelector(service, state => state.context.errors.authentication || null, (a, b) => (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error));\n  const isLoading = useSelector(service, state => state.matches({\n    authentication: {\n      authenticating: \"anonymous\"\n    }\n  }));\n  const isSuccess = useSelector(service, state => state.matches({\n    authentication: \"signedIn\"\n  }));\n  const isError = useSelector(service, state => state.matches({\n    authentication: {\n      signedOut: \"failed\"\n    }\n  }));\n  const user = useSelector(service, state => state.context.user, (a, b) => (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id));\n  const accessToken = useSelector(service, state => state.context.accessToken.value);\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    signInAnonymous,\n    user\n  };\n};\nconst useSignInEmailPassword = (stateEmail, statePassword, stateOtp) => {\n  const service = useAuthInterpreter();\n  const signInEmailPassword = (valueEmail, valuePassword) => signInEmailPasswordPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, typeof valuePassword === \"string\" ? valuePassword : statePassword);\n  const sendMfaOtp = valueOtp => signInMfaTotpPromise(service, typeof valueOtp === \"string\" ? valueOtp : stateOtp);\n  const user = useSelector(service, state => state.context.user, (a, b) => (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id));\n  const accessToken = useSelector(service, state => state.context.accessToken.value);\n  const error = useSelector(service, state => state.context.errors.authentication || null, (a, b) => (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error));\n  const isSuccess = useSelector(service, state => state.matches({\n    authentication: \"signedIn\"\n  }));\n  const isLoading = useSelector(service, state => state.matches({\n    authentication: {\n      authenticating: \"password\"\n    }\n  }), (a, b) => a === b);\n  const needsEmailVerification = useSelector(service, state => state.matches({\n    authentication: {\n      signedOut: \"noErrors\"\n    },\n    registration: {\n      incomplete: \"needsEmailVerification\"\n    }\n  }), (a, b) => a === b);\n  const needsMfaOtp = useSelector(service, state => state.matches({\n    authentication: {\n      signedOut: \"needsMfa\"\n    }\n  }), (a, b) => a === b);\n  const isError = useSelector(service, state => state.matches({\n    authentication: {\n      signedOut: \"failed\"\n    }\n  }), (a, b) => a === b);\n  const mfa = useSelector(service, state => state.context.mfa);\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    needsMfaOtp,\n    mfa,\n    sendMfaOtp,\n    signInEmailPassword,\n    user\n  };\n};\nfunction useSignInEmailPasswordless(a, b) {\n  const stateEmail = typeof a === \"string\" ? a : void 0;\n  const stateOptions = typeof a === \"string\" ? b : a;\n  const service = useAuthInterpreter();\n  const signInEmailPasswordless = function (valueEmail) {\n    let valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    return signInEmailPasswordlessPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valueOptions);\n  };\n  const error = useSelector(service, state => state.context.errors.registration || null, (a2, b2) => (a2 == null ? void 0 : a2.error) === (b2 == null ? void 0 : b2.error));\n  const isLoading = useSelector(service, state => state.matches(\"registration.passwordlessEmail\"));\n  const isSuccess = useSelector(service, state => state.matches(\"registration.incomplete.needsEmailVerification\"));\n  const isError = useSelector(service, state => state.matches(\"registration.incomplete.failed\"));\n  return {\n    signInEmailPasswordless,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  };\n}\nconst useSignInEmailSecurityKey = () => {\n  const service = useAuthInterpreter();\n  const signInEmailSecurityKey = email => signInEmailSecurityKeyPromise(service, email);\n  const user = useSelector(service, state => state.context.user, (a, b) => (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id));\n  const accessToken = useSelector(service, state => state.context.accessToken.value);\n  const error = useSelector(service, state => state.context.errors.authentication || null, (a, b) => (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error));\n  const isSuccess = useSelector(service, state => state.matches({\n    authentication: \"signedIn\"\n  }));\n  const isLoading = useSelector(service, state => state.matches({\n    authentication: {\n      authenticating: \"securityKeyEmail\"\n    }\n  }), (a, b) => a === b);\n  const needsEmailVerification = useSelector(service, state => state.matches({\n    authentication: {\n      signedOut: \"noErrors\"\n    },\n    registration: {\n      incomplete: \"needsEmailVerification\"\n    }\n  }), (a, b) => a === b);\n  const isError = useSelector(service, state => state.matches({\n    authentication: {\n      signedOut: \"failed\"\n    }\n  }), (a, b) => a === b);\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInEmailSecurityKey,\n    user\n  };\n};\nfunction useSignInSmsPasswordless(stateOptions) {\n  const service = useAuthInterpreter();\n  const [_phoneNumber, setPhoneNumber] = useState(\"\");\n  const signInSmsPasswordless = function (phoneNumber) {\n    let valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stateOptions;\n    setPhoneNumber(phoneNumber);\n    return signInSmsPasswordlessPromise(service, phoneNumber, valueOptions);\n  };\n  const sendOtp = async function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 2) {\n      const [phoneNumber, code2] = args;\n      return signInSmsPasswordlessOtpPromise(service, phoneNumber, code2);\n    }\n    const [code] = args;\n    return signInSmsPasswordlessOtpPromise(service, _phoneNumber, code);\n  };\n  const error = useSelector(service, state => state.context.errors.registration || null, (a, b) => (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error));\n  const isLoading = useSelector(service, state => state.matches(\"registration.passwordlessSms\") || state.matches(\"registration.passwordlessSmsOtp\"));\n  const isSuccess = useSelector(service, state => state.matches(\"authentication.signedIn\"));\n  const needsOtp = useSelector(service, state => state.matches(\"registration.incomplete.needsOtp\"));\n  const isError = useSelector(service, state => state.matches(\"registration.incomplete.failed\"));\n  return {\n    signInSmsPasswordless,\n    sendOtp,\n    isLoading,\n    isSuccess,\n    needsOtp,\n    isError,\n    error\n  };\n}\nconst useSignOut = function () {\n  let stateAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const service = useAuthInterpreter();\n  const signOut = valueAll => signOutPromise(service, typeof valueAll === \"boolean\" ? valueAll : stateAll);\n  const isSuccess = useSelector(service, state => state.matches({\n    authentication: {\n      signedOut: \"success\"\n    }\n  }), (a, b) => a === b);\n  const error = useSelector(service, state => state.context.errors.signout || null, (a, b) => (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error));\n  return {\n    signOut,\n    isSuccess,\n    error\n  };\n};\nconst useSignUpEmailPassword = (a, b, c) => {\n  const stateEmail = typeof a === \"string\" ? a : void 0;\n  const statePassword = typeof b === \"string\" ? b : void 0;\n  const stateOptions = c || (typeof a !== \"string\" ? a : void 0);\n  const service = useAuthInterpreter();\n  const isError = useSelector(service, state => !!state.context.errors.registration);\n  const error = useSelector(service, state => state.context.errors.registration || null, (a2, b2) => (a2 == null ? void 0 : a2.error) === (b2 == null ? void 0 : b2.error));\n  const isLoading = useSelector(service, state => state.matches(\"registration.emailPassword\"));\n  const needsEmailVerification = useSelector(service, state => state.matches(\"registration.incomplete.needsEmailVerification\"));\n  const isSuccess = useSelector(service, state => state.matches({\n    authentication: \"signedIn\",\n    registration: \"complete\"\n  }));\n  const signUpEmailPassword = function (valueEmail) {\n    let valuePassword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : statePassword;\n    let valueOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stateOptions;\n    return signUpEmailPasswordPromise(service, typeof valueEmail === \"string\" ? valueEmail : stateEmail, valuePassword, valueOptions);\n  };\n  const user = useSelector(service, state => state.context.user, (a2, b2) => (a2 == null ? void 0 : a2.id) === (b2 == null ? void 0 : b2.id));\n  const accessToken = useSelector(service, state => state.context.accessToken.value);\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailPassword,\n    user\n  };\n};\nconst useSignUpEmailSecurityKeyEmail = hookOptions => {\n  const service = useAuthInterpreter();\n  const isError = useSelector(service, state => !!state.context.errors.registration);\n  const error = useSelector(service, state => state.context.errors.registration || null, (a, b) => (a == null ? void 0 : a.error) === (b == null ? void 0 : b.error));\n  const isLoading = useSelector(service, state => state.matches(\"registration.securityKey\"));\n  const needsEmailVerification = useSelector(service, state => state.matches(\"registration.incomplete.needsEmailVerification\"));\n  const isSuccess = useSelector(service, state => state.matches({\n    authentication: \"signedIn\",\n    registration: \"complete\"\n  }));\n  const signUpEmailSecurityKey = function (email) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : hookOptions;\n    return signUpEmailSecurityKeyPromise(service, email, options);\n  };\n  const user = useSelector(service, state => state.context.user, (a, b) => (a == null ? void 0 : a.id) === (b == null ? void 0 : b.id));\n  const accessToken = useSelector(service, state => state.context.accessToken.value);\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailSecurityKey,\n    user\n  };\n};\nconst useUserAvatarUrl = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.avatarUrl;\n  }, (a, b) => a === b);\n};\nconst useAvatarUrl = useUserAvatarUrl;\nconst useUserDefaultRole = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.defaultRole;\n  }, (a, b) => a === b);\n};\nconst useDefaultRole = useUserDefaultRole;\nconst useUserDisplayName = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.displayName;\n  }, (a, b) => a === b);\n};\nconst useDisplayName = useUserDisplayName;\nconst useUserEmail = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.email;\n  }, (a, b) => a === b);\n};\nconst useEmail = useUserEmail;\nconst useUserId = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.id;\n  }, (a, b) => a === b);\n};\nconst useUserIsAnonymous = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.isAnonymous;\n  }, (a, b) => a === b);\n};\nconst useIsAnonymous = useUserIsAnonymous;\nconst useUserLocale = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => {\n    var _a;\n    return (_a = state.context.user) == null ? void 0 : _a.locale;\n  }, (a, b) => a === b);\n};\nconst useUserRoles = () => {\n  const service = useAuthInterpreter();\n  return useSelector(service, state => {\n    var _a;\n    return ((_a = state.context.user) == null ? void 0 : _a.roles) || [];\n  }, (a, b) => a.every(i => b.includes(i) && b.every(i2 => a.includes(i2))));\n};\nexport { NhostClient, NhostReactContext, NhostReactProvider, useAccessToken, useAddSecurityKey, useAuthInterpreter, useAuthLoading, useAuthenticated, useAuthenticationStatus, useAvatarUrl, useChangeEmail, useChangePassword, useConfigMfa, useDecodedAccessToken, useDefaultRole, useDisplayName, useEmail, useFileUpload, useFileUploadItem, useHasuraClaim, useHasuraClaims, useIsAnonymous, useMultipleFilesUpload, useNhostAuth, useNhostBackendUrl, useNhostClient, useProviderLink, useResetPassword, useSendVerificationEmail, useSignInAnonymous, useSignInEmailPassword, useSignInEmailPasswordless, useSignInEmailSecurityKey, useSignInSmsPasswordless, useSignOut, useSignUpEmailPassword, useSignUpEmailSecurityKeyEmail, useUserAvatarUrl, useUserData, useUserDefaultRole, useUserDisplayName, useUserEmail, useUserId, useUserIsAnonymous, useUserLocale, useUserRoles };","map":{"version":3,"mappings":"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","names":["NhostClient","VanillaClient","constructor","params","__spreadProps","start","createContext","NhostReactProvider","_a","nhost","initial","_b","props","auth","client","machine","useInterpret","devTools","context","produce","ctx","user","value","refreshToken","accessToken","expiresAt","Date","now","accessTokenExpiresIn","useRef","useEffect","isInitialMount","current","interpreter","data","session","NhostReactContext","Provider","children","useAuthInterpreter","useContext","Error","useAccessToken","service","useSelector","state","useNhostClient","useAddSecurityKey","error","setError","useState","isSuccess","isLoading","setIsLoading","nickname","result","addSecurityKeyPromise","error2","add","isError","useAuthenticated","isAuthenticated","setIsAuthenticated","status","matches","authentication","subscription","subscribe","newValue","unsubscribe","useAuthenticationStatus","hasTag","errors","signedOut","a","b","useAuthLoading","useMemo","createChangeEmailMachine","s","changeEmail","useCallback","valueEmail","valueOptions","stateOptions","changeEmailPromise","stateEmail","needsEmailVerification","statePassword","createChangePasswordMachine","idle","valuePassword","changePasswordPromise","changePassword","useConfigMfa","createEnableMfaMachine","generated","imageUrl","generateQrCodePromise","activateMfa","code","activateMfaPromise","generateQrCode","isGenerating","qrCodeDataUrl","isGenerated","isActivating","isActivated","useDecodedAccessToken","jwt","jwt_decode","ref","send","type","file","bucketId","upload","uploadFilePromise","id","name","cancel","destroy","progress","isUploaded","isUploading","useFileUpload","createFileUploadMachine","useFileUploadItem","useHasuraClaims","claims","hasuraClaims","startsWith","useMultipleFilesUpload","setErrors","createMultipleFilesUploadMachine","event","files","filter","getSnapshot","length","__spreadValues","uploadMultipleFilesPromise","clear","useUserData","stringify","JSON","useNhostAuth","useNhostBackendUrl","backendUrl","replace","options","isSSR","setIsSSR","Proxy","get","_","provider","encodeQueryParameters","rewriteRedirectTo","clientUrl","createResetPasswordMachine","resetPassword","resetPasswordPromise","isSent","createSendVerificationEmailMachine","sendEmail","sendVerificationEmailPromise","useSignInAnonymous","signInAnonymousPromise","authenticating","signInAnonymous","useSignInEmailPassword","stateOtp","signInEmailPassword","signInEmailPasswordPromise","valueOtp","signInMfaTotpPromise","registration","incomplete","needsMfaOtp","mfa","sendMfaOtp","signInEmailPasswordless","signInEmailPasswordlessPromise","a2","b2","useSignInEmailSecurityKey","signInEmailSecurityKey","email","signInEmailSecurityKeyPromise","_phoneNumber","setPhoneNumber","signInSmsPasswordless","phoneNumber","args","code2","sendOtp","needsOtp","stateAll","valueAll","signOutPromise","signout","signOut","useSignUpEmailPassword","c","signUpEmailPassword","signUpEmailPasswordPromise","hookOptions","signUpEmailSecurityKeyPromise","signUpEmailSecurityKey","useUserAvatarUrl","avatarUrl","useAvatarUrl","useUserDefaultRole","defaultRole","useDefaultRole","useUserDisplayName","displayName","useDisplayName","useUserEmail","useEmail","useUserId","useUserIsAnonymous","isAnonymous","useIsAnonymous","useUserLocale","locale","useUserRoles","roles","every","i","includes","i2"],"sources":["C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\client.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\provider.tsx","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useAuthInterpreter.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useAccessToken.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useNhostClient.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useAddSecurityKey.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useAuthenticated.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useAuthenticationStatus.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useAuthLoading.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useChangeEmail.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useChangePassword.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useConfigMfa.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useDecodedAccessToken.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useFileUpload.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useHasuraClaims.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useHasuraClaim.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useMultipleFilesUpload.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserData.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useNhostAuth.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useNhostBackendUrl.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useProviderLink.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useResetPassword.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSendVerificationEmail.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSignInAnonymous.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSignInEmailPassword.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSignInEmailPasswordless.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSignInEmailSecurityKey.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSignInSmsPasswordless.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSignOut.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSignUpEmailPassword.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useSignUpEmailSecurityKey.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserAvatarUrl.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserDefaultRole.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserDisplayName.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserEmail.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserId.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserIsAnonymous.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserLocale.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\react\\src\\useUserRoles.ts"],"sourcesContent":["import { Subdomain } from '@nhost/nhost-js'\nimport { BackendUrl } from '@nhost/nhost-js'\nimport { NhostAuthConstructorParams, NhostClient as VanillaClient } from '@nhost/nhost-js'\n\nexport interface NhostReactClientConstructorParams\n  extends Partial<BackendUrl>,\n    Partial<Subdomain>,\n    Omit<NhostAuthConstructorParams, 'url' | 'start' | 'client'> {}\n\nexport class NhostClient extends VanillaClient {\n  constructor(params: NhostReactClientConstructorParams) {\n    super({ ...params, start: false })\n  }\n}\n","import produce from 'immer'\nimport React, { createContext, PropsWithChildren, useEffect, useRef } from 'react'\n\nimport { AuthContext, NhostSession } from '@nhost/core'\nimport { NhostClient } from '@nhost/nhost-js'\nimport { useInterpret } from '@xstate/react'\n\nexport const NhostReactContext = createContext<NhostClient>({} as NhostClient)\nexport interface NhostReactProviderProps {\n  nhost: NhostClient\n  initial?: NhostSession\n}\n\nexport const NhostReactProvider: React.FC<PropsWithChildren<NhostReactProviderProps>> = ({\n  nhost,\n  initial,\n  ...props\n}) => {\n  const machine = nhost.auth.client.machine\n  const interpreter = useInterpret(machine, {\n    devTools: nhost.devTools,\n    context: produce<AuthContext>(machine.context, (ctx: AuthContext) => {\n      if (initial) {\n        ctx.user = initial.user\n        ctx.refreshToken.value = initial.refreshToken ?? null\n        ctx.accessToken.value = initial.accessToken ?? null\n        ctx.accessToken.expiresAt = new Date(Date.now() + initial.accessTokenExpiresIn * 1_000)\n      }\n    })\n  }).start()\n\n  // * Hook to send session update everytime the 'initial' props changed\n  const isInitialMount = useRef(true)\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false\n    } else {\n      if (initial) {\n        interpreter.send('SESSION_UPDATE', { data: { session: initial } })\n      }\n    }\n  }, [initial, interpreter])\n\n  nhost.auth.client.interpreter = interpreter\n  return <NhostReactContext.Provider value={nhost}>{props.children}</NhostReactContext.Provider>\n}\n","import { useContext } from 'react'\nimport { InterpreterFrom } from 'xstate'\n\nimport { AuthMachine } from '@nhost/core'\n\nimport { NhostReactContext } from './provider'\n\n/** @internal */\nexport const useAuthInterpreter = (): InterpreterFrom<AuthMachine> => {\n  const nhost = useContext(NhostReactContext)\n  const interpreter = nhost.auth?.client.interpreter\n  if (!interpreter) throw Error('No interpreter')\n  return interpreter\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAccessToken` to get the access token of the user.\n *\n * @example\n * ```ts\n * const accessToken = useAccessToken();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAccessToken = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.context.accessToken.value)\n}\n","import { useContext } from 'react'\n\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * Use the hook `useNhostClient` to get the Nhost JavaScript client (https://docs.nhost.io/reference/javascript).\n *\n * @example\n * ```tsx\n * const nhost = useNhostClient()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-client\n */\nexport const useNhostClient = (): NhostClient => {\n  const nhost = useContext(NhostReactContext)\n  return nhost\n}\n","import { useState } from 'react'\n\nimport {\n  ActionErrorState,\n  ActionSuccessState,\n  AddSecurityKeyHandlerResult,\n  addSecurityKeyPromise,\n  ErrorPayload\n} from '@nhost/core'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface AddSecurityKeyHandler {\n  (\n    /** Optional human-readable name of the security key */\n    nickname?: string\n  ): Promise<AddSecurityKeyHandlerResult>\n}\n\nexport interface AddSecuritKeyHookResult extends ActionErrorState, ActionSuccessState {\n  /** Add a security key to the current user with the WebAuthn API */\n  add: AddSecurityKeyHandler\n}\n\ninterface AddSecuritKeyHook {\n  (): AddSecuritKeyHookResult\n}\n\n/**\n * Use the hook `useAddSecurityKey` to add a WebAuthn security key.\n *\n * @example\n * ```tsx\n * const { add, isLoading, isSuccess, isError, error } = useAddSecurityKey()\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await add('key nickname')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-add-security-key\n */\nexport const useAddSecurityKey: AddSecuritKeyHook = () => {\n  const nhost = useNhostClient()\n  const [error, setError] = useState<ErrorPayload | null>(null)\n  const isSuccess = !error\n  const isError = !!error\n\n  const [isLoading, setIsLoading] = useState(false)\n\n  const add: AddSecurityKeyHandler = async (nickname) => {\n    setIsLoading(true)\n    const result = await addSecurityKeyPromise(nhost.auth.client, nickname)\n    const { error } = result\n    if (error) {\n      setError(error)\n    }\n    setIsLoading(false)\n    return result\n  }\n\n  return { add, isLoading, isSuccess, isError, error }\n}\n","import { useEffect, useState } from 'react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticated` to get the authentication status of the user.\n *\n * @example\n * ```ts\n * const isAuthenticated = useAuthenticated();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-access-token\n */\nexport const useAuthenticated = () => {\n  const service = useAuthInterpreter()\n  const [isAuthenticated, setIsAuthenticated] = useState(\n    !!service.status && service.state.matches({ authentication: 'signedIn' })\n  )\n  useEffect(() => {\n    const subscription = service.subscribe((state) => {\n      const newValue = state.matches({ authentication: 'signedIn' })\n      setIsAuthenticated(newValue)\n    })\n    return subscription.unsubscribe\n  }, [service])\n  return isAuthenticated\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use `useAuthenticationStatus` to get the authentication status for the user.\n *\n * @example\n * ```tsx\n * const { isAuthenticated, isLoading } = useAuthenticationStatus();\n * ```\n */\nexport const useAuthenticationStatus = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => ({\n      isAuthenticated: state.matches({ authentication: 'signedIn' }),\n      isLoading: state.hasTag('loading'),\n      error: state.context.errors.authentication || null,\n      isError: state.matches({ authentication: { signedOut: 'failed' } })\n    }),\n    (a, b) => a.isAuthenticated === b.isAuthenticated && a.isLoading === b.isLoading\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * @deprecated\n * When using both {@link useAuthLoading} and {@link useAuthenticated} together, their initial state will change\n * three times:\n *\n * `(true, false)` -> `(false, false)` -> `(false, true)`\n *\n * Use {@link useAuthenticationStatus} instead.\n */\nexport const useAuthLoading = () => {\n  const service = useAuthInterpreter()\n  return useSelector(service, (state) => state.hasTag('loading'))\n}\n","import { useCallback, useMemo } from 'react'\n\nimport {\n  ChangeEmailHandlerResult,\n  ChangeEmailOptions,\n  changeEmailPromise,\n  ChangeEmailState,\n  createChangeEmailMachine\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangeEmailHandler {\n  (email: string, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: ChangeEmailOptions): Promise<ChangeEmailHandlerResult>\n}\n\nexport interface ChangeEmailHookResult extends ChangeEmailState {\n  /** Requests the email change. Returns a promise with the current context  */\n  changeEmail: ChangeEmailHandler\n}\n\n/**\n * Use the hook `useChangeEmail` to change email for the user.\n *\n * @example\n * ```tsx\n * const { changeEmail, isLoading, needsEmailVerification, isError, error } = useChangeEmail();\n *\n * console.log({ isLoading, needsEmailVerification, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changeEmail({\n *     email: 'new@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-email\n */\nexport function useChangeEmail(options?: ChangeEmailOptions): ChangeEmailHookResult\n\n/**\n * @deprecated\n */\nexport function useChangeEmail(email?: string, options?: ChangeEmailOptions): ChangeEmailHookResult\n\nexport function useChangeEmail(a?: string | ChangeEmailOptions, b?: ChangeEmailOptions) {\n  const stateEmail = useMemo(() => (typeof a === 'string' ? a : undefined), [a])\n  const stateOptions = useMemo(() => (typeof a !== 'string' ? a : b), [a, b])\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangeEmailMachine(nhost.auth.client), [nhost])\n\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const needsEmailVerification = useSelector(service, (state) => state.matches('idle.success'))\n\n  const changeEmail: ChangeEmailHandler = useCallback(\n    async (valueEmail?: string | unknown, valueOptions = stateOptions) =>\n      changeEmailPromise(\n        service,\n        typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n        valueOptions\n      ),\n    [service, stateEmail, stateOptions]\n  )\n\n  return { changeEmail, isLoading, needsEmailVerification, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  ActionErrorState,\n  ActionSuccessState,\n  ChangePasswordHandlerResult,\n  changePasswordPromise,\n  createChangePasswordMachine\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ChangePasswordHandler {\n  (password: string): Promise<ChangePasswordHandlerResult>\n  /** @deprecated */\n  (password?: unknown): Promise<ChangePasswordHandlerResult>\n}\n\nexport interface ChangePasswordHookResult extends ActionErrorState, ActionSuccessState {\n  /** Requests the password change. Returns a promise with the current context */\n  changePassword: ChangePasswordHandler\n}\n\ninterface ChangePasswordHook {\n  (): ChangePasswordHookResult\n  /** @deprecated */\n  (email?: string): ChangePasswordHookResult\n}\n\n/**\n * Use the hook `useChangePassword` to change password for the user.\n *\n * @example\n * ```tsx\n * const { changePassword, isLoading, isSuccess, isError, error } = useChangePassword();\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await changePassword('my-new-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-change-password\n */\nexport const useChangePassword: ChangePasswordHook = (statePassword?: string) => {\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createChangePasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSuccess = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const changePassword: ChangePasswordHandler = (valuePassword?: string | unknown) =>\n    changePasswordPromise(\n      service,\n      typeof valuePassword === 'string' ? valuePassword : (statePassword as string)\n    )\n\n  return { changePassword, isLoading, isSuccess, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  ActivateMfaHandlerResult,\n  activateMfaPromise,\n  ActivateMfaState,\n  createEnableMfaMachine,\n  GenerateQrCodeHandlerResult,\n  generateQrCodePromise,\n  GenerateQrCodeState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ConfigMfaState extends ActivateMfaState, GenerateQrCodeState {\n  generateQrCode: () => Promise<GenerateQrCodeHandlerResult>\n  activateMfa: (code: string) => Promise<ActivateMfaHandlerResult>\n}\n\n// TODO documentation when available in Nhost Cloud - see changelog\nexport const useConfigMfa = (): ConfigMfaState => {\n  const nhost = useNhostClient()\n\n  const machine = useMemo(() => createEnableMfaMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ idle: 'error' }) || state.matches({ generated: { idle: 'error' } })\n  )\n  const isGenerating = useSelector(service, (state) => state.matches('generating'))\n  const isGenerated = useSelector(service, (state) => state.matches('generated'))\n  const isActivating = useSelector(service, (state) => state.matches({ generated: 'activating' }))\n  const isActivated = useSelector(service, (state) => state.matches({ generated: 'activated' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const qrCodeDataUrl = useSelector(service, (state) => state.context.imageUrl || '')\n\n  const generateQrCode = () => generateQrCodePromise(service)\n\n  const activateMfa = (code: string) => activateMfaPromise(service, code)\n\n  return {\n    generateQrCode,\n    isGenerating,\n    qrCodeDataUrl,\n    isGenerated,\n    activateMfa,\n    isActivating,\n    isActivated,\n    isError,\n    error\n  }\n}\n","import jwt_decode from 'jwt-decode'\n\nimport { JWTClaims } from '@nhost/core'\n\nimport { useAccessToken } from './useAccessToken'\n\n/**\n * Use the hook `useDecodedAccessToken` to get the decoded access token of the user.\n *\n * @example\n * ```tsx\n * const decodedAccessToken = useDecodedAccessToken()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-decoded-access-token\n */\nexport const useDecodedAccessToken = () => {\n  const jwt = useAccessToken()\n  return jwt ? jwt_decode<JWTClaims>(jwt) : null\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport {\n  createFileUploadMachine,\n  FileItemRef,\n  FileUploadMachine,\n  FileUploadState,\n  StorageUploadFileParams,\n  UploadFileHandlerResult,\n  uploadFilePromise\n} from '@nhost/hasura-storage-js'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\nexport interface FileUploadHookResult extends FileUploadState {\n  /**\n   * Add the file without uploading it.\n   */\n  add: (params: StorageUploadFileParams) => void\n\n  /**\n   * Upload the file given as a parameter, or that has been previously added.\n   */\n  upload: (params: Partial<StorageUploadFileParams>) => Promise<UploadFileHandlerResult>\n\n  /**\n   * Cancel the ongoing upload.\n   */\n  cancel: () => void\n\n  /**\n   * @internal - used by the MultipleFilesUpload component to notice the file should be removed from the list.\n   */\n  destroy: () => void\n}\n\nexport type { FileItemRef }\n\n/**\n * Use the hook `useFileUploadItem` to control the file upload of a file in a multiple file upload.\n *\n * It has the same signature as `useFileUpload`.\n *\n * @example\n * ```tsx\n * const Item = ({itemRef}) => {\n *    const { name, progress} = useFileUploadItem(itemRef)\n *    return <li>{name} {progress}</li>\n * }\n *\n * const List = () => {\n *    const { list } = useMultipleFilesUpload()\n *    return <ul>\n *            {list.map((itemRef) => <Item key={item.id} itemRef={item} />)}\n *           </ul>\n * }\n *\n * ```\n */\nexport const useFileUploadItem = (\n  ref: FileItemRef | InterpreterFrom<FileUploadMachine>\n): FileUploadHookResult => {\n  const nhost = useNhostClient()\n\n  const add = (params: StorageUploadFileParams) => {\n    ref.send({\n      type: 'ADD',\n      file: params.file,\n      bucketId: params.bucketId || bucketId\n    })\n  }\n\n  const upload = (params: Partial<StorageUploadFileParams>) =>\n    uploadFilePromise(nhost, ref, {\n      file: params.file,\n      bucketId: params.bucketId || bucketId,\n      id,\n      name\n    })\n\n  const cancel = () => {\n    ref.send('CANCEL')\n  }\n\n  const destroy = () => {\n    ref.send('DESTROY')\n  }\n\n  const isUploading = useSelector(ref, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(ref, (state) => state.matches('uploaded'))\n  const isError = useSelector(ref, (state) => state.matches('error'))\n  const error = useSelector(ref, (state) => state.context.error || null)\n  const progress = useSelector(ref, (state) => state.context.progress)\n  const id = useSelector(ref, (state) => state.context.id)\n  const bucketId = useSelector(ref, (state) => state.context.bucketId)\n  const name = useSelector(ref, (state) => state.context.file?.name)\n\n  return {\n    add,\n    upload,\n    cancel,\n    destroy,\n    isUploaded,\n    isUploading,\n    isError,\n    error,\n    progress,\n    id,\n    bucketId,\n    name\n  }\n}\n\n/**\n * Use the hook `useFileUpload` to upload a file.\n *\n * @example\n * ```tsx\n * const {  add,\n *  upload,\n *  cancel,\n *  isUploaded,\n *  isUploading,\n *  isError,\n *  progress,\n *  id,\n *  bucketId,\n *  name\n * } = useFileUpload();\n *\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await upload({ file })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-file-upload\n */\nexport const useFileUpload = (): FileUploadHookResult => {\n  const service = useInterpret(createFileUploadMachine)\n\n  return useFileUploadItem(service)\n}\n","\nimport { useDecodedAccessToken } from './useDecodedAccessToken'\n\n/**\n * Use the hook `useHasuraClaims` to get the Hasura claims of the user.\n *\n * @example\n * ```tsx\n * const hasuraClaims = useHasuraClaims()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claims\n */\nexport const useHasuraClaims = () => {\n  const claims = useDecodedAccessToken()\n  return claims?.['https://hasura.io/jwt/claims'] || null\n}\n","import { useHasuraClaims } from './useHasuraClaims'\n\n/**\n * Use the hook `useHasuraClaim` to get the value of a specific Hasura claim of the user.\n *\n * @example\n * ```tsx\n * // if `x-hasura-company-id` exists as a custom claim\n * const companyId = useHasuraClaim('company-id')\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-hasura-claim\n */\nexport const useHasuraClaim = (name: string) => {\n  const hasuraClaims = useHasuraClaims()\n  return hasuraClaims?.[name.startsWith('x-hasura-') ? name : `x-hasura-${name}`] || null\n}\n","import { useState } from 'react'\n\nimport {\n  createMultipleFilesUploadMachine,\n  FileItemRef,\n  MultipleFilesHandlerResult,\n  MultipleFilesUploadState,\n  UploadMultipleFilesActionParams,\n  uploadMultipleFilesPromise\n} from '@nhost/hasura-storage-js'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\nexport interface MultipleFilesHookResult extends MultipleFilesUploadState {\n  /**\n   * Add one or multiple files to add to the list of files to upload.\n   */\n  add: (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => void\n  /**\n   * Upload the files that has been previously added to the list.\n   */\n  upload: (params?: UploadMultipleFilesActionParams) => Promise<MultipleFilesHandlerResult>\n  /**\n   * Cancel the ongoing upload. The files that have been successfully uploaded will not be deleted from the server.\n   */\n  cancel: () => void\n  /**\n   * Clear the list of files.\n   */\n  clear: () => void\n}\n\n/**\n * Use the hook `useFileUpload` to upload multiple files.\n *\n * @example\n * ```tsx\n * const { upload, add, clear, progress, isUploaded, isUploading, files, isError, cancel } = useMultipleFilesUpload()\n *\n * const addFile = async (files: File | File[] | FileList) => {\n *   add({ files })\n * }\n *\n * const handleSubmit = async (e) => {\n *   e.preventDefault();\n *   upload()\n * }\n * ```\n * @docs https://docs.nhost.io/reference/react/use-multiple-files-upload\n */\nexport const useMultipleFilesUpload = (): MultipleFilesHookResult => {\n  const nhost = useNhostClient()\n\n  const [errors, setErrors] = useState<FileItemRef[]>([])\n  const service = useInterpret(createMultipleFilesUploadMachine, {}, (state) => {\n    if (state.event.type === 'UPLOAD_ERROR') {\n      setErrors(state.context.files.filter((ref) => ref.getSnapshot()?.context.error))\n    } else if ((state.matches('uploaded') || state.event.type === 'CLEAR') && errors.length > 0) {\n      setErrors([])\n    }\n  })\n\n  const add = (\n    params: Required<Pick<UploadMultipleFilesActionParams, 'files'>> &\n      UploadMultipleFilesActionParams\n  ) => {\n    service.send({ type: 'ADD', ...params })\n  }\n\n  const upload = (params?: UploadMultipleFilesActionParams) =>\n    uploadMultipleFilesPromise(nhost, service, params)\n\n  const cancel = () => {\n    service.send('CANCEL')\n  }\n\n  const clear = () => {\n    service.send('CLEAR')\n  }\n\n  const isUploading = useSelector(service, (state) => state.matches('uploading'))\n  const isUploaded = useSelector(service, (state) => state.matches('uploaded'))\n  const isError = useSelector(service, (state) => state.matches('error'))\n\n  const progress = useSelector(service, (state) => state.context.progress)\n  const files = useSelector(service, (state) => state.context.files)\n\n  return {\n    upload,\n    add,\n    clear,\n    cancel,\n    progress,\n    isUploaded,\n    isUploading,\n    files,\n    isError,\n    errors\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserData` to get the user data of the user.\n *\n * @example\n * ```tsx\n * const userData = useUserData();\n * ```\n * \n   * @example Example of user data\n```json\n{\n  \"avatarUrl\": \"https://s.gravatar.com/avatar\",\n  \"createdAt\": \"2022-04-11T16:33:14.780439+00:00\",\n  \"defaultRole\": \"user\",\n  \"displayName\": \"John Doe\",\n  \"email\": \"john@nhost.io\",\n  \"id\": \"05e054c7-a722-42e7-90a6-3f77a2f118c8\",\n  \"isAnonymous\": false,\n  \"locale\": \"en\",\n  \"metadata\": {\n    \"lastName\": \"Doe\",\n    \"firstName\": \"John\"\n  },\n  \"roles\": [\"user\", \"me\"]\n}\n```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-data\n */\nexport const useUserData = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => (a && JSON.stringify(a)) === (b && JSON.stringify(b))\n  )\n}\n","import { useMemo } from 'react'\n\nimport { useAuthenticationStatus } from './useAuthenticationStatus'\nimport { useUserData } from './useUserData'\n\n/**\n * @deprecated\n * This hook ensures backward compatibility with `@nhost/react-auth`, which is deprecated.\n */\nexport const useNhostAuth = () => {\n  const { isLoading, isAuthenticated } = useAuthenticationStatus()\n  const user = useUserData()\n  return useMemo(() => ({ isLoading, isAuthenticated, user }), [isLoading, isAuthenticated, user])\n}\n","import { useContext } from 'react'\n\nimport { NhostReactContext } from './provider'\n\n/**\n * @deprecated Nhost services can now be split to subdomains to improve performance with CDN. Use `nhost.auth.url` or `nhost.storage.url` instead.\n * Use the hook `useNhostBackendUrl` to get the Nhost backend URL.\n *\n * @example\n * ```tsx\n * const nhostBackendUrl = useNhostBackendUrl()\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-nhost-backend-url\n */\nexport const useNhostBackendUrl = () => {\n  const nhost = useContext(NhostReactContext)\n  return nhost.auth.client.backendUrl.replace('/v1/auth', '')\n}\n","import { useContext, useEffect, useState } from 'react'\n\nimport { encodeQueryParameters, Provider, ProviderOptions, rewriteRedirectTo } from '@nhost/core'\n\nimport { NhostReactContext } from './provider'\n\n/**\n *  Use the hook `useProviderLink` to get an OAuth provider URL that can be used to sign in users.\n *\n * @example\n * ```js\n * const providerLink = useProviderLink();\n * ```\n *\n * @example\n * ```jsx\n * import { useProviderLink } from '@nhost/react';\n *\n * const Component = () => {\n *   const { facebook, github } = useProviderLink();\n *\n *   return (\n *     <div>\n *       <a href={facebook}>Sign in with Facebook</a>\n *       <a href={github}>Sign in with GitHub</a>\n *     </div>\n *   );\n * };\n * ```\n */\nexport const useProviderLink = (options?: ProviderOptions) => {\n  /**\n   * @internal When using Nextjs or any SSR framework, nhost.auth.client.clientUrl will be set to `undefined`\n   * as its value is set to window.location.origin.\n   * This is because the request context is not available when setting up the client `new NhostClient()` outside of\n   * the React/Nextjs context.\n   */\n  const [isSSR, setIsSSR] = useState(true)\n\n  useEffect(() => {\n    setIsSSR(false)\n  }, [])\n\n  const nhost = useContext(NhostReactContext)\n\n  return new Proxy({} as Record<Provider, string>, {\n    get(_, provider: string) {\n      return encodeQueryParameters(\n        `${nhost.auth.client.backendUrl}/signin/provider/${provider}`,\n        rewriteRedirectTo(isSSR ? undefined : nhost.auth.client.clientUrl, options as any)\n      )\n    }\n  })\n}\n","import { useMemo } from 'react'\n\nimport {\n  createResetPasswordMachine,\n  ResetPasswordHandlerResult,\n  ResetPasswordOptions,\n  resetPasswordPromise,\n  ResetPasswordState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface ResetPasswordHandler {\n  (email: string, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: ResetPasswordOptions): Promise<ResetPasswordHandlerResult>\n}\n\nexport interface ResetPasswordHookResult extends ResetPasswordState {\n  /**\n   * Sends an email with a temporary connection link. Returns a promise with the current context\n   */\n  resetPassword: ResetPasswordHandler\n}\n\ninterface ResetPasswordHook {\n  (options?: ResetPasswordOptions): ResetPasswordHookResult\n  /** @deprecated */\n  (email?: string, options?: ResetPasswordOptions): ResetPasswordHookResult\n}\n\n/**\n * Use the hook `useResetPassword` to reset the password for a user. This will send a reset password link in an email to the user. When the user clicks on the reset-password link the user is automatically signed in and can change their password using the hook `useChangePassword`.\n *\n * @example\n * ```tsx\n * const { resetPassword, isLoading, isSent, isError, error } = useResetPassword();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await resetPassword('joe@example.com', {\n *     redirectTo: 'http://localhost:3000/settings/change-password'\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-reset-password\n */\nexport const useResetPassword: ResetPasswordHook = (\n  a?: string | ResetPasswordOptions,\n  b?: ResetPasswordOptions\n) => {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a !== 'string' ? a : b\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createResetPasswordMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n\n  const isLoading = useSelector(service, (s) => s.matches('requesting'))\n  const error = useSelector(service, (state) => state.context.error)\n  const isError = useSelector(service, (state) => state.matches('idle.error'))\n  const isSent = useSelector(service, (state) => state.matches('idle.success'))\n\n  const resetPassword: ResetPasswordHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    resetPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valueOptions\n    )\n\n  return { resetPassword, isLoading, isSent, isError, error }\n}\n","import { useMemo } from 'react'\n\nimport {\n  createSendVerificationEmailMachine,\n  SendVerificationEmailHandlerResult,\n  SendVerificationEmailOptions,\n  sendVerificationEmailPromise,\n  SendVerificationEmailState\n} from '@nhost/core'\nimport { useInterpret, useSelector } from '@xstate/react'\n\nimport { useNhostClient } from './useNhostClient'\n\ninterface SendVerificationEmailHandler {\n  (\n    email: string,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n  /** @deprecated */\n  (\n    email?: unknown,\n    options?: SendVerificationEmailOptions\n  ): Promise<SendVerificationEmailHandlerResult>\n}\n\nexport interface SendVerificationEmailHookResult extends SendVerificationEmailState {\n  /** Resend the verification email. Returns a promise with the current context */\n  sendEmail: SendVerificationEmailHandler\n}\n\ninterface SendVerificationEmailHook {\n  (options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n  /** @deprecated */\n  (email?: string, options?: SendVerificationEmailOptions): SendVerificationEmailHookResult\n}\n\n/**\n * Use the hook `useSendVerificationEmail` to send a verification email. The verification email is sent to the user's email address and includes a link to verify the email address.\n *\n * @example\n * ```tsx\n * const { sendEmail, isLoading, isSent, isError, error } =\n  useSendVerificationEmail();\n *\n * console.log({ isLoading, isSent, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await sendEmail({\n *     email: 'joe@example.com',\n *   })\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-send-verification-email\n */\nexport const useSendVerificationEmail: SendVerificationEmailHook = (\n  a?: string | SendVerificationEmailOptions,\n  b?: SendVerificationEmailOptions\n) => {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a !== 'string' ? a : b\n  const nhost = useNhostClient()\n  const machine = useMemo(() => createSendVerificationEmailMachine(nhost.auth.client), [nhost])\n  const service = useInterpret(machine)\n  const isError = useSelector(service, (state) => state.matches({ idle: 'error' }))\n  const isSent = useSelector(service, (state) => state.matches({ idle: 'success' }))\n  const error = useSelector(service, (state) => state.context.error)\n  const isLoading = useSelector(service, (state) => state.matches('requesting'))\n\n  const sendEmail: SendVerificationEmailHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    sendVerificationEmailPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valueOptions\n    )\n\n  return { sendEmail, isLoading, isSent, isError, error }\n}\n","import { signInAnonymousPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignInAnonymous` to sign in a user anonymously.\n *\n * As a result, the user will have the `anonymous` role and subsequent set of permissions.\n * The user can then be converted to a regular user at a later stage using email+password sign-up, passwordless email (magic link), or passwordless SMS.\n *\n * @example\n * ```tsx\n * const { signInAnonymous, isLoading, isSuccess, isError, error } = useSignInAnonymous()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInAnonymous();\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-anonymous\n */\nexport const useSignInAnonymous = () => {\n  const service = useAuthInterpreter()\n  const signInAnonymous = () => signInAnonymousPromise(service)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) =>\n    state.matches({ authentication: { authenticating: 'anonymous' } })\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isError = useSelector(service, (state) =>\n    state.matches({ authentication: { signedOut: 'failed' } })\n  )\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  return { accessToken, error, isError, isLoading, isSuccess, signInAnonymous, user }\n}\n","import { SignInMfaTotpHandlerResult } from '@nhost/core'\nimport {\n  SignInEmailPasswordHandlerResult,\n  signInEmailPasswordPromise,\n  SignInEmailPasswordState,\n  signInMfaTotpPromise\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordHandler {\n  (email: string, password: string): Promise<SignInEmailPasswordHandlerResult>\n  /** @deprecated */\n  (email?: unknown, password?: string): Promise<SignInEmailPasswordHandlerResult>\n}\n\ninterface SendMfaOtpHander {\n  (otp: string): Promise<SignInMfaTotpHandlerResult>\n  /** @deprecated */\n  (otp?: unknown): Promise<SignInMfaTotpHandlerResult>\n}\n\nexport interface SignInEmailPasswordHookResult extends SignInEmailPasswordState {\n  signInEmailPassword: SignInEmailPasswordHandler\n  sendMfaOtp: SendMfaOtpHander\n}\n\ninterface SignInEmailPasswordHook {\n  (): SignInEmailPasswordHookResult\n  /** @deprecated */\n  (email?: string, password?: string, otp?: string): SignInEmailPasswordHookResult\n}\n\n// TODO: Add MFA example once MFA is available at Nhost Cloud.\n/**\n * Use the hook `useSignInEmailPassword` to sign in a user using email and password.\n *\n * @example\n * ```tsx\n * const { signInEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-password\n */\nexport const useSignInEmailPassword: SignInEmailPasswordHook = (\n  stateEmail?: string,\n  statePassword?: string,\n  stateOtp?: string\n) => {\n  const service = useAuthInterpreter()\n  const signInEmailPassword: SignInEmailPasswordHandler = (\n    valueEmail?: string | unknown,\n    valuePassword?: string\n  ) =>\n    signInEmailPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : stateEmail!,\n      typeof valuePassword === 'string' ? valuePassword : statePassword!\n    )\n\n  const sendMfaOtp: SendMfaOtpHander = (valueOtp?: string | unknown) =>\n    signInMfaTotpPromise(service, typeof valueOtp === 'string' ? valueOtp : stateOtp!)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'password' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const needsMfaOtp = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'needsMfa' } }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  const mfa = useSelector(service, (state) => state.context.mfa)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    needsMfaOtp,\n    mfa,\n    sendMfaOtp,\n    signInEmailPassword,\n    user\n  }\n}\n","import {\n  PasswordlessOptions,\n  SignInEmailPasswordlessHandlerResult,\n  SignInEmailPasswordState\n} from '@nhost/core'\nimport { signInEmailPasswordlessPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInEmailPasswordlessHandler {\n  (email: string, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n  /** @deprecated */\n  (email?: unknown, options?: PasswordlessOptions): Promise<SignInEmailPasswordlessHandlerResult>\n}\n\nexport interface SignInEmailPasswordlessHookResult extends SignInEmailPasswordState {\n  /** Sends a magic link to the given email */\n  signInEmailPasswordless: SignInEmailPasswordlessHandler\n}\n\n/**\n * Use the hook `useSignInEmailPasswordless` to sign in a user using passwordless email (Magic Link).\n *\n * @example\n * ```tsx\n * const { signInEmailPasswordless, isLoading, isSuccess, isError, error } = useSignInEmailPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailPasswordless('joe@example.com');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-email-passwordless\n */\nexport function useSignInEmailPasswordless(\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult\n\n/**\n * @deprecated\n */\nexport function useSignInEmailPasswordless(\n  email?: string,\n  options?: PasswordlessOptions\n): SignInEmailPasswordlessHookResult\n\nexport function useSignInEmailPasswordless(\n  a?: string | PasswordlessOptions,\n  b?: PasswordlessOptions\n) {\n  const stateEmail = typeof a === 'string' ? a : undefined\n  const stateOptions = typeof a === 'string' ? b : a\n  const service = useAuthInterpreter()\n\n  const signInEmailPasswordless: SignInEmailPasswordlessHandler = (\n    valueEmail?: string | unknown,\n    valueOptions = stateOptions\n  ) =>\n    signInEmailPasswordlessPromise(\n      service,\n      (typeof valueEmail === 'string' ? valueEmail : stateEmail) as string,\n      valueOptions\n    )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(service, (state) => state.matches('registration.passwordlessEmail'))\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInEmailPasswordless, isLoading, isSuccess, isError, error }\n}\n","import {\n  signInEmailSecurityKeyPromise,\n  SignInSecurityKeyPasswordlessHandlerResult,\n  SignInSecurityKeyPasswordlessState\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ninterface SignInSecurityKeyPasswordlessHandler {\n  (email: string): Promise<SignInSecurityKeyPasswordlessHandlerResult>\n}\n\nexport interface SignInSecurityKeyPasswordlessHookResult\n  extends SignInSecurityKeyPasswordlessState {\n  signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler\n}\n\ninterface SignInSecurityKeyPasswordlessHook {\n  (): SignInSecurityKeyPasswordlessHookResult\n}\n\n/**\n * Use the hook `useSignInEmailSecurityKey` to sign in a user using their email and a security key using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signInEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignInEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signInEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-web-authn\n */\nexport const useSignInEmailSecurityKey: SignInSecurityKeyPasswordlessHook = () => {\n  const service = useAuthInterpreter()\n  const signInEmailSecurityKey: SignInSecurityKeyPasswordlessHandler = (email: string) =>\n    signInEmailSecurityKeyPromise(service, email)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.authentication || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn'\n    })\n  )\n  const isLoading = useSelector(\n    service,\n    (state) => state.matches({ authentication: { authenticating: 'securityKeyEmail' } }),\n    (a, b) => a === b\n  )\n  const needsEmailVerification = useSelector(\n    service,\n    (state) =>\n      state.matches({\n        authentication: { signedOut: 'noErrors' },\n        registration: { incomplete: 'needsEmailVerification' }\n      }),\n    (a, b) => a === b\n  )\n  const isError = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'failed' } }),\n    (a, b) => a === b\n  )\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signInEmailSecurityKey,\n    user\n  }\n}\n","import { useState } from 'react'\n\nimport {\n  PasswordlessOptions,\n  SignInSmsPasswordlessHandlerResult,\n  SignInSmsPasswordlessOtpHandlerResult,\n  SignInSmsPasswordlessState\n} from '@nhost/core'\nimport { signInSmsPasswordlessOtpPromise, signInSmsPasswordlessPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\nexport interface SignInSmsPasswordlessHandler {\n  (phoneNumber: string, options?: PasswordlessOptions): Promise<SignInSmsPasswordlessHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessOtpHandler {\n  (code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n  (phoneNumber: string, code: string): Promise<SignInSmsPasswordlessOtpHandlerResult>\n}\n\nexport interface SignInSmsPasswordlessHookResult extends SignInSmsPasswordlessState {\n  /** Sends a one-time code to the given phoneNumber */\n  signInSmsPasswordless: SignInSmsPasswordlessHandler\n  sendOtp: SignInSmsPasswordlessOtpHandler\n}\n\n/**\n * Use the hook `useSignInSmsPasswordless` to sign in a user with a one-time password sent via SMS to a phone.\n *\n * 1. The `signInSmsPasswordless` action sends a one-time password to the given phone number.\n * 2. The client is then awaiting the OTP. `needsOtp` equals true.\n * 3. After the code is received by SMS, the client sends the code with `sendOtp`. On success, the client is authenticated, and `isSuccess` equals `true`.\n *\n * Any error is monitored through `isError` and `error`. While the `signInSmsPasswordless` and `sendOtp` actions are running, `isLoading` equals `true`.\n *\n * @example\n * ```tsx\n * const { signInSmsPasswordless, sendOtp, needsOtp, isLoading, isSuccess, isError, error } = useSignInSmsPasswordless()\n *\n * console.log({ isLoading, isSuccess, isError, error });\n *\n * const askCode = async (e) => {\n *   e.preventDefault();\n *   await signInSmsPasswordless('+32455555555');\n * }\n *\n * const sendCode = async (e) => {\n *   e.preventDefault();\n *   await sendOtp('123456');\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-in-sms-passwordless\n */\nexport function useSignInSmsPasswordless(\n  stateOptions?: PasswordlessOptions\n): SignInSmsPasswordlessHookResult {\n  const service = useAuthInterpreter()\n  const [_phoneNumber, setPhoneNumber] = useState('')\n\n  const signInSmsPasswordless: SignInSmsPasswordlessHandler = (\n    phoneNumber: string,\n    valueOptions = stateOptions\n  ) => {\n    setPhoneNumber(phoneNumber)\n    return signInSmsPasswordlessPromise(service, phoneNumber, valueOptions)\n  }\n\n  const sendOtp: SignInSmsPasswordlessOtpHandler = async (...args: string[]) => {\n    if (args.length === 2) {\n      const [phoneNumber, code] = args\n      return signInSmsPasswordlessOtpPromise(service, phoneNumber, code)\n    }\n    const [code] = args\n    return signInSmsPasswordlessOtpPromise(service, _phoneNumber, code)\n  }\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n  const isLoading = useSelector(\n    service,\n    (state) =>\n      state.matches('registration.passwordlessSms') ||\n      state.matches('registration.passwordlessSmsOtp')\n  )\n\n  const isSuccess = useSelector(service, (state) => state.matches('authentication.signedIn'))\n\n  const needsOtp = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsOtp')\n  )\n\n  const isError = useSelector(service, (state) => state.matches('registration.incomplete.failed'))\n\n  return { signInSmsPasswordless, sendOtp, isLoading, isSuccess, needsOtp, isError, error }\n}\n","import { signOutPromise } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useSignOut` to sign out the user.\n *\n * @example\n * ```tsx\n * import { useSignOut, useAuthenticated } from '@nhost/react'\n *\n * const Component = () => {\n *   const { signOut } = useSignOut()\n *   const isAuthenticated = useAuthenticated()\n *\n *   if (isAuthenticated) {\n *     return (\n *       <button onClick={() => signOut()}>Sign Out</button>\n *     )\n *   }\n *\n *   return <div>Not authenticated</div>\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-out\n */\nexport const useSignOut = (stateAll: boolean = false) => {\n  const service = useAuthInterpreter()\n  const signOut = (valueAll?: boolean | unknown) =>\n    signOutPromise(service, typeof valueAll === 'boolean' ? valueAll : stateAll)\n\n  const isSuccess = useSelector(\n    service,\n    (state) => state.matches({ authentication: { signedOut: 'success' } }),\n    (a, b) => a === b\n  )\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.signout || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  return { signOut, isSuccess, error }\n}\n","import { signUpEmailPasswordPromise, SignUpEmailPasswordState, SignUpOptions } from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpEmailPasswordHandlerResult = Omit<SignUpEmailPasswordState, 'isLoading'>\n\ninterface SignUpEmailPasswordHandler {\n  (\n    email: string,\n    password: string,\n    options?: SignUpOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n  /** @deprecated */\n  (\n    email?: unknown,\n    password?: string,\n    options?: SignUpOptions\n  ): Promise<SignUpEmailPasswordHandlerResult>\n}\n\nexport interface SignUpEmailPasswordHookResult extends SignUpEmailPasswordState {\n  /** Used for a new user to sign up. Returns a promise with the current context */\n  signUpEmailPassword: SignUpEmailPasswordHandler\n}\n\ninterface SignUpEmailPasswordHook {\n  (options?: SignUpOptions): SignUpEmailPasswordHookResult\n  /** @deprecated */\n  (email?: string, password?: string, options?: SignUpOptions): SignUpEmailPasswordHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailPassword` to sign up a user using email and password.\n *\n * @example\n * ```tsx\n * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailPassword('joe@example.com','secret-password')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-email-password\n */\nexport const useSignUpEmailPassword: SignUpEmailPasswordHook = (\n  a?: string | SignUpOptions,\n  b?: string,\n  c?: SignUpOptions\n) => {\n  const stateEmail: string | undefined = typeof a === 'string' ? a : undefined\n  const statePassword: string | undefined = typeof b === 'string' ? b : undefined\n  const stateOptions = c || (typeof a !== 'string' ? a : undefined)\n\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.emailPassword'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailPassword: SignUpEmailPasswordHandler = (\n    valueEmail?: string | unknown,\n    valuePassword = statePassword,\n    valueOptions = stateOptions\n  ) =>\n    signUpEmailPasswordPromise(\n      service,\n      typeof valueEmail === 'string' ? valueEmail : (stateEmail as string),\n      valuePassword as string,\n      valueOptions\n    )\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailPassword,\n    user\n  }\n}\n","import {\n  signUpEmailSecurityKeyPromise,\n  SignUpSecurityKeyOptions,\n  SignUpSecurityKeyState\n} from '@nhost/core'\nimport { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\ntype SignUpSecurityKeyHandlerResult = Omit<SignUpSecurityKeyState, 'isLoading'>\n\ninterface SignUpSecurityKeyHandler {\n  (email: string, options?: SignUpSecurityKeyOptions): Promise<SignUpSecurityKeyHandlerResult>\n}\n\nexport interface SignUpSecurityKeyHookResult extends SignUpSecurityKeyState {\n  /** Used for a new user to sign up with a security key. Returns a promise with the current context */\n  signUpEmailSecurityKey: SignUpSecurityKeyHandler\n}\n\ninterface SignUpSecurityKeyHook {\n  (options?: SignUpSecurityKeyOptions): SignUpSecurityKeyHookResult\n}\n\n/**\n * Use the hook `useSignUpEmailSecurityKey` to sign up a user with security key and an email using the WebAuthn API.\n *\n * @example\n * ```tsx\n * const { signUpEmailSecurityKey, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailSecurityKey()\n *\n * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });\n *\n * const handleFormSubmit = async (e) => {\n *   e.preventDefault();\n *\n *   await signUpEmailSecurityKey('joe@example.com')\n * }\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-sign-up-security-key\n */\nexport const useSignUpEmailSecurityKeyEmail: SignUpSecurityKeyHook = (\n  hookOptions?: SignUpSecurityKeyOptions\n) => {\n  const service = useAuthInterpreter()\n  const isError = useSelector(service, (state) => !!state.context.errors.registration)\n\n  const error = useSelector(\n    service,\n    (state) => state.context.errors.registration || null,\n    (a, b) => a?.error === b?.error\n  )\n\n  const isLoading = useSelector(service, (state) => state.matches('registration.securityKey'))\n\n  const needsEmailVerification = useSelector(service, (state) =>\n    state.matches('registration.incomplete.needsEmailVerification')\n  )\n\n  const isSuccess = useSelector(service, (state) =>\n    state.matches({\n      authentication: 'signedIn',\n      registration: 'complete'\n    })\n  )\n\n  const signUpEmailSecurityKey: SignUpSecurityKeyHandler = (email, options = hookOptions) =>\n    signUpEmailSecurityKeyPromise(service, email, options)\n\n  const user = useSelector(\n    service,\n    (state) => state.context.user,\n    (a, b) => a?.id === b?.id\n  )\n  const accessToken = useSelector(service, (state) => state.context.accessToken.value)\n\n  return {\n    accessToken,\n    error,\n    isError,\n    isLoading,\n    isSuccess,\n    needsEmailVerification,\n    signUpEmailSecurityKey,\n    user\n  }\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserAvatarUrl` to get the avatar URL of the user.\n *\n * @example\n * ```tsx\n * const userAvatarUrl = useUserAvatarUrl();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-avatar-url\n */\nexport const useUserAvatarUrl = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.avatarUrl,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserAvatarUrl} instead */\nexport const useAvatarUrl = useUserAvatarUrl\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDefaultRole` to get the default role of the user.\n *\n * @example\n * ```tsx\n * const userDefaultRole = useUserDefaultRole();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-default-role\n */\nexport const useUserDefaultRole = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.defaultRole,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserDefaultRole} instead */\nexport const useDefaultRole = useUserDefaultRole\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserDisplayName` to get the display name of the user.\n *\n * @example\n * ```tsx\n * const userDisplayName = useUserDisplayName();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-display-name\n */\nexport const useUserDisplayName = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.displayName,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserDisplayName} instead */\nexport const useDisplayName = useUserDisplayName\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserEmail` to get the email of the user.\n *\n * @example\n * ```tsx\n * const userEmail = useUserEmail();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-email\n */\nexport const useUserEmail = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.email,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserEmail} instead */\nexport const useEmail = useUserEmail\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserId` to get the id of the user.\n *\n * @example\n * ```tsx\n * const userId = useUserId();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-id\n */\nexport const useUserId = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.id,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserIsAnonymous` to see if the user is anonymous or not.\n *\n * @example\n * ```tsx\n * const userIsAnonymous = useUserIsAnonymous();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-is-anonymous\n */\nexport const useUserIsAnonymous = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.isAnonymous,\n    (a, b) => a === b\n  )\n}\n\n/**\n * @internal\n * @deprecated use {@link useUserIsAnonymous} instead */\nexport const useIsAnonymous = useUserIsAnonymous\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserLocale` to get the locale of the user.\n *\n * @example\n * ```tsx\n * const userLocale = useUserLocale();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-locale\n */\nexport const useUserLocale = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.locale,\n    (a, b) => a === b\n  )\n}\n","import { useSelector } from '@xstate/react'\n\nimport { useAuthInterpreter } from './useAuthInterpreter'\n\n/**\n * Use the hook `useUserRoles` to get all allowed roles of the user.\n *\n * @example\n * ```tsx\n * const userRoles = useUserRoles();\n * ```\n *\n * @docs https://docs.nhost.io/reference/react/use-user-roles\n */\nexport const useUserRoles = () => {\n  const service = useAuthInterpreter()\n  return useSelector(\n    service,\n    (state) => state.context.user?.roles || [],\n    (a, b) => a.every((i) => b.includes(i) && b.every((i) => a.includes(i)))\n  )\n}\n"]},"metadata":{},"sourceType":"module"}