{"ast":null,"code":"let scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.16.1 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || {\n  head: {}\n};\nconst H = win.HTMLElement || class {};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\nconst setPlatformHelpers = helpers => {\n  Object.assign(plt, helpers);\n};\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom ? /*@__PURE__*/(() => (doc.head.attachShadow + '').indexOf('[native') > -1)() : true;\nconst supportsListenerOptions = /*@__PURE__*/(() => {\n  let supportsListenerOptions = false;\n  try {\n    doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n      get() {\n        supportsListenerOptions = true;\n      }\n    }));\n  } catch (e) {}\n  return supportsListenerOptions;\n})();\nconst promiseResolve = v => Promise.resolve(v);\nconst supportsConstructibleStylesheets = BUILD.constructableCSS ? /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replace === 'function';\n  } catch (e) {}\n  return false;\n})() : false;\nconst Context = {};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n  if (BUILD.hostListener && listeners) {\n    // this is called immediately within the element's constructor\n    // initialize our event listeners on the host element\n    // we do this now so that we can listen to events that may\n    // have fired even before the instance is ready\n    if (BUILD.hostListenerTargetParent) {\n      // this component may have event listeners that should be attached to the parent\n      if (attachParentListeners) {\n        // this is being ran from within the connectedCallback\n        // which is important so that we know the host element actually has a parent element\n        // filter out the listeners to only have the ones that ARE being attached to the parent\n        listeners = listeners.filter(_ref2 => {\n          let [flags] = _ref2;\n          return flags & 32;\n        } /* TargetParent */);\n      } else {\n        // this is being ran from within the component constructor\n        // everything BUT the parent element listeners should be attached at this time\n        // filter out the listeners that are NOT being attached to the parent\n        listeners = listeners.filter(_ref3 => {\n          let [flags] = _ref3;\n          return !(flags & 32 /* TargetParent */);\n        });\n      }\n    }\n\n    listeners.map(_ref4 => {\n      let [flags, name, method] = _ref4;\n      const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n      const handler = hostListenerProxy(hostRef, method);\n      const opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n    });\n  }\n};\nconst hostListenerProxy = (hostRef, methodName) => ev => {\n  try {\n    if (BUILD.lazyLoad) {\n      if (hostRef.$flags$ & 256 /* isListenReady */) {\n        // instance is ready, let's call it's member method for this event\n        hostRef.$lazyInstance$[methodName](ev);\n      } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    } else {\n      hostRef.$hostElement$[methodName](ev);\n    }\n  } catch (e) {\n    consoleError(e);\n  }\n};\nconst getHostListenerTarget = (elm, flags) => {\n  if (BUILD.hostListenerTargetDocument && flags & 4 /* TargetDocument */) return doc;\n  if (BUILD.hostListenerTargetWindow && flags & 8 /* TargetWindow */) return win;\n  if (BUILD.hostListenerTargetBody && flags & 16 /* TargetBody */) return doc.body;\n  if (BUILD.hostListenerTargetParent && flags & 32 /* TargetParent */) return elm.parentElement;\n  return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = flags => supportsListenerOptions ? {\n  passive: (flags & 1 /* Passive */) !== 0,\n  capture: (flags & 2 /* Capture */) !== 0\n} : (flags & 2 /* Capture */) !== 0;\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = function (fnName) {\n  let tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (BUILD.profile && performance.mark) {\n    const key = `st:${fnName}:${tagName}:${i++}`;\n    // Start\n    performance.mark(key);\n    // End\n    return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\nconst uniqueTime = (key, measureText) => {\n  if (BUILD.profile && performance.mark) {\n    if (performance.getEntriesByName(key).length === 0) {\n      performance.mark(key);\n    }\n    return () => {\n      if (performance.getEntriesByName(measureText).length === 0) {\n        performance.measure(measureText, key);\n      }\n    };\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\nconst inspect = ref => {\n  const hostRef = getHostRef(ref);\n  if (!hostRef) {\n    return undefined;\n  }\n  const flags = hostRef.$flags$;\n  const hostElement = hostRef.$hostElement$;\n  return {\n    renderCount: hostRef.$renderCount$,\n    flags: {\n      hasRendered: !!(flags & 2 /* hasRendered */),\n      hasConnected: !!(flags & 1 /* hasConnected */),\n      isWaitingForChildren: !!(flags & 4 /* isWaitingForChildren */),\n      isConstructingInstance: !!(flags & 8 /* isConstructingInstance */),\n      isQueuedForUpdate: !!(flags & 16 /* isQueuedForUpdate */),\n      hasInitializedComponent: !!(flags & 32 /* hasInitializedComponent */),\n      hasLoadedComponent: !!(flags & 64 /* hasLoadedComponent */),\n      isWatchReady: !!(flags & 128 /* isWatchReady */),\n      isListenReady: !!(flags & 256 /* isListenReady */),\n      needsRerender: !!(flags & 512 /* needsRerender */)\n    },\n\n    instanceValues: hostRef.$instanceValues$,\n    ancestorComponent: hostRef.$ancestorComponent$,\n    hostElement,\n    lazyInstance: hostRef.$lazyInstance$,\n    vnode: hostRef.$vnode$,\n    modeName: hostRef.$modeName$,\n    onReadyPromise: hostRef.$onReadyPromise$,\n    onReadyResolve: hostRef.$onReadyResolve$,\n    onInstancePromise: hostRef.$onInstancePromise$,\n    onInstanceResolve: hostRef.$onInstanceResolve$,\n    onRenderResolve: hostRef.$onRenderResolve$,\n    queuedListeners: hostRef.$queuedListeners$,\n    rmListeners: hostRef.$rmListeners$,\n    ['s-id']: hostElement['s-id'],\n    ['s-cr']: hostElement['s-cr'],\n    ['s-lr']: hostElement['s-lr'],\n    ['s-p']: hostElement['s-p'],\n    ['s-rc']: hostElement['s-rc'],\n    ['s-sc']: hostElement['s-sc']\n  };\n};\nconst installDevTools = () => {\n  if (BUILD.devTools) {\n    const stencil = win.stencil = win.stencil || {};\n    const originalInspect = stencil.inspect;\n    stencil.inspect = ref => {\n      let result = inspect(ref);\n      if (!result && typeof originalInspect === 'function') {\n        result = originalInspect(ref);\n      }\n      return result;\n    };\n  }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n  styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta, mode);\n  const style = styles.get(scopeId);\n  if (!BUILD.attachStyles) {\n    return scopeId;\n  }\n  // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n  styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n      if (!appliedStyles.has(scopeId)) {\n        if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n          // This is only happening on native shadow-dom, do not needs CSS var shim\n          styleElm.innerHTML = style;\n        } else {\n          if (BUILD.cssVarShim && plt.$cssShim$) {\n            styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */));\n            const newScopeId = styleElm['s-sc'];\n            if (newScopeId) {\n              scopeId = newScopeId;\n              // we don't want to add this styleID to the appliedStyles Set\n              // since the cssVarShim might need to apply several different\n              // stylesheets for the same component\n              appliedStyles = null;\n            }\n          } else {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n  return scopeId;\n};\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n  if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* needsScopedEncapsulation */) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n    if (BUILD.scoped && flags & 2 /* scopedCssEncapsulation */) {\n      elm.classList.add(scopeId + '-s');\n    }\n  }\n  endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = css => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n// Private\nconst computeMode = elm => modeResolutionChain.map(h => h(elm)).find(m => !!m);\n// Public\nconst setMode = handler => modeResolutionChain.push(handler);\nconst getMode = ref => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = v => v != null;\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = function (nodeName, vnodeData) {\n  let child = null;\n  let key = null;\n  let slotName = null;\n  let simple = false;\n  let lastSimple = false;\n  const vNodeChildren = [];\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        } else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n          consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n        }\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n        lastSimple = simple;\n      }\n    }\n  };\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n  walk(children);\n  if (vnodeData) {\n    if (BUILD.isDev && nodeName === 'input') {\n      validateInputProperties(vnodeData);\n    }\n    // normalize class / classname attributes\n    if (BUILD.vdomKey && vnodeData.key) {\n      key = vnodeData.key;\n    }\n    if (BUILD.slotRelocation && vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n    if (BUILD.vdomClass) {\n      const classData = vnodeData.className || vnodeData.class;\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n  if (BUILD.isDev && vNodeChildren.some(isHost)) {\n    consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n  }\n  if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n  if (BUILD.vdomKey) {\n    vnode.$key$ = key;\n  }\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  if (BUILD.vdomAttribute) {\n    vnode.$attrs$ = null;\n  }\n  if (BUILD.vdomKey) {\n    vnode.$key$ = null;\n  }\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\nconst Host = {};\nconst isHost = node => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\nconst convertToPublic = node => ({\n  vattrs: node.$attrs$,\n  vchildren: node.$children$,\n  vkey: node.$key$,\n  vname: node.$name$,\n  vtag: node.$tag$,\n  vtext: node.$text$\n});\nconst convertToPrivate = node => {\n  if (typeof node.vtag === 'function') {\n    const vnodeData = Object.assign({}, node.vattrs);\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n    return h(node.vtag, vnodeData, ...(node.vchildren || []));\n  }\n  const vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\nconst validateInputProperties = inputElm => {\n  const props = Object.keys(inputElm);\n  const value = props.indexOf('value');\n  if (value === -1) {\n    return;\n  }\n  const typeIndex = props.indexOf('type');\n  const minIndex = props.indexOf('min');\n  const maxIndex = props.indexOf('max');\n  const stepIndex = props.indexOf('step');\n  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n    consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n  }\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n    if (BUILD.vdomClass && memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (BUILD.vdomStyle && memberName === 'style') {\n      // update style attribute, css properties and values\n      if (BUILD.updatable) {\n        for (const prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (!BUILD.hydrateServerSide && prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n      for (const prop in newValue) {\n        if (!oldValue || newValue[prop] !== oldValue[prop]) {\n          if (!BUILD.hydrateServerSide && prop.includes('-')) {\n            elm.style.setProperty(prop, newValue[prop]);\n          } else {\n            elm.style[prop] = newValue[prop];\n          }\n        }\n      }\n    } else if (BUILD.vdomKey && memberName === 'key') ;else if (BUILD.vdomRef && memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else if (BUILD.vdomPropOrAttr) {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            const n = newValue == null ? '' : newValue;\n            // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n      let xlink = false;\n      if (BUILD.vdomXlink) {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (BUILD.vdomXlink && xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        if (BUILD.vdomXlink && xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  if (BUILD.updatable) {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  }\n  // add new & update changed attributes\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  const newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  let oldVNode;\n  if (BUILD.slotRelocation && !useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n    if (newVNode.$tag$ === 'slot') {\n      if (scopeId) {\n        // scoped css needs to add its scoped id to the parent element\n        parentElm.classList.add(scopeId + '-s');\n      }\n      newVNode.$flags$ |= newVNode.$children$ ?\n      // slot element has fallback content\n      2 /* isSlotFallback */ :\n      // slot element does not have fallback content\n      1 /* isSlotReference */;\n    }\n  }\n\n  if (BUILD.isDev && newVNode.$elm$) {\n    consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n  }\n  if (BUILD.vdomText && newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* isSlotReference */) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n  } else {\n    if (BUILD.svg && !isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    }\n    // create element\n    elm = newVNode.$elm$ = BUILD.svg ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */ ? 'slot-fb' : newVNode.$tag$) : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */ ? 'slot-fb' : newVNode.$tag$);\n    if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    }\n    // add css classes, attrs, props, listeners, etc.\n    if (BUILD.vdomAttribute) {\n      updateElement(null, newVNode, isSvgMode);\n    }\n    if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i, elm);\n        // return node could have been null\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n    if (BUILD.svg) {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n  if (BUILD.slotRelocation) {\n    elm['s-hn'] = hostTagName;\n    if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n      // remember the content reference comment\n      elm['s-sr'] = true;\n      // remember the content reference comment\n      elm['s-cr'] = contentRef;\n      // remember the slot name, or empty string for default slot\n      elm['s-sn'] = newVNode.$name$ || '';\n      // check if we've got an old vnode for this slot\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n  return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n  plt.$flags$ |= 1 /* isTmpDisconnected */;\n  const oldSlotChildNodes = parentElm.childNodes;\n  for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n    const childNode = oldSlotChildNodes[i];\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n      // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot in need be\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      checkSlotRelocate = true;\n    }\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n  plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  let childNode;\n  if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx, parentElm);\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n      }\n    }\n  }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      callNodeRefs(vnode);\n      if (BUILD.slotRelocation) {\n        // we're removing this element\n        // so it's possible we need to show slot fallback content now\n        checkSlotFallbackVisibility = true;\n        if (elm['s-ol']) {\n          // remove the original location comment\n          elm['s-ol'].remove();\n        } else {\n          // it's possible that child nodes of the node\n          // that's being removed are slot nodes\n          putBackInOriginalLocation(elm, true);\n        }\n      }\n      // remove the vnode's element from the dom\n      elm.remove();\n    }\n  }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let idxInOld = 0;\n  let i = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  let elmToMove;\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // Vnode moved right\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // Vnode moved left\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // createKeyToOldIdx\n      idxInOld = -1;\n      if (BUILD.vdomKey) {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n      if (BUILD.vdomKey && idxInOld >= 0) {\n        elmToMove = oldCh[idxInOld];\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n        } else {\n          patch(elmToMove, newStartVnode);\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n      }\n      if (node) {\n        if (BUILD.slotRelocation) {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        } else {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (BUILD.updatable && newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    if (BUILD.slotRelocation && vnode1.$tag$ === 'slot') {\n      return vnode1.$name$ === vnode2.$name$;\n    }\n    if (BUILD.vdomKey) {\n      return vnode1.$key$ === vnode2.$key$;\n    }\n    return true;\n  }\n  return false;\n};\nconst referenceNode = node => {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\nconst parentReferenceNode = node => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  const text = newVNode.$text$;\n  let defaultHolder;\n  if (!BUILD.vdomText || text === null) {\n    if (BUILD.svg) {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    }\n    // element node\n    if (BUILD.vdomAttribute || BUILD.reflect) {\n      if (BUILD.slot && tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n    if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      }\n      // add the new vnode children\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (BUILD.updatable && oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n    if (BUILD.svg && isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\nconst updateFallbackSlotVisibility = elm => {\n  // tslint:disable-next-line: prefer-const\n  const childNodes = elm.childNodes;\n  let childNode;\n  let i;\n  let ilen;\n  let j;\n  let slotNameAttr;\n  let nodeType;\n  for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n    childNode = childNodes[i];\n    if (childNode.nodeType === 1 /* ElementNode */) {\n      if (childNode['s-sr']) {\n        // this is a slot fallback node\n        // get the slot name for this slot reference node\n        slotNameAttr = childNode['s-sn'];\n        // by default always show a fallback slot node\n        // then hide it if there are other slots in the light dom\n        childNode.hidden = false;\n        for (j = 0; j < ilen; j++) {\n          nodeType = childNodes[j].nodeType;\n          if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n            // this sibling node is from a different component OR is a named fallback slot node\n            if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n              childNode.hidden = true;\n              break;\n            }\n          } else {\n            // this is a default fallback slot node\n            // any element or text node (with content)\n            // should hide the default fallback slot node\n            if (nodeType === 1 /* ElementNode */ || nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '') {\n              childNode.hidden = true;\n              break;\n            }\n          }\n        }\n      }\n      // keep drilling down\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = elm => {\n  // tslint:disable-next-line: prefer-const\n  let childNode;\n  let node;\n  let hostContentNodes;\n  let slotNameAttr;\n  let relocateNodeData;\n  let j;\n  let i = 0;\n  const childNodes = elm.childNodes;\n  const ilen = childNodes.length;\n  for (; i < ilen; i++) {\n    childNode = childNodes[i];\n    if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n      // first got the content reference comment node\n      // then we got it's parent, which is where all the host content is in now\n      hostContentNodes = node.parentNode.childNodes;\n      slotNameAttr = childNode['s-sn'];\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n          // let's do some relocating to its new home\n          // but never relocate a content reference node\n          // that is suppose to always represent the original content location\n          if (isNodeLocatedInSlot(node, slotNameAttr)) {\n            // it's possible we've already decided to relocate this node\n            relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n            // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n            checkSlotFallbackVisibility = true;\n            node['s-sn'] = node['s-sn'] || slotNameAttr;\n            if (relocateNodeData) {\n              // previously we never found a slot home for this node\n              // but turns out we did, so let's remember it now\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n            if (node['s-sr']) {\n              relocateNodes.map(relocateNode => {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n            // so far this element does not have a slot home, not setting slotRefNode on purpose\n            // if we never find a home for this element then we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n    if (childNode.nodeType === 1 /* ElementNode */) {\n      relocateSlotContent(childNode);\n    }\n  }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n  if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n      return true;\n    }\n    if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n      return true;\n    }\n    return false;\n  }\n  if (nodeToRelocate['s-sn'] === slotNameAttr) {\n    return true;\n  }\n  return slotNameAttr === '';\n};\nconst callNodeRefs = vNode => {\n  if (BUILD.vdomRef) {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(callNodeRefs);\n  }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  // <Host> runtime check\n  if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n    throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n  }\n  if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(_ref5 => {\n      let [propName, attribute] = _ref5;\n      return rootVnode.$attrs$[attribute] = hostElm[propName];\n    });\n  }\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4 /* isHost */;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;\n  if (BUILD.scoped || BUILD.shadowDom) {\n    scopeId = hostElm['s-sc'];\n  }\n  if (BUILD.slotRelocation) {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n    // always reset\n    checkSlotFallbackVisibility = false;\n  }\n  // synchronous patch\n  patch(oldVNode, rootVnode);\n  if (BUILD.slotRelocation) {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    if (checkSlotRelocate) {\n      relocateSlotContent(rootVnode.$elm$);\n      let relocateData;\n      let nodeToRelocate;\n      let orgLocationNode;\n      let parentNodeRef;\n      let insertBeforeNode;\n      let refNode;\n      let i = 0;\n      for (; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n      for (i = 0; i < relocateNodes.length; i++) {\n        relocateData = relocateNodes[i];\n        nodeToRelocate = relocateData.$nodeToRelocate$;\n        if (relocateData.$slotRefNode$) {\n          // by default we're just going to insert it directly\n          // after the slot reference node\n          parentNodeRef = relocateData.$slotRefNode$.parentNode;\n          insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n          orgLocationNode = nodeToRelocate['s-ol'];\n          while (orgLocationNode = orgLocationNode.previousSibling) {\n            refNode = orgLocationNode['s-nr'];\n            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n              refNode = refNode.nextSibling;\n              if (!refNode || !refNode['s-nr']) {\n                insertBeforeNode = refNode;\n                break;\n              }\n            }\n          }\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have it's hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              }\n              // add it back to the dom but in its new home\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    }\n    // done moving nodes around\n    // allow the disconnect callback to work again\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n    // always reset\n    relocateNodes.length = 0;\n  }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = slotVNode => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = nodeToRelocate => doc.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})` : `[${nodeToRelocate.textContent}]`));\nconst getElement = ref => BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;\nconst createEvent = (ref, name, flags) => {\n  const elm = getElement(ref);\n  return {\n    emit: detail => {\n      if (BUILD.isDev && !elm.isConnected) {\n        consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n      }\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4 /* Bubbles */),\n        composed: !!(flags & 2 /* Composed */),\n        cancelable: !!(flags & 1 /* Cancellable */),\n        detail\n      });\n    }\n  };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  if (BUILD.taskQueue && BUILD.updatable) {\n    hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n  }\n\n  if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n    hostRef.$flags$ |= 512 /* needsRerender */;\n    return;\n  }\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n  // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n  return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const elm = hostRef.$hostElement$;\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  let promise;\n  if (isInitialLoad) {\n    if (BUILD.lazyLoad && BUILD.hostListener) {\n      hostRef.$flags$ |= 256 /* isListenReady */;\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(_ref6 => {\n          let [methodName, event] = _ref6;\n          return safeCall(instance, methodName, event);\n        });\n        hostRef.$queuedListeners$ = null;\n      }\n    }\n    emitLifecycleEvent(elm, 'componentWillLoad');\n    if (BUILD.cmpWillLoad) {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  } else {\n    emitLifecycleEvent(elm, 'componentWillUpdate');\n    if (BUILD.cmpWillUpdate) {\n      promise = safeCall(instance, 'componentWillUpdate');\n    }\n  }\n  emitLifecycleEvent(elm, 'componentWillRender');\n  if (BUILD.cmpWillRender) {\n    promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n  }\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n  // updateComponent\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  const rc = elm['s-rc'];\n  if (BUILD.style && isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n  const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n  if (BUILD.isDev) {\n    hostRef.$flags$ |= 1024 /* devOnRender */;\n  }\n\n  if (BUILD.hydrateServerSide) {\n    await callRender(hostRef, instance, elm);\n  } else {\n    callRender(hostRef, instance, elm);\n  }\n  if (BUILD.cssVarShim && plt.$cssShim$) {\n    plt.$cssShim$.updateHost(elm);\n  }\n  if (BUILD.isDev) {\n    hostRef.$renderCount$++;\n    hostRef.$flags$ &= ~1024 /* devOnRender */;\n  }\n\n  if (BUILD.hydrateServerSide) {\n    try {\n      // manually connected child components during server-side hydrate\n      serverSideConnected(elm);\n      if (isInitialLoad) {\n        // using only during server-side hydrate\n        if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {\n          elm['s-en'] = '';\n        } else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {\n          elm['s-en'] = 'c';\n        }\n      }\n    } catch (e) {\n      consoleError(e, elm);\n    }\n  }\n  if (BUILD.asyncLoading && rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(cb => cb());\n    elm['s-rc'] = undefined;\n  }\n  endRender();\n  endUpdate();\n  if (BUILD.asyncLoading) {\n    const childrenPromises = elm['s-p'];\n    const postUpdate = () => postUpdateComponent(hostRef);\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n      childrenPromises.length = 0;\n    }\n  } else {\n    postUpdateComponent(hostRef);\n  }\n};\nconst callRender = (hostRef, instance, elm) => {\n  // in order for bundlers to correctly treeshake the BUILD object\n  // we need to ensure BUILD is not deoptimized within a try/catch\n  // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n  const allRenderFn = BUILD.allRenderFn ? true : false;\n  const lazyLoad = BUILD.lazyLoad ? true : false;\n  const taskQueue = BUILD.taskQueue ? true : false;\n  const updatable = BUILD.updatable ? true : false;\n  try {\n    renderingRef = instance;\n    instance = allRenderFn ? instance.render() : instance.render && instance.render();\n    if (updatable && taskQueue) {\n      hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n    }\n\n    if (updatable || lazyLoad) {\n      hostRef.$flags$ |= 2 /* hasRendered */;\n    }\n\n    if (BUILD.hasRenderFn || BUILD.reflect) {\n      if (BUILD.vdomRender || BUILD.reflect) {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        if (BUILD.hydrateServerSide) {\n          return Promise.resolve(instance).then(value => renderVdom(hostRef, value));\n        } else {\n          renderVdom(hostRef, instance);\n        }\n      } else {\n        elm.textContent = instance;\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n  renderingRef = null;\n  return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  if (BUILD.cmpDidRender) {\n    if (BUILD.isDev) {\n      hostRef.$flags$ |= 1024 /* devOnRender */;\n    }\n\n    safeCall(instance, 'componentDidRender');\n    if (BUILD.isDev) {\n      hostRef.$flags$ &= ~1024 /* devOnRender */;\n    }\n  }\n\n  emitLifecycleEvent(elm, 'componentDidRender');\n  if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n    hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n    if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    if (BUILD.cmpDidLoad) {\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 2048 /* devOnDidLoad */;\n      }\n\n      safeCall(instance, 'componentDidLoad');\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~2048 /* devOnDidLoad */;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidLoad');\n    endPostUpdate();\n    if (BUILD.asyncLoading) {\n      hostRef.$onReadyResolve$(elm);\n      if (!ancestorComponent) {\n        appDidLoad(tagName);\n      }\n    }\n  } else {\n    if (BUILD.cmpDidUpdate) {\n      // we've already loaded this component\n      // fire off the user's componentDidUpdate method (if one was provided)\n      // componentDidUpdate runs AFTER render() has been called\n      // and all child components have finished updating\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* devOnRender */;\n      }\n\n      safeCall(instance, 'componentDidUpdate');\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~1024 /* devOnRender */;\n      }\n    }\n\n    emitLifecycleEvent(elm, 'componentDidUpdate');\n    endPostUpdate();\n  }\n  if (BUILD.hotModuleReplacement) {\n    elm['s-hmr-load'] && elm['s-hmr-load']();\n  }\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstanceResolve$(elm);\n  }\n  // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n  if (BUILD.asyncLoading) {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n    if (hostRef.$flags$ & 512 /* needsRerender */) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n    hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n  }\n  // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst forceUpdate = ref => {\n  if (BUILD.updatable) {\n    const hostRef = getHostRef(ref);\n    const isConnected = hostRef.$hostElement$.isConnected;\n    if (isConnected && (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n      scheduleUpdate(hostRef, false);\n    }\n    // Returns \"true\" when the forced update was successfully scheduled\n    return isConnected;\n  }\n  return false;\n};\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  if (BUILD.cssAnnotations) {\n    addHydratedFlag(doc.documentElement);\n  }\n  if (BUILD.asyncQueue) {\n    plt.$flags$ |= 2 /* appLoaded */;\n  }\n\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n  if (BUILD.profile && performance.measure) {\n    performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n  }\n};\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  return undefined;\n};\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n  if (BUILD.lifecycleDOMEvents) {\n    emitEvent(elm, 'stencil_' + lifecycleName, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  }\n};\nconst addHydratedFlag = elm => BUILD.hydratedClass ? elm.classList.add('hydrated') : BUILD.hydratedAttribute ? elm.setAttribute('hydrated', '') : undefined;\nconst serverSideConnected = elm => {\n  const children = elm.children;\n  if (children != null) {\n    for (let i = 0, ii = children.length; i < ii; i++) {\n      const childElm = children[i];\n      if (typeof childElm.connectedCallback === 'function') {\n        childElm.connectedCallback();\n      }\n      serverSideConnected(childElm);\n    }\n  }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n  const endHydrate = createTime('hydrateClient', tagName);\n  const shadowRoot = hostElm.shadowRoot;\n  const childRenderNodes = [];\n  const slotNodes = [];\n  const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n  const vnode = hostRef.$vnode$ = newVNode(tagName, null);\n  if (!plt.$orgLocNodes$) {\n    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n  }\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n  childRenderNodes.map(c => {\n    const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    const node = c.$elm$;\n    if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n    }\n    if (!shadowRoot) {\n      node['s-hn'] = tagName;\n      if (orgLocationNode) {\n        node['s-ol'] = orgLocationNode;\n        node['s-ol']['s-nr'] = node;\n      }\n    }\n    plt.$orgLocNodes$.delete(orgLocationId);\n  });\n  if (BUILD.shadowDom && shadowRoot) {\n    shadowRootNodes.map(shadowRootNode => {\n      if (shadowRootNode) {\n        shadowRoot.appendChild(shadowRootNode);\n      }\n    });\n  }\n  endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n  let childNodeType;\n  let childIdSplt;\n  let childVNode;\n  let i;\n  if (node.nodeType === 1 /* ElementNode */) {\n    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n    if (childNodeType) {\n      // got the node data from the element's attribute\n      // `${hostId}.${nodeId}.${depth}.${index}`\n      childIdSplt = childNodeType.split('.');\n      if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n        childVNode = {\n          $flags$: 0,\n          $hostId$: childIdSplt[0],\n          $nodeId$: childIdSplt[1],\n          $depth$: childIdSplt[2],\n          $index$: childIdSplt[3],\n          $tag$: node.tagName.toLowerCase(),\n          $elm$: node,\n          $attrs$: null,\n          $children$: null,\n          $key$: null,\n          $name$: null,\n          $text$: null\n        };\n        childRenderNodes.push(childVNode);\n        node.removeAttribute(HYDRATE_CHILD_ID);\n        // this is a new child vnode\n        // so ensure its parent vnode has the vchildren array\n        if (!parentVNode.$children$) {\n          parentVNode.$children$ = [];\n        }\n        // add our child vnode to a specific index of the vnode's children\n        parentVNode.$children$[childVNode.$index$] = childVNode;\n        // this is now the new parent vnode for all the next child checks\n        parentVNode = childVNode;\n        if (shadowRootNodes && childVNode.$depth$ === '0') {\n          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n        }\n      }\n    }\n    // recursively drill down, end to start so we can remove nodes\n    for (i = node.childNodes.length - 1; i >= 0; i--) {\n      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n    }\n    if (node.shadowRoot) {\n      // keep drilling down through the shadow root nodes\n      for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n      }\n    }\n  } else if (node.nodeType === 8 /* CommentNode */) {\n    // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n    childIdSplt = node.nodeValue.split('.');\n    if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n      // comment node for either the host id or a 0 host id\n      childNodeType = childIdSplt[0];\n      childVNode = {\n        $flags$: 0,\n        $hostId$: childIdSplt[1],\n        $nodeId$: childIdSplt[2],\n        $depth$: childIdSplt[3],\n        $index$: childIdSplt[4],\n        $elm$: node,\n        $attrs$: null,\n        $children$: null,\n        $key$: null,\n        $name$: null,\n        $tag$: null,\n        $text$: null\n      };\n      if (childNodeType === TEXT_NODE_ID) {\n        childVNode.$elm$ = node.nextSibling;\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n          childVNode.$text$ = childVNode.$elm$.textContent;\n          childRenderNodes.push(childVNode);\n          // remove the text comment since it's no longer needed\n          node.remove();\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n          if (shadowRootNodes && childVNode.$depth$ === '0') {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } else if (childVNode.$hostId$ === hostId) {\n        // this comment node is specifcally for this host id\n        if (childNodeType === SLOT_NODE_ID) {\n          // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n          childVNode.$tag$ = 'slot';\n          if (childIdSplt[5]) {\n            node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n          } else {\n            node['s-sn'] = '';\n          }\n          node['s-sr'] = true;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // browser support shadowRoot and this is a shadow dom component\n            // create an actual slot element\n            childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n            if (childVNode.$name$) {\n              // add the slot name attribute\n              childVNode.$elm$.setAttribute('name', childVNode.$name$);\n            }\n            // insert the new slot element before the slot comment\n            node.parentNode.insertBefore(childVNode.$elm$, node);\n            // remove the slot comment since it's not needed for shadow\n            node.remove();\n            if (childVNode.$depth$ === '0') {\n              shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n            }\n          }\n          slotNodes.push(childVNode);\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n        } else if (childNodeType === CONTENT_REF_ID) {\n          // `${CONTENT_REF_ID}.${hostId}`;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // remove the content ref comment since it's not needed for shadow\n            node.remove();\n          } else if (BUILD.slotRelocation) {\n            hostElm['s-cr'] = node;\n            node['s-cn'] = true;\n          }\n        }\n      }\n    }\n  } else if (parentVNode && parentVNode.$tag$ === 'style') {\n    const vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = '0';\n    parentVNode.$children$ = [vnode];\n  }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n  if (node.nodeType === 1 /* ElementNode */) {\n    let i = 0;\n    for (; i < node.childNodes.length; i++) {\n      initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n    }\n    if (node.shadowRoot) {\n      for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n        initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n      }\n    }\n  } else if (node.nodeType === 8 /* CommentNode */) {\n    const childIdSplt = node.nodeValue.split('.');\n    if (childIdSplt[0] === ORG_LOCATION_ID) {\n      orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n      node.nodeValue = '';\n      // useful to know if the original location is\n      // the root light-dom of a shadow dom component\n      node['s-en'] = childIdSplt[3];\n    }\n  }\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (BUILD.propBoolean && propType & 4 /* Boolean */) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n    if (BUILD.propNumber && propType & 2 /* Number */) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n    if (BUILD.propString && propType & 1 /* String */) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    }\n    // redundant return here for better minification\n    return propValue;\n  }\n  // not sure exactly what type we want\n  // so no need to change to a different type\n  return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n  // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n  if ((!BUILD.lazyLoad || !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n    if (BUILD.isDev) {\n      if (hostRef.$flags$ & 1024 /* devOnRender */) {\n        consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      } else if (hostRef.$flags$ & 2048 /* devOnDidLoad */) {\n        consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      }\n    }\n    if (!BUILD.lazyLoad || instance) {\n      // get an array of method names of watch functions to call\n      if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(watchMethodName => {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n      if (BUILD.updatable && (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n        if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n            return;\n          }\n        }\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (BUILD.member && cmpMeta.$members$) {\n    if (BUILD.watchCallback && Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    }\n    // It's better to have a const than two Object.entries()\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(_ref7 => {\n      let [memberName, [memberFlags]] = _ref7;\n      if ((BUILD.prop || BUILD.state) && (memberFlags & 31 /* Prop */ || (!BUILD.lazyLoad || flags & 2 /* proxyState */) && memberFlags & 32 /* State */)) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n          set(newValue) {\n            // only during dev time\n            if (BUILD.isDev) {\n              const ref = getHostRef(this);\n              if (\n              // we are proxying the instance (not element)\n              (flags & 1 /* isElementConstructor */) === 0 &&\n              // the element is not constructing\n              (ref.$flags$ & 8 /* isConstructingInstance */) === 0 &&\n              // the member is a prop\n              (memberFlags & 31 /* Prop */) !== 0 &&\n              // the member is not mutable\n              (memberFlags & 1024 /* Mutable */) === 0) {\n                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n              }\n            }\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      } else if (BUILD.lazyLoad && BUILD.method && flags & 1 /* isElementConstructor */ && memberFlags & 64 /* Method */) {\n        // proxyComponent - method\n        Object.defineProperty(prototype, memberName, {\n          value() {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            const ref = getHostRef(this);\n            return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n          }\n        });\n      }\n    });\n    if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* isElementConstructor */)) {\n      const attrNameToPropName = new Map();\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        plt.jmp(() => {\n          const propName = attrNameToPropName.get(attrName);\n          //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n          if (this.hasOwnProperty(propName)) {\n            newValue = this[propName];\n            delete this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === 'number' && this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          }\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      };\n      // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n      Cstr.observedAttributes = members.filter(_ref8 => {\n        let [_, m] = _ref8;\n        return m[0] & 15;\n      } /* HasAttribute */) // filter to only keep props that should match attributes\n      .map(_ref9 => {\n        let [propName, m] = _ref9;\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n        if (BUILD.reflect && m[0] & 512 /* ReflectAttr */) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n        return attrName;\n      });\n    }\n  }\n  return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n  // initializeComponent\n  if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) && (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n    if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n      // we haven't initialized this element yet\n      hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n      // lazy loaded components\n      // request the component's implementation to be\n      // wired up with the host element\n      Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n      if (Cstr.then) {\n        // Await creates a micro-task avoid if possible\n        const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n        Cstr = await Cstr;\n        endLoad();\n      }\n      if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n        throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n      }\n      if (BUILD.member && !Cstr.isProxied) {\n        // we've never proxied this Constructor before\n        // let's add the getters/setters to its prototype before\n        // the first time we create an instance of the implementation\n        if (BUILD.watchCallback) {\n          cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n        Cstr.isProxied = true;\n      }\n      const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n      // ok, time to construct the instance\n      // but let's keep track of when we start and stop\n      // so that the getters/setters don't incorrectly step on data\n      if (BUILD.member) {\n        hostRef.$flags$ |= 8 /* isConstructingInstance */;\n      }\n      // construct the lazy-loaded component implementation\n      // passing the hostRef is very important during\n      // construction in order to directly wire together the\n      // host element and the lazy-loaded instance\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e);\n      }\n      if (BUILD.member) {\n        hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n      }\n\n      if (BUILD.watchCallback) {\n        hostRef.$flags$ |= 128 /* isWatchReady */;\n      }\n\n      endNewInstance();\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    } else {\n      // sync constructor component\n      Cstr = elm.constructor;\n      hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n      // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n      // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n      // Stencil has completed instantiating the component.\n      customElements.whenDefined(cmpMeta.$tagName$).then(() => hostRef.$flags$ |= 128 /* isWatchReady */);\n    }\n\n    if (BUILD.style && Cstr.style) {\n      // this component has styles but we haven't registered them yet\n      let style = Cstr.style;\n      if (BUILD.mode && typeof style !== 'string') {\n        style = style[hostRef.$modeName$ = computeMode(elm)];\n        if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n          elm.setAttribute('s-mode', hostRef.$modeName$);\n        }\n      }\n      const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n      if (!styles.has(scopeId)) {\n        const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n        if (!BUILD.hydrateServerSide && BUILD.shadowDom && BUILD.shadowDomShim && cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n          style = await import('./shadow-css.js').then(m => m.scopeCss(style, scopeId, false));\n        }\n        registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n        endRegisterStyles();\n      }\n    }\n  }\n  // we've successfully created a lazy instance\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  const schedule = () => scheduleUpdate(hostRef, true);\n  if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n    // this is the initial load and this component it has an ancestor component\n    // but the ancestor component has NOT fired its will update lifecycle yet\n    // so let's just cool our jets and wait for the ancestor to continue first\n    // this will get fired off when the ancestor component\n    // finally gets around to rendering its lazy self\n    // fire off the initial update\n    ancestorComponent['s-rc'].push(schedule);\n  } else {\n    schedule();\n  }\n};\nconst fireConnectedCallback = instance => {\n  if (BUILD.lazyLoad && BUILD.connectedCallback) {\n    safeCall(instance, 'connectedCallback');\n  }\n};\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n    if (BUILD.hostListenerTargetParent) {\n      // only run if we have listeners being attached to a parent\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n    }\n    if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1 /* hasConnected */;\n      let hostId;\n      if (BUILD.hydrateClientSide) {\n        hostId = elm.getAttribute(HYDRATE_ID);\n        if (hostId) {\n          if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            const scopeId = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode')) : addStyle(elm.shadowRoot, cmpMeta);\n            elm.classList.remove(scopeId + '-h', scopeId + '-s');\n          }\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n      if (BUILD.slotRelocation && !hostId) {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (BUILD.hydrateServerSide || (BUILD.slot || BUILD.shadowDom) && cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */)) {\n          setContentReference(elm);\n        }\n      }\n      if (BUILD.asyncLoading) {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (BUILD.hydrateClientSide && ancestorComponent.nodeType === 1 /* ElementNode */ && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p'] || ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      }\n      // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n      if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(_ref10 => {\n          let [memberName, [memberFlags]] = _ref10;\n          if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n      if (BUILD.initializeNextTick) {\n        // connectedCallback, taskQueue, initialLoad\n        // angular sets attribute AFTER connectCallback\n        // https://github.com/angular/angular/issues/18909\n        // https://github.com/angular/angular/issues/19940\n        nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n      } else {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n      // fire off connectedCallback() on component instance\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    }\n    endConnected();\n  }\n};\nconst setContentReference = elm => {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  const contentRefElm = elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : '');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    if (BUILD.hostListener) {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(rmListener => rmListener());\n        hostRef.$rmListeners$ = undefined;\n      }\n    }\n    // clear CSS var-shim tracking\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n      plt.$cssShim$.removeHost(elm);\n    }\n    if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n      safeCall(instance, 'disconnectedCallback');\n    }\n    if (BUILD.cmpDidUnload) {\n      safeCall(instance, 'componentDidUnload');\n    }\n  }\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n  const cmpMeta = {\n    $flags$: compactMeta[0],\n    $tagName$: compactMeta[1]\n  };\n  if (BUILD.member) {\n    cmpMeta.$members$ = compactMeta[2];\n  }\n  if (BUILD.hostListener) {\n    cmpMeta.$listeners$ = compactMeta[3];\n  }\n  if (BUILD.watchCallback) {\n    cmpMeta.$watchers$ = Cstr.$watchers$;\n  }\n  if (BUILD.reflect) {\n    cmpMeta.$attrsToReflect$ = [];\n  }\n  if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n    cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n  }\n\n  const originalConnectedCallback = Cstr.prototype.connectedCallback;\n  const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n  Object.assign(Cstr.prototype, {\n    __registerHost() {\n      registerHost(this, cmpMeta);\n    },\n    connectedCallback() {\n      connectedCallback(this);\n      if (BUILD.connectedCallback && originalConnectedCallback) {\n        originalConnectedCallback.call(this);\n      }\n    },\n    disconnectedCallback() {\n      disconnectedCallback(this);\n      if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n        originalDisconnectedCallback.call(this);\n      }\n    },\n    __attachShadow() {\n      if (supportsShadow) {\n        if (BUILD.shadowDelegatesFocus) {\n          this.attachShadow({\n            mode: 'open',\n            delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */)\n          });\n        } else {\n          this.attachShadow({\n            mode: 'open'\n          });\n        }\n      } else {\n        this.shadowRoot = this;\n      }\n    }\n  });\n  Cstr.is = cmpMeta.$tagName$;\n  return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);\n};\n\nconst forceModeUpdate = elm => {\n  if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n    const mode = computeMode(elm);\n    const hostRef = getHostRef(elm);\n    if (hostRef.$modeName$ !== mode) {\n      const cmpMeta = hostRef.$cmpMeta$;\n      const oldScopeId = elm['s-sc'];\n      const scopeId = getScopeId(cmpMeta, mode);\n      const style = elm.constructor.style[mode];\n      const flags = cmpMeta.$flags$;\n      if (style) {\n        if (!styles.has(scopeId)) {\n          registerStyle(scopeId, style, !!(flags & 1 /* shadowDomEncapsulation */));\n        }\n\n        hostRef.$modeName$ = mode;\n        elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n        attachStyles(hostRef);\n        forceUpdate(elm);\n      }\n    }\n  }\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n  // ¯\\_(ツ)_/¯\n  const hostRef = getHostRef(elm);\n  // reset state flags to only have been connected\n  hostRef.$flags$ = 1 /* hasConnected */;\n  // TODO\n  // detatch any event listeners that may have been added\n  // because we're not passing an exact event name it'll\n  // remove all of this element's event, which is good\n  // create a callback for when this component finishes hmr\n  elm['s-hmr-load'] = () => {\n    // finished hmr for this element\n    delete elm['s-hmr-load'];\n  };\n  // re-initialize the component\n  initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst patchCloneNode = HostElementPrototype => {\n  const orgCloneNode = HostElementPrototype.cloneNode;\n  HostElementPrototype.cloneNode = function (deep) {\n    const srcNode = this;\n    const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n    const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n    if (BUILD.slot && !isShadowDom && deep) {\n      let i = 0;\n      let slotted, nonStencilNode;\n      const stencilPrivates = ['s-id', 's-cr', 's-lr', 's-rc', 's-sc', 's-p', 's-cn', 's-sr', 's-sn', 's-hn', 's-ol', 's-nr', 's-si'];\n      for (; i < srcNode.childNodes.length; i++) {\n        slotted = srcNode.childNodes[i]['s-nr'];\n        nonStencilNode = stencilPrivates.every(privateField => !srcNode.childNodes[i][privateField]);\n        if (slotted) {\n          if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n            clonedNode.__appendChild(slotted.cloneNode(true));\n          } else {\n            clonedNode.appendChild(slotted.cloneNode(true));\n          }\n        }\n        if (nonStencilNode) {\n          clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n        }\n      }\n    }\n    return clonedNode;\n  };\n};\nconst patchSlotAppendChild = HostElementPrototype => {\n  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n  HostElementPrototype.appendChild = function (newChild) {\n    const slotName = newChild['s-sn'] = getSlotName(newChild);\n    const slotNode = getHostSlotNode(this.childNodes, slotName);\n    if (slotNode) {\n      const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n      const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n      return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n    }\n    return this.__appendChild(newChild);\n  };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n  if (BUILD.scoped && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n    const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n    Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n    Object.defineProperty(hostElementPrototype, 'textContent', {\n      get() {\n        var _a;\n        // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n        const slotNode = getHostSlotNode(this.childNodes, '');\n        // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n        // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n          return slotNode.nextSibling.textContent;\n        } else if (slotNode) {\n          return slotNode.textContent;\n        } else {\n          // fallback to the original implementation\n          return this.__textContent;\n        }\n      },\n      set(value) {\n        var _a;\n        // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n        const slotNode = getHostSlotNode(this.childNodes, '');\n        // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n        // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n        // sibling.\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n          slotNode.nextSibling.textContent = value;\n        } else if (slotNode) {\n          slotNode.textContent = value;\n        } else {\n          // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n          // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n          // it there\n          this.__textContent = value;\n          const contentRefElm = this['s-cr'];\n          if (contentRefElm) {\n            this.insertBefore(contentRefElm, this.firstChild);\n          }\n        }\n      }\n    });\n  }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n  class FakeNodeList extends Array {\n    item(n) {\n      return this[n];\n    }\n  }\n  if (cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n    const childNodesFn = elm.__lookupGetter__('childNodes');\n    Object.defineProperty(elm, 'children', {\n      get() {\n        return this.childNodes.map(n => n.nodeType === 1);\n      }\n    });\n    Object.defineProperty(elm, 'childElementCount', {\n      get() {\n        return elm.children.length;\n      }\n    });\n    Object.defineProperty(elm, 'childNodes', {\n      get() {\n        const childNodes = childNodesFn.call(this);\n        if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0 && getHostRef(this).$flags$ & 2 /* hasRendered */) {\n          const result = new FakeNodeList();\n          for (let i = 0; i < childNodes.length; i++) {\n            const slot = childNodes[i]['s-nr'];\n            if (slot) {\n              result.push(slot);\n            }\n          }\n          return result;\n        }\n        return FakeNodeList.from(childNodes);\n      }\n    });\n  }\n};\nconst getSlotName = node => node['s-sn'] || node.nodeType === 1 && node.getAttribute('slot') || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n  let i = 0;\n  let childNode;\n  for (; i < childNodes.length; i++) {\n    childNode = childNodes[i];\n    if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n      return childNode;\n    }\n    childNode = getHostSlotNode(childNode.childNodes, slotName);\n    if (childNode) {\n      return childNode;\n    }\n  }\n  return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n  const childNodes = [n];\n  while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n    childNodes.push(n);\n  }\n  return childNodes;\n};\nconst bootstrapLazy = function (lazyBundles) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (BUILD.profile && performance.mark) {\n    performance.mark('st:app:start');\n  }\n  installDevTools();\n  const endBootstrap = createTime('bootstrapLazy');\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  const styles = /*@__PURE__*/doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n  let appLoadFallback;\n  let isBootstrapping = true;\n  let i = 0;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  if (BUILD.asyncQueue) {\n    if (options.syncQueue) {\n      plt.$flags$ |= 4 /* queueSync */;\n    }\n  }\n\n  if (BUILD.hydrateClientSide) {\n    // If the app is already hydrated there is not point to disable the\n    // async queue. This will improve the first input delay\n    plt.$flags$ |= 2 /* appLoaded */;\n  }\n\n  if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n    for (; i < styles.length; i++) {\n      registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n    }\n  }\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n      if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = {};\n      }\n      if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n      }\n\n      const tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n          if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            if (supportsShadow) {\n              if (BUILD.shadowDelegatesFocus) {\n                self.attachShadow({\n                  mode: 'open',\n                  delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */)\n                });\n              } else {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            } else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n              self.shadowRoot = self;\n            }\n          }\n          if (BUILD.slotChildNodesFix) {\n            patchChildSlotNodes(self, cmpMeta);\n          }\n        }\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n      };\n      if (BUILD.cloneNodeFix) {\n        patchCloneNode(HostElement.prototype);\n      }\n      if (BUILD.appendChildSlotFix) {\n        patchSlotAppendChild(HostElement.prototype);\n      }\n      if (BUILD.hotModuleReplacement) {\n        HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n          hmrStart(this, cmpMeta, hmrVersionId);\n        };\n      }\n      if (BUILD.scopedSlotTextContentFix) {\n        patchTextContent(HostElement.prototype, cmpMeta);\n      }\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n      }\n    });\n  });\n\n  if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  }\n  // Process deferred connectedCallbacks now all components have been registered\n  isBootstrapping = false;\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    if (BUILD.profile) {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30, 'timeout'));\n    } else {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  }\n  // Fallback appLoad event\n  endBootstrap();\n};\nconst getAssetPath = path => {\n  const assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = path => plt.$resourcesUrl$ = path;\nconst getConnect = (_ref, tagName) => {\n  const componentOnReady = () => {\n    let elm = doc.querySelector(tagName);\n    if (!elm) {\n      elm = doc.createElement(tagName);\n      doc.body.appendChild(elm);\n    }\n    return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n  };\n  const create = function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return componentOnReady().then(el => el.create(...args));\n  };\n  return {\n    create,\n    componentOnReady\n  };\n};\nconst getContext = (_elm, context) => {\n  if (context in Context) {\n    return Context[context];\n  } else if (context === 'window') {\n    return win;\n  } else if (context === 'document') {\n    return doc;\n  } else if (context === 'isServer' || context === 'isPrerender') {\n    return BUILD.hydrateServerSide ? true : false;\n  } else if (context === 'isClient') {\n    return BUILD.hydrateServerSide ? false : true;\n  } else if (context === 'resourcesUrl' || context === 'publicPath') {\n    return getAssetPath('.');\n  } else if (context === 'queue') {\n    return {\n      write: writeTask,\n      read: readTask,\n      tick: {\n        then(cb) {\n          return nextTick(cb);\n        }\n      }\n    };\n  }\n  return undefined;\n};\nconst insertVdomAnnotations = (doc, staticComponents) => {\n  if (doc != null) {\n    const docData = {\n      hostIds: 0,\n      rootLevelIds: 0,\n      staticComponents: new Set(staticComponents)\n    };\n    const orgLocationNodes = [];\n    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n    orgLocationNodes.forEach(orgLocationNode => {\n      if (orgLocationNode != null) {\n        const nodeRef = orgLocationNode['s-nr'];\n        let hostId = nodeRef['s-host-id'];\n        let nodeId = nodeRef['s-node-id'];\n        let childId = `${hostId}.${nodeId}`;\n        if (hostId == null) {\n          hostId = 0;\n          docData.rootLevelIds++;\n          nodeId = docData.rootLevelIds;\n          childId = `${hostId}.${nodeId}`;\n          if (nodeRef.nodeType === 1 /* ElementNode */) {\n            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n          } else if (nodeRef.nodeType === 3 /* TextNode */) {\n            if (hostId === 0) {\n              const textContent = nodeRef.nodeValue.trim();\n              if (textContent === '') {\n                // useless whitespace node at the document root\n                orgLocationNode.remove();\n                return;\n              }\n            }\n            const commentBeforeTextNode = doc.createComment(childId);\n            commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n          }\n        }\n        let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n        const orgLocationParentNode = orgLocationNode.parentElement;\n        if (orgLocationParentNode) {\n          if (orgLocationParentNode['s-en'] === '') {\n            // ending with a \".\" means that the parent element\n            // of this node's original location is a SHADOW dom element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += `.`;\n          } else if (orgLocationParentNode['s-en'] === 'c') {\n            // ending with a \".c\" means that the parent element\n            // of this node's original location is a SCOPED element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += `.c`;\n          }\n        }\n        orgLocationNode.nodeValue = orgLocationNodeId;\n      }\n    });\n  }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n  if (node == null) {\n    return;\n  }\n  if (node['s-nr'] != null) {\n    orgLocationNodes.push(node);\n  }\n  if (node.nodeType === 1 /* ElementNode */) {\n    node.childNodes.forEach(childNode => {\n      const hostRef = getHostRef(childNode);\n      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n        const cmpData = {\n          nodeIds: 0\n        };\n        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n      }\n      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n    });\n  }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n  if (vnode != null) {\n    const hostId = ++docData.hostIds;\n    hostElm.setAttribute(HYDRATE_ID, hostId);\n    if (hostElm['s-cr'] != null) {\n      hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n    }\n    if (vnode.$children$ != null) {\n      const depth = 0;\n      vnode.$children$.forEach((vnodeChild, index) => {\n        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n      });\n    }\n    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n      const parent = hostElm.parentElement;\n      if (parent && parent.childNodes) {\n        const parentChildNodes = Array.from(parent.childNodes);\n        const comment = parentChildNodes.find(node => node.nodeType === 8 /* CommentNode */ && node['s-sr']);\n        if (comment) {\n          const index = parentChildNodes.indexOf(hostElm) - 1;\n          vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n        }\n      }\n    }\n  }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n  const childElm = vnodeChild.$elm$;\n  if (childElm == null) {\n    return;\n  }\n  const nodeId = cmpData.nodeIds++;\n  const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n  childElm['s-host-id'] = hostId;\n  childElm['s-node-id'] = nodeId;\n  if (childElm.nodeType === 1 /* ElementNode */) {\n    childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n  } else if (childElm.nodeType === 3 /* TextNode */) {\n    const parentNode = childElm.parentNode;\n    const nodeName = parentNode.nodeName;\n    if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n      const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n      const commentBeforeTextNode = doc.createComment(textNodeId);\n      parentNode.insertBefore(commentBeforeTextNode, childElm);\n    }\n  } else if (childElm.nodeType === 8 /* CommentNode */) {\n    if (childElm['s-sr']) {\n      const slotName = childElm['s-sn'] || '';\n      const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n      childElm.nodeValue = slotNodeId;\n    }\n  }\n  if (vnodeChild.$children$ != null) {\n    const childDepth = depth + 1;\n    vnodeChild.$children$.forEach((vnode, index) => {\n      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n    });\n  }\n};\nconst setPlatformOptions = opts => Object.assign(plt, opts);\nconst Fragment = (_, children) => children;\nconst hostRefs = new WeakMap();\nconst getHostRef = ref => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  if (BUILD.isDev) {\n    hostRef.$renderCount$ = 0;\n  }\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);\n  }\n  if (BUILD.asyncLoading) {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n  return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting ? ['STENCIL:'] // E2E testing\n: ['%cstencil', 'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px'];\nconst consoleDevError = function () {\n  for (var _len4 = arguments.length, m = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    m[_key4] = arguments[_key4];\n  }\n  return console.error(...STENCIL_DEV_MODE, ...m);\n};\nconst consoleDevWarn = function () {\n  for (var _len5 = arguments.length, m = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    m[_key5] = arguments[_key5];\n  }\n  return console.warn(...STENCIL_DEV_MODE, ...m);\n};\nconst consoleDevInfo = function () {\n  for (var _len6 = arguments.length, m = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    m[_key6] = arguments[_key6];\n  }\n  return console.info(...STENCIL_DEV_MODE, ...m);\n};\nconst setErrorHandler = handler => customError = handler;\nconst cmpModules = /*@__PURE__*/new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  if (BUILD.isDev && typeof bundleId !== 'string') {\n    consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n    return undefined;\n  }\n  const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n  if (module) {\n    return module[exportName];\n  }\n  /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n  return import( /* @vite-ignore */\n  /* webpackInclude: /\\.entry\\.js$/ */\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then(importedModule => {\n    if (!BUILD.hotModuleReplacement) {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n  if (!queuePending) {\n    queuePending = true;\n    if (write && plt.$flags$ & 4 /* queueSync */) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n  let i = 0;\n  let ts = 0;\n  while (i < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  if (i === queue.length) {\n    queue.length = 0;\n  } else if (i !== 0) {\n    queue.splice(0, i);\n  }\n};\nconst flush = () => {\n  if (BUILD.asyncQueue) {\n    queueCongestion++;\n  }\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads);\n  // DOM WRITES!!!\n  if (BUILD.asyncQueue) {\n    const timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */ ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0)) : Infinity;\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n    if (queueDomWrites.length > 0) {\n      queueDomWritesLow.push(...queueDomWrites);\n      queueDomWrites.length = 0;\n    }\n    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    } else {\n      queueCongestion = 0;\n    }\n  } else {\n    consume(queueDomWrites);\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nconst Build = {\n  isDev: BUILD.isDev ? true : false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: BUILD.isTesting ? true : false\n};\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructibleStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };","map":{"version":3,"names":["scopeId","contentRef","hostTagName","customError","i","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","renderingRef","queueCongestion","queuePending","BUILD","NAMESPACE","win","window","CSS","cssVarShim","doc","document","head","H","HTMLElement","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","setPlatformHelpers","helpers","Object","assign","supportsShadow","shadowDomShim","shadowDom","attachShadow","indexOf","supportsListenerOptions","defineProperty","get","e","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","constructableCSS","CSSStyleSheet","replace","Context","addHostEventListeners","elm","hostRef","listeners","attachParentListeners","hostListener","hostListenerTargetParent","filter","flags","map","name","method","target","hostListenerTarget","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","$rmListeners$","push","methodName","ev","lazyLoad","$lazyInstance$","$queuedListeners$","$hostElement$","consoleError","hostListenerTargetDocument","hostListenerTargetWindow","hostListenerTargetBody","body","parentElement","passive","capture","CONTENT_REF_ID","ORG_LOCATION_ID","SLOT_NODE_ID","TEXT_NODE_ID","HYDRATE_ID","HYDRATED_STYLE_ID","HYDRATE_CHILD_ID","HYDRATED_CSS","XLINK_NS","createTime","fnName","tagName","profile","performance","mark","key","measure","uniqueTime","measureText","getEntriesByName","length","inspect","ref","getHostRef","undefined","hostElement","renderCount","$renderCount$","hasRendered","hasConnected","isWaitingForChildren","isConstructingInstance","isQueuedForUpdate","hasInitializedComponent","hasLoadedComponent","isWatchReady","isListenReady","needsRerender","instanceValues","$instanceValues$","ancestorComponent","$ancestorComponent$","lazyInstance","vnode","$vnode$","modeName","$modeName$","onReadyPromise","$onReadyPromise$","onReadyResolve","$onReadyResolve$","onInstancePromise","$onInstancePromise$","onInstanceResolve","$onInstanceResolve$","onRenderResolve","$onRenderResolve$","queuedListeners","rmListeners","installDevTools","devTools","stencil","originalInspect","result","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","attachStyles","nodeType","appliedStyles","styleElm","Set","has","hydrateClientSide","host","querySelector","innerHTML","$cssShim$","createHostStyle","newScopeId","createElement","hydrateServerSide","hotModuleReplacement","setAttribute","insertBefore","add","adoptedStyleSheets","includes","$cmpMeta$","endAttachStyles","$tagName$","shadowRoot","getRootNode","scoped","cssAnnotations","classList","cmp","convertScopedToShadow","css","computeMode","modeResolutionChain","find","m","setMode","getMode","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","isComplexType","o","nodeName","vnodeData","child","slotName","simple","lastSimple","vNodeChildren","walk","c","Array","isArray","String","isDev","consoleDevError","$text$","newVNode","children","validateInputProperties","vdomKey","slotRelocation","vdomClass","classData","className","class","keys","k","join","some","isHost","vdomFunctional","vdomFnUtils","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","vdomAttribute","Host","node","forEach","cb","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","inputElm","props","value","typeIndex","minIndex","maxIndex","stepIndex","consoleDevWarn","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","vdomStyle","updatable","prop","removeProperty","setProperty","vdomRef","vdomListener","__lookupSetter__","slice","vdomPropOrAttr","isComplex","n","xlink","vdomXlink","getAttribute","removeAttributeNS","removeAttribute","setAttributeNS","parseClassListRegex","split","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","vdomText","createTextNode","isDebug","slotReferenceDebugNode","svg","createElementNS","appendChild","putBackInOriginalLocation","recursive","oldSlotChildNodes","childNodes","parentReferenceNode","referenceNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","parentNode","removeVnodes","callNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","nextSibling","vnode1","vnode2","oldChildren","newChildren","defaultHolder","reflect","slot","textContent","data","updateFallbackSlotVisibility","ilen","j","slotNameAttr","hidden","trim","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","r","$nodeToRelocate$","$slotRefNode$","relocateNode","nodeToRelocate","vNode","renderVdom","renderFnResults","rootVnode","Error","$attrsToReflect$","propName","attribute","relocateData","orgLocationNode","parentNodeRef","insertBeforeNode","refNode","originalLocationDebugNode","previousSibling","slotVNode","createComment","localName","getElement","createEvent","emit","detail","isConnected","emitEvent","bubbles","composed","cancelable","dispatchEvent","attachToAncestor","asyncLoading","scheduleUpdate","isInitialLoad","taskQueue","dispatch","dispatchHooks","writeTask","endSchedule","instance","promise","event","safeCall","emitLifecycleEvent","cmpWillLoad","cmpWillUpdate","cmpWillRender","then","updateComponent","endUpdate","rc","endRender","callRender","updateHost","serverSideConnected","childrenPromises","postUpdate","postUpdateComponent","all","allRenderFn","render","hasRenderFn","vdomRender","getRenderingRef","endPostUpdate","cmpDidRender","addHydratedFlag","cmpDidLoad","appDidLoad","cmpDidUpdate","nextTick","forceUpdate","who","documentElement","asyncQueue","namespace","arg","thenFn","lifecycleName","lifecycleDOMEvents","hydratedClass","hydratedAttribute","ii","childElm","connectedCallback","initializeClientHydrate","hostId","endHydrate","childRenderNodes","slotNodes","shadowRootNodes","$orgLocNodes$","initializeDocumentHydrate","Map","clientHydrate","orgLocationId","$hostId$","$nodeId$","delete","shadowRootNode","childNodeType","childIdSplt","childVNode","$depth$","$index$","nodeValue","orgLocNodes","parsePropertyValue","propValue","propType","propBoolean","propNumber","parseFloat","propString","getValue","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","watchCallback","$watchers$","watchMethods","watchMethodName","cmpShouldUpdate","componentShouldUpdate","proxyComponent","Cstr","member","watchers","members","entries","prototype","memberFlags","state","configurable","enumerable","args","observeAttribute","attrNameToPropName","attributeChangedCallback","attrName","_oldValue","hasOwnProperty","observedAttributes","_","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","constructor","customElements","whenDefined","endRegisterStyles","scopeCss","schedule","endConnected","$listeners$","setContentReference","hasAttribute","initializeNextTick","contentRefElm","firstChild","disconnectedCallback","rmListener","removeHost","cmpDidUnload","defineCustomElement","compactMeta","define","proxyCustomElement","originalConnectedCallback","originalDisconnectedCallback","__registerHost","registerHost","call","__attachShadow","shadowDelegatesFocus","delegatesFocus","is","forceModeUpdate","oldScopeId","hmrStart","patchCloneNode","HostElementPrototype","orgCloneNode","cloneNode","deep","srcNode","isShadowDom","clonedNode","slotted","nonStencilNode","stencilPrivates","every","privateField","appendChildSlotFix","__appendChild","patchSlotAppendChild","newChild","getSlotName","slotNode","getHostSlotNode","slotChildNodes","getHostSlotChildNodes","appendAfter","patchTextContent","hostElementPrototype","descriptor","getOwnPropertyDescriptor","Node","_a","__textContent","patchChildSlotNodes","FakeNodeList","item","childNodesFn","__lookupGetter__","from","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","metaCharset","visibilityStyle","deferredConnectedCallbacks","querySelectorAll","appLoadFallback","isBootstrapping","URL","resourcesUrl","baseURI","href","syncQueue","lazyBundle","transformTagName","HostElement","self","slotChildNodesFix","clearTimeout","componentOnReady","cloneNodeFix","scopedSlotTextContentFix","$lazyBundleId$","invisiblePrehydration","setTimeout","getAssetPath","path","assetUrl","origin","location","pathname","setAssetPath","getConnect","_ref","create","getContext","_elm","context","write","read","readTask","tick","insertVdomAnnotations","staticComponents","docData","hostIds","rootLevelIds","orgLocationNodes","parseVNodeAnnotations","nodeRef","nodeId","childId","commentBeforeTextNode","orgLocationNodeId","orgLocationParentNode","cmpData","nodeIds","insertVNodeAnnotations","depth","vnodeChild","index","insertChildVNodeAnnotations","parent","parentChildNodes","comment","textNodeId","slotNodeId","childDepth","setPlatformOptions","Fragment","hostRefs","registerInstance","console","error","STENCIL_DEV_MODE","isTesting","warn","consoleDevInfo","info","setErrorHandler","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueDomWritesLow","queueTask","queue","flush","consume","now","consumeTimeout","timeout","ts","splice","Math","ceil","Infinity","Build","isBrowser","isServer","Env"],"sources":["C:/Users/Alias/weboldal/web-login/node_modules/ionicons/node_modules/@stencil/core/internal/client/index.js"],"sourcesContent":["let scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v2.16.1 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst win = typeof window !== 'undefined' ? window : {};\nconst CSS = BUILD.cssVarShim ? win.CSS : null;\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = BUILD.shadowDomShim && BUILD.shadowDom\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\n    : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst Context = {};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (BUILD.hostListenerTargetDocument && flags & 4 /* TargetDocument */)\n        return doc;\n    if (BUILD.hostListenerTargetWindow && flags & 8 /* TargetWindow */)\n        return win;\n    if (BUILD.hostListenerTargetBody && flags & 16 /* TargetBody */)\n        return doc.body;\n    if (BUILD.hostListenerTargetParent && flags & 32 /* TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* Passive */) !== 0,\n        capture: (flags & 2 /* Capture */) !== 0,\n    })\n    : (flags & 2 /* Capture */) !== 0;\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst createTime = (fnName, tagName = '') => {\n    if (BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key).length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText).length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* hasRendered */),\n            hasConnected: !!(flags & 1 /* hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* isWatchReady */),\n            isListenReady: !!(flags & 256 /* isListenReady */),\n            needsRerender: !!(flags & 512 /* needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta, mode);\n    const style = styles.get(scopeId);\n    if (!BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (BUILD.hydrateClientSide &&\n                    styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    if (BUILD.cssVarShim && plt.$cssShim$) {\n                        styleElm = plt.$cssShim$.createHostStyle(hostElm, scopeId, style, !!(cmpMeta.$flags$ & 10 /* needsScopedEncapsulation */));\n                        const newScopeId = styleElm['s-sc'];\n                        if (newScopeId) {\n                            scopeId = newScopeId;\n                            // we don't want to add this styleID to the appliedStyles Set\n                            // since the cssVarShim might need to apply several different\n                            // stylesheets for the same component\n                            appliedStyles = null;\n                        }\n                    }\n                    else {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$, elm);\n    if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (BUILD.scoped && flags & 2 /* scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        // normalize class / classname attributes\n        if (BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        if (BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n * @param inputElm the element to validate\n */\nconst validateInputProperties = (inputElm) => {\n    const props = Object.keys(inputElm);\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('step');\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (BUILD.vdomListener &&\n            (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else if (BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* isSlotReference */;\n        }\n    }\n    if (BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            callNodeRefs(vnode);\n            if (BUILD.slotRelocation) {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // createKeyToOldIdx\n            idxInOld = -1;\n            if (BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (BUILD.vdomKey && idxInOld >= 0) {\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                if (BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (BUILD.updatable && newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        if (BUILD.slotRelocation && vnode1.$tag$ === 'slot') {\n            return vnode1.$name$ === vnode2.$name$;\n        }\n        if (BUILD.vdomKey) {\n            return vnode1.$key$ === vnode2.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!BUILD.vdomText || text === null) {\n        if (BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        // element node\n        if (BUILD.vdomAttribute || BUILD.reflect) {\n            if (BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    const childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* ElementNode */ ||\n                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    const childNodes = elm.childNodes;\n    const ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst callNodeRefs = (vNode) => {\n    if (BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(callNodeRefs);\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (BUILD.scoped || BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        BUILD.isDebug || BUILD.hydrateServerSide\n                            ? originalLocationDebugNode(nodeToRelocate)\n                            : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\n    (nodeToRelocate.localName\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\n        : `[${nodeToRelocate.textContent}]`));\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (BUILD.taskQueue && BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    let promise;\n    if (isInitialLoad) {\n        if (BUILD.lazyLoad && BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (BUILD.cmpWillLoad) {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (BUILD.cmpWillUpdate) {\n            promise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (BUILD.cmpWillRender) {\n        promise = then(promise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm);\n    }\n    else {\n        callRender(hostRef, instance, elm);\n    }\n    if (BUILD.cssVarShim && plt.$cssShim$) {\n        plt.$cssShim$.updateHost(elm);\n    }\n    if (BUILD.isDev) {\n        hostRef.$renderCount$++;\n        hostRef.$flags$ &= ~1024 /* devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (BUILD.asyncLoading) {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    // in order for bundlers to correctly treeshake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = BUILD.allRenderFn ? true : false;\n    const lazyLoad = BUILD.lazyLoad ? true : false;\n    const taskQueue = BUILD.taskQueue ? true : false;\n    const updatable = BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        if (BUILD.hasRenderFn || BUILD.reflect) {\n            if (BUILD.vdomRender || BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));\n                }\n                else {\n                    renderVdom(hostRef, instance);\n                }\n            }\n            else {\n                elm.textContent = instance;\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (BUILD.cmpDidRender) {\n        if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* devOnRender */;\n        }\n        safeCall(instance, 'componentDidRender');\n        if (BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (BUILD.cmpDidLoad) {\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* devOnDidLoad */;\n            }\n            safeCall(instance, 'componentDidLoad');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* devOnRender */;\n            }\n            safeCall(instance, 'componentDidUpdate');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (BUILD.hotModuleReplacement) {\n        elm['s-hmr-load'] && elm['s-hmr-load']();\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => BUILD.hydratedClass\n    ? elm.classList.add('hydrated')\n    : BUILD.hydratedAttribute\n        ? elm.setAttribute('hydrated', '')\n        : undefined;\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifcally for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (BUILD.propBoolean && propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (BUILD.propNumber && propType & 2 /* Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (BUILD.propString && propType & 1 /* String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!BUILD.lazyLoad || !(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (BUILD.updatable &&\n                (flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (BUILD.member && cmpMeta.$members$) {\n        if (BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((BUILD.prop || BUILD.state) &&\n                (memberFlags & 31 /* Prop */ ||\n                    ((!BUILD.lazyLoad || flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref.$flags$ & 8 /* isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (BUILD.lazyLoad &&\n                BUILD.method &&\n                flags & 1 /* isElementConstructor */ &&\n                memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (BUILD.reflect && m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((BUILD.lazyLoad || BUILD.hydrateServerSide || BUILD.style) &&\n        (hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (BUILD.member && !Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (BUILD.member) {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (BUILD.member) {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            if (BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n            // Stencil has completed instantiating the component.\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* isWatchReady */));\n        }\n        if (BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!BUILD.hydrateServerSide &&\n                    BUILD.shadowDom &&\n                    BUILD.shadowDomShim &&\n                    cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n                    style = await import('./shadow-css.js').then((m) => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (BUILD.lazyLoad && BUILD.connectedCallback) {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            let hostId;\n            if (BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        const scopeId = BUILD.mode\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (BUILD.hydrateServerSide ||\n                    ((BUILD.slot || BUILD.shadowDom) &&\n                        cmpMeta.$flags$ & (4 /* hasSlotRelocation */ | 8 /* needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((BUILD.hydrateClientSide &&\n                        ancestorComponent.nodeType === 1 /* ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        // clear CSS var-shim tracking\n        if (BUILD.cssVarShim && plt.$cssShim$) {\n            plt.$cssShim$.removeHost(elm);\n        }\n        if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n            safeCall(instance, 'disconnectedCallback');\n        }\n        if (BUILD.cmpDidUnload) {\n            safeCall(instance, 'componentDidUnload');\n        }\n    }\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n        __attachShadow() {\n            if (supportsShadow) {\n                if (BUILD.shadowDelegatesFocus) {\n                    this.attachShadow({\n                        mode: 'open',\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                    });\n                }\n                else {\n                    this.attachShadow({ mode: 'open' });\n                }\n            }\n            else {\n                this.shadowRoot = this;\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\nconst hmrStart = (elm, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(elm);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* hasConnected */;\n    // TODO\n    // detatch any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // create a callback for when this component finishes hmr\n    elm['s-hmr-load'] = () => {\n        // finished hmr for this element\n        delete elm['s-hmr-load'];\n    };\n    // re-initialize the component\n    initializeComponent(elm, hostRef, cmpMeta, hmrVersionId);\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            const stencilPrivates = [\n                's-id',\n                's-cr',\n                's-lr',\n                's-rc',\n                's-sc',\n                's-p',\n                's-cn',\n                's-sr',\n                's-sn',\n                's-hn',\n                's-ol',\n                's-nr',\n                's-si',\n            ];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* scopedCssEncapsulation */) {\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n        Object.defineProperty(hostElementPrototype, 'textContent', {\n            get() {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n                    return slotNode.nextSibling.textContent;\n                }\n                else if (slotNode) {\n                    return slotNode.textContent;\n                }\n                else {\n                    // fallback to the original implementation\n                    return this.__textContent;\n                }\n            },\n            set(value) {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n                // sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* TEXT_NODE */) {\n                    slotNode.nextSibling.textContent = value;\n                }\n                else if (slotNode) {\n                    slotNode.textContent = value;\n                }\n                else {\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n                    // it there\n                    this.__textContent = value;\n                    const contentRefElm = this['s-cr'];\n                    if (contentRefElm) {\n                        this.insertBefore(contentRefElm, this.firstChild);\n                    }\n                }\n            },\n        });\n    }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    if (cmpMeta.$flags$ & 8 /* needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0 &&\n                    getHostRef(this).$flags$ & 2 /* hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            if (BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (BUILD.watchCallback) {\n                cmpMeta.$watchers$ = {};\n            }\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;\n            }\n            const tagName = BUILD.transformTagName && options.transformTagName\n                ? options.transformTagName(cmpMeta.$tagName$)\n                : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* shadowDelegatesFocus */),\n                                });\n                            }\n                            else {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                    if (BUILD.slotChildNodesFix) {\n                        patchChildSlotNodes(self, cmpMeta);\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            if (BUILD.cloneNodeFix) {\n                patchCloneNode(HostElement.prototype);\n            }\n            if (BUILD.appendChildSlotFix) {\n                patchSlotAppendChild(HostElement.prototype);\n            }\n            if (BUILD.hotModuleReplacement) {\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            if (BUILD.scopedSlotTextContentFix) {\n                patchTextContent(HostElement.prototype, cmpMeta);\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst getConnect = (_ref, tagName) => {\n    const componentOnReady = () => {\n        let elm = doc.querySelector(tagName);\n        if (!elm) {\n            elm = doc.createElement(tagName);\n            doc.body.appendChild(elm);\n        }\n        return typeof elm.componentOnReady === 'function' ? elm.componentOnReady() : Promise.resolve(elm);\n    };\n    const create = (...args) => {\n        return componentOnReady().then((el) => el.create(...args));\n    };\n    return {\n        create,\n        componentOnReady,\n    };\n};\nconst getContext = (_elm, context) => {\n    if (context in Context) {\n        return Context[context];\n    }\n    else if (context === 'window') {\n        return win;\n    }\n    else if (context === 'document') {\n        return doc;\n    }\n    else if (context === 'isServer' || context === 'isPrerender') {\n        return BUILD.hydrateServerSide ? true : false;\n    }\n    else if (context === 'isClient') {\n        return BUILD.hydrateServerSide ? false : true;\n    }\n    else if (context === 'resourcesUrl' || context === 'publicPath') {\n        return getAssetPath('.');\n    }\n    else if (context === 'queue') {\n        return {\n            write: writeTask,\n            read: readTask,\n            tick: {\n                then(cb) {\n                    return nextTick(cb);\n                },\n            },\n        };\n    }\n    return undefined;\n};\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode) => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* ElementNode */) {\n        node.childNodes.forEach((childNode) => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst Fragment = (_, children) => children;\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : [\n        '%cstencil',\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\n    ];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => (customError = handler);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\n        if (!BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst modeResolutionChain = [];\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* queueMask */) === 2 /* appLoaded */\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\n            : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nconst Build = {\n    isDev: BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: BUILD.isTesting ? true : false,\n};\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, CSS, Context, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getConnect, getContext, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructibleStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };\n"],"mappings":"AAAA,IAAIA,OAAO;AACX,IAAIC,UAAU;AACd,IAAIC,WAAW;AACf,IAAIC,WAAW;AACf,IAAIC,CAAC,GAAG,CAAC;AACT,IAAIC,kBAAkB,GAAG,KAAK;AAC9B,IAAIC,2BAA2B,GAAG,KAAK;AACvC,IAAIC,iBAAiB,GAAG,KAAK;AAC7B,IAAIC,SAAS,GAAG,KAAK;AACrB,IAAIC,YAAY,GAAG,IAAI;AACvB,IAAIC,eAAe,GAAG,CAAC;AACvB,IAAIC,YAAY,GAAG,KAAK;AACxB;AACA;AACA;AACA,SAASC,KAAK,EAAEC,SAAS,QAAQ,iCAAiC;AAClE,MAAMC,GAAG,GAAG,OAAOC,MAAM,KAAK,WAAW,GAAGA,MAAM,GAAG,CAAC,CAAC;AACvD,MAAMC,GAAG,GAAGJ,KAAK,CAACK,UAAU,GAAGH,GAAG,CAACE,GAAG,GAAG,IAAI;AAC7C,MAAME,GAAG,GAAGJ,GAAG,CAACK,QAAQ,IAAI;EAAEC,IAAI,EAAE,CAAC;AAAE,CAAC;AACxC,MAAMC,CAAC,GAAIP,GAAG,CAACQ,WAAW,IAAI,MAAM,EAClC;AACF,MAAMC,GAAG,GAAG;EACRC,OAAO,EAAE,CAAC;EACVC,cAAc,EAAE,EAAE;EAClBC,GAAG,EAAGC,CAAC,IAAKA,CAAC,EAAE;EACfC,GAAG,EAAGD,CAAC,IAAKE,qBAAqB,CAACF,CAAC,CAAC;EACpCG,GAAG,EAAE,CAACC,EAAE,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,KAAKH,EAAE,CAACI,gBAAgB,CAACH,SAAS,EAAEC,QAAQ,EAAEC,IAAI,CAAC;EACtFE,GAAG,EAAE,CAACL,EAAE,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,KAAKH,EAAE,CAACM,mBAAmB,CAACL,SAAS,EAAEC,QAAQ,EAAEC,IAAI,CAAC;EACzFI,EAAE,EAAE,CAACN,SAAS,EAAEE,IAAI,KAAK,IAAIK,WAAW,CAACP,SAAS,EAAEE,IAAI;AAC5D,CAAC;AACD,MAAMM,kBAAkB,GAAIC,OAAO,IAAK;EACpCC,MAAM,CAACC,MAAM,CAACpB,GAAG,EAAEkB,OAAO,CAAC;AAC/B,CAAC;AACD,MAAMG,cAAc,GAAGhC,KAAK,CAACiC,aAAa,IAAIjC,KAAK,CAACkC,SAAS,GACvD,aAAc,CAAC,MAAM,CAAC5B,GAAG,CAACE,IAAI,CAAC2B,YAAY,GAAG,EAAE,EAAEC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,GAC5E,IAAI;AACV,MAAMC,uBAAuB,GAAG,aAAc,CAAC,MAAM;EACjD,IAAIA,uBAAuB,GAAG,KAAK;EACnC,IAAI;IACA/B,GAAG,CAACiB,gBAAgB,CAAC,GAAG,EAAE,IAAI,EAAEO,MAAM,CAACQ,cAAc,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE;MACjEC,GAAG,GAAG;QACFF,uBAAuB,GAAG,IAAI;MAClC;IACJ,CAAC,CAAC,CAAC;EACP,CAAC,CACD,OAAOG,CAAC,EAAE,CAAE;EACZ,OAAOH,uBAAuB;AAClC,CAAC,GAAG;AACJ,MAAMI,cAAc,GAAIC,CAAC,IAAKC,OAAO,CAACC,OAAO,CAACF,CAAC,CAAC;AAChD,MAAMG,gCAAgC,GAAG7C,KAAK,CAAC8C,gBAAgB,GACzD,aAAc,CAAC,MAAM;EACnB,IAAI;IACA,IAAIC,aAAa,EAAE;IACnB,OAAO,OAAO,IAAIA,aAAa,EAAE,CAACC,OAAO,KAAK,UAAU;EAC5D,CAAC,CACD,OAAOR,CAAC,EAAE,CAAE;EACZ,OAAO,KAAK;AAChB,CAAC,GAAG,GACF,KAAK;AACX,MAAMS,OAAO,GAAG,CAAC,CAAC;AAClB,MAAMC,qBAAqB,GAAG,CAACC,GAAG,EAAEC,OAAO,EAAEC,SAAS,EAAEC,qBAAqB,KAAK;EAC9E,IAAItD,KAAK,CAACuD,YAAY,IAAIF,SAAS,EAAE;IACjC;IACA;IACA;IACA;IACA,IAAIrD,KAAK,CAACwD,wBAAwB,EAAE;MAChC;MACA,IAAIF,qBAAqB,EAAE;QACvB;QACA;QACA;QACAD,SAAS,GAAGA,SAAS,CAACI,MAAM,CAAC;UAAA,IAAC,CAACC,KAAK,CAAC;UAAA,OAAKA,KAAK,GAAG,EAAE;QAAA,EAAC,mBAAmB;MAC5E,CAAC,MACI;QACD;QACA;QACA;QACAL,SAAS,GAAGA,SAAS,CAACI,MAAM,CAAC;UAAA,IAAC,CAACC,KAAK,CAAC;UAAA,OAAK,EAAEA,KAAK,GAAG,EAAE,CAAC,mBAAmB;QAAA,EAAC;MAC/E;IACJ;;IACAL,SAAS,CAACM,GAAG,CAAC,SAA2B;MAAA,IAA1B,CAACD,KAAK,EAAEE,IAAI,EAAEC,MAAM,CAAC;MAChC,MAAMC,MAAM,GAAG9D,KAAK,CAAC+D,kBAAkB,GAAGC,qBAAqB,CAACb,GAAG,EAAEO,KAAK,CAAC,GAAGP,GAAG;MACjF,MAAMc,OAAO,GAAGC,iBAAiB,CAACd,OAAO,EAAES,MAAM,CAAC;MAClD,MAAMvC,IAAI,GAAG6C,gBAAgB,CAACT,KAAK,CAAC;MACpC/C,GAAG,CAACO,GAAG,CAAC4C,MAAM,EAAEF,IAAI,EAAEK,OAAO,EAAE3C,IAAI,CAAC;MACpC,CAAC8B,OAAO,CAACgB,aAAa,GAAGhB,OAAO,CAACgB,aAAa,IAAI,EAAE,EAAEC,IAAI,CAAC,MAAM1D,GAAG,CAACa,GAAG,CAACsC,MAAM,EAAEF,IAAI,EAAEK,OAAO,EAAE3C,IAAI,CAAC,CAAC;IAC1G,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAM4C,iBAAiB,GAAG,CAACd,OAAO,EAAEkB,UAAU,KAAMC,EAAE,IAAK;EACvD,IAAI;IACA,IAAIvE,KAAK,CAACwE,QAAQ,EAAE;MAChB,IAAIpB,OAAO,CAACxC,OAAO,GAAG,GAAG,CAAC,qBAAqB;QAC3C;QACAwC,OAAO,CAACqB,cAAc,CAACH,UAAU,CAAC,CAACC,EAAE,CAAC;MAC1C,CAAC,MACI;QACD,CAACnB,OAAO,CAACsB,iBAAiB,GAAGtB,OAAO,CAACsB,iBAAiB,IAAI,EAAE,EAAEL,IAAI,CAAC,CAACC,UAAU,EAAEC,EAAE,CAAC,CAAC;MACxF;IACJ,CAAC,MACI;MACDnB,OAAO,CAACuB,aAAa,CAACL,UAAU,CAAC,CAACC,EAAE,CAAC;IACzC;EACJ,CAAC,CACD,OAAO/B,CAAC,EAAE;IACNoC,YAAY,CAACpC,CAAC,CAAC;EACnB;AACJ,CAAC;AACD,MAAMwB,qBAAqB,GAAG,CAACb,GAAG,EAAEO,KAAK,KAAK;EAC1C,IAAI1D,KAAK,CAAC6E,0BAA0B,IAAInB,KAAK,GAAG,CAAC,CAAC,sBAC9C,OAAOpD,GAAG;EACd,IAAIN,KAAK,CAAC8E,wBAAwB,IAAIpB,KAAK,GAAG,CAAC,CAAC,oBAC5C,OAAOxD,GAAG;EACd,IAAIF,KAAK,CAAC+E,sBAAsB,IAAIrB,KAAK,GAAG,EAAE,CAAC,kBAC3C,OAAOpD,GAAG,CAAC0E,IAAI;EACnB,IAAIhF,KAAK,CAACwD,wBAAwB,IAAIE,KAAK,GAAG,EAAE,CAAC,oBAC7C,OAAOP,GAAG,CAAC8B,aAAa;EAC5B,OAAO9B,GAAG;AACd,CAAC;AACD;AACA,MAAMgB,gBAAgB,GAAIT,KAAK,IAAKrB,uBAAuB,GACpD;EACC6C,OAAO,EAAE,CAACxB,KAAK,GAAG,CAAC,CAAC,mBAAmB,CAAC;EACxCyB,OAAO,EAAE,CAACzB,KAAK,GAAG,CAAC,CAAC,mBAAmB;AAC3C,CAAC,GACC,CAACA,KAAK,GAAG,CAAC,CAAC,mBAAmB,CAAC;AACrC,MAAM0B,cAAc,GAAG,GAAG;AAC1B,MAAMC,eAAe,GAAG,GAAG;AAC3B,MAAMC,YAAY,GAAG,GAAG;AACxB,MAAMC,YAAY,GAAG,GAAG;AACxB,MAAMC,UAAU,GAAG,MAAM;AACzB,MAAMC,iBAAiB,GAAG,QAAQ;AAClC,MAAMC,gBAAgB,GAAG,MAAM;AAC/B,MAAMC,YAAY,GAAG,kDAAkD;AACvE,MAAMC,QAAQ,GAAG,8BAA8B;AAC/C,MAAMC,UAAU,GAAG,UAACC,MAAM,EAAmB;EAAA,IAAjBC,OAAO,uEAAG,EAAE;EACpC,IAAI/F,KAAK,CAACgG,OAAO,IAAIC,WAAW,CAACC,IAAI,EAAE;IACnC,MAAMC,GAAG,GAAI,MAAKL,MAAO,IAAGC,OAAQ,IAAGvG,CAAC,EAAG,EAAC;IAC5C;IACAyG,WAAW,CAACC,IAAI,CAACC,GAAG,CAAC;IACrB;IACA,OAAO,MAAMF,WAAW,CAACG,OAAO,CAAE,aAAYN,MAAO,OAAMC,OAAQ,GAAE,EAAEI,GAAG,CAAC;EAC/E,CAAC,MACI;IACD,OAAO,MAAM;MACT;IACJ,CAAC;EACL;AACJ,CAAC;AACD,MAAME,UAAU,GAAG,CAACF,GAAG,EAAEG,WAAW,KAAK;EACrC,IAAItG,KAAK,CAACgG,OAAO,IAAIC,WAAW,CAACC,IAAI,EAAE;IACnC,IAAID,WAAW,CAACM,gBAAgB,CAACJ,GAAG,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;MAChDP,WAAW,CAACC,IAAI,CAACC,GAAG,CAAC;IACzB;IACA,OAAO,MAAM;MACT,IAAIF,WAAW,CAACM,gBAAgB,CAACD,WAAW,CAAC,CAACE,MAAM,KAAK,CAAC,EAAE;QACxDP,WAAW,CAACG,OAAO,CAACE,WAAW,EAAEH,GAAG,CAAC;MACzC;IACJ,CAAC;EACL,CAAC,MACI;IACD,OAAO,MAAM;MACT;IACJ,CAAC;EACL;AACJ,CAAC;AACD,MAAMM,OAAO,GAAIC,GAAG,IAAK;EACrB,MAAMtD,OAAO,GAAGuD,UAAU,CAACD,GAAG,CAAC;EAC/B,IAAI,CAACtD,OAAO,EAAE;IACV,OAAOwD,SAAS;EACpB;EACA,MAAMlD,KAAK,GAAGN,OAAO,CAACxC,OAAO;EAC7B,MAAMiG,WAAW,GAAGzD,OAAO,CAACuB,aAAa;EACzC,OAAO;IACHmC,WAAW,EAAE1D,OAAO,CAAC2D,aAAa;IAClCrD,KAAK,EAAE;MACHsD,WAAW,EAAE,CAAC,EAAEtD,KAAK,GAAG,CAAC,CAAC,kBAAkB;MAC5CuD,YAAY,EAAE,CAAC,EAAEvD,KAAK,GAAG,CAAC,CAAC,mBAAmB;MAC9CwD,oBAAoB,EAAE,CAAC,EAAExD,KAAK,GAAG,CAAC,CAAC,2BAA2B;MAC9DyD,sBAAsB,EAAE,CAAC,EAAEzD,KAAK,GAAG,CAAC,CAAC,6BAA6B;MAClE0D,iBAAiB,EAAE,CAAC,EAAE1D,KAAK,GAAG,EAAE,CAAC,wBAAwB;MACzD2D,uBAAuB,EAAE,CAAC,EAAE3D,KAAK,GAAG,EAAE,CAAC,8BAA8B;MACrE4D,kBAAkB,EAAE,CAAC,EAAE5D,KAAK,GAAG,EAAE,CAAC,yBAAyB;MAC3D6D,YAAY,EAAE,CAAC,EAAE7D,KAAK,GAAG,GAAG,CAAC,mBAAmB;MAChD8D,aAAa,EAAE,CAAC,EAAE9D,KAAK,GAAG,GAAG,CAAC,oBAAoB;MAClD+D,aAAa,EAAE,CAAC,EAAE/D,KAAK,GAAG,GAAG,CAAC;IAClC,CAAC;;IACDgE,cAAc,EAAEtE,OAAO,CAACuE,gBAAgB;IACxCC,iBAAiB,EAAExE,OAAO,CAACyE,mBAAmB;IAC9ChB,WAAW;IACXiB,YAAY,EAAE1E,OAAO,CAACqB,cAAc;IACpCsD,KAAK,EAAE3E,OAAO,CAAC4E,OAAO;IACtBC,QAAQ,EAAE7E,OAAO,CAAC8E,UAAU;IAC5BC,cAAc,EAAE/E,OAAO,CAACgF,gBAAgB;IACxCC,cAAc,EAAEjF,OAAO,CAACkF,gBAAgB;IACxCC,iBAAiB,EAAEnF,OAAO,CAACoF,mBAAmB;IAC9CC,iBAAiB,EAAErF,OAAO,CAACsF,mBAAmB;IAC9CC,eAAe,EAAEvF,OAAO,CAACwF,iBAAiB;IAC1CC,eAAe,EAAEzF,OAAO,CAACsB,iBAAiB;IAC1CoE,WAAW,EAAE1F,OAAO,CAACgB,aAAa;IAClC,CAAC,MAAM,GAAGyC,WAAW,CAAC,MAAM,CAAC;IAC7B,CAAC,MAAM,GAAGA,WAAW,CAAC,MAAM,CAAC;IAC7B,CAAC,MAAM,GAAGA,WAAW,CAAC,MAAM,CAAC;IAC7B,CAAC,KAAK,GAAGA,WAAW,CAAC,KAAK,CAAC;IAC3B,CAAC,MAAM,GAAGA,WAAW,CAAC,MAAM,CAAC;IAC7B,CAAC,MAAM,GAAGA,WAAW,CAAC,MAAM;EAChC,CAAC;AACL,CAAC;AACD,MAAMkC,eAAe,GAAG,MAAM;EAC1B,IAAI/I,KAAK,CAACgJ,QAAQ,EAAE;IAChB,MAAMC,OAAO,GAAI/I,GAAG,CAAC+I,OAAO,GAAG/I,GAAG,CAAC+I,OAAO,IAAI,CAAC,CAAE;IACjD,MAAMC,eAAe,GAAGD,OAAO,CAACxC,OAAO;IACvCwC,OAAO,CAACxC,OAAO,GAAIC,GAAG,IAAK;MACvB,IAAIyC,MAAM,GAAG1C,OAAO,CAACC,GAAG,CAAC;MACzB,IAAI,CAACyC,MAAM,IAAI,OAAOD,eAAe,KAAK,UAAU,EAAE;QAClDC,MAAM,GAAGD,eAAe,CAACxC,GAAG,CAAC;MACjC;MACA,OAAOyC,MAAM;IACjB,CAAC;EACL;AACJ,CAAC;AACD,MAAMC,iBAAiB,GAAG,IAAIC,OAAO,EAAE;AACvC,MAAMC,aAAa,GAAG,CAAClK,OAAO,EAAEmK,OAAO,EAAEC,OAAO,KAAK;EACjD,IAAIC,KAAK,GAAGC,MAAM,CAACnH,GAAG,CAACnD,OAAO,CAAC;EAC/B,IAAIyD,gCAAgC,IAAI2G,OAAO,EAAE;IAC7CC,KAAK,GAAIA,KAAK,IAAI,IAAI1G,aAAa,EAAG;IACtC0G,KAAK,CAACzG,OAAO,CAACuG,OAAO,CAAC;EAC1B,CAAC,MACI;IACDE,KAAK,GAAGF,OAAO;EACnB;EACAG,MAAM,CAACC,GAAG,CAACvK,OAAO,EAAEqK,KAAK,CAAC;AAC9B,CAAC;AACD,MAAMG,QAAQ,GAAG,CAACC,kBAAkB,EAAEC,OAAO,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC7D,IAAI5K,OAAO,GAAG6K,UAAU,CAACH,OAAO,EAAEC,IAAI,CAAC;EACvC,MAAMN,KAAK,GAAGC,MAAM,CAACnH,GAAG,CAACnD,OAAO,CAAC;EACjC,IAAI,CAACY,KAAK,CAACkK,YAAY,EAAE;IACrB,OAAO9K,OAAO;EAClB;EACA;EACA;EACAyK,kBAAkB,GAAGA,kBAAkB,CAACM,QAAQ,KAAK,EAAE,CAAC,yBAAyBN,kBAAkB,GAAGvJ,GAAG;EACzG,IAAImJ,KAAK,EAAE;IACP,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3BI,kBAAkB,GAAGA,kBAAkB,CAACrJ,IAAI,IAAIqJ,kBAAkB;MAClE,IAAIO,aAAa,GAAGhB,iBAAiB,CAAC7G,GAAG,CAACsH,kBAAkB,CAAC;MAC7D,IAAIQ,QAAQ;MACZ,IAAI,CAACD,aAAa,EAAE;QAChBhB,iBAAiB,CAACO,GAAG,CAACE,kBAAkB,EAAGO,aAAa,GAAG,IAAIE,GAAG,EAAE,CAAE;MAC1E;MACA,IAAI,CAACF,aAAa,CAACG,GAAG,CAACnL,OAAO,CAAC,EAAE;QAC7B,IAAIY,KAAK,CAACwK,iBAAiB,IACvBX,kBAAkB,CAACY,IAAI,KACtBJ,QAAQ,GAAGR,kBAAkB,CAACa,aAAa,CAAE,IAAGjF,iBAAkB,KAAIrG,OAAQ,IAAG,CAAC,CAAC,EAAE;UACtF;UACAiL,QAAQ,CAACM,SAAS,GAAGlB,KAAK;QAC9B,CAAC,MACI;UACD,IAAIzJ,KAAK,CAACK,UAAU,IAAIM,GAAG,CAACiK,SAAS,EAAE;YACnCP,QAAQ,GAAG1J,GAAG,CAACiK,SAAS,CAACC,eAAe,CAACb,OAAO,EAAE5K,OAAO,EAAEqK,KAAK,EAAE,CAAC,EAAEK,OAAO,CAAClJ,OAAO,GAAG,EAAE,CAAC,+BAA+B,CAAC;YAC1H,MAAMkK,UAAU,GAAGT,QAAQ,CAAC,MAAM,CAAC;YACnC,IAAIS,UAAU,EAAE;cACZ1L,OAAO,GAAG0L,UAAU;cACpB;cACA;cACA;cACAV,aAAa,GAAG,IAAI;YACxB;UACJ,CAAC,MACI;YACDC,QAAQ,GAAG/J,GAAG,CAACyK,aAAa,CAAC,OAAO,CAAC;YACrCV,QAAQ,CAACM,SAAS,GAAGlB,KAAK;UAC9B;UACA,IAAIzJ,KAAK,CAACgL,iBAAiB,IAAIhL,KAAK,CAACiL,oBAAoB,EAAE;YACvDZ,QAAQ,CAACa,YAAY,CAACzF,iBAAiB,EAAErG,OAAO,CAAC;UACrD;UACAyK,kBAAkB,CAACsB,YAAY,CAACd,QAAQ,EAAER,kBAAkB,CAACa,aAAa,CAAC,MAAM,CAAC,CAAC;QACvF;QACA,IAAIN,aAAa,EAAE;UACfA,aAAa,CAACgB,GAAG,CAAChM,OAAO,CAAC;QAC9B;MACJ;IACJ,CAAC,MACI,IAAIY,KAAK,CAAC8C,gBAAgB,IAAI,CAAC+G,kBAAkB,CAACwB,kBAAkB,CAACC,QAAQ,CAAC7B,KAAK,CAAC,EAAE;MACvFI,kBAAkB,CAACwB,kBAAkB,GAAG,CAAC,GAAGxB,kBAAkB,CAACwB,kBAAkB,EAAE5B,KAAK,CAAC;IAC7F;EACJ;EACA,OAAOrK,OAAO;AAClB,CAAC;AACD,MAAM8K,YAAY,GAAI9G,OAAO,IAAK;EAC9B,MAAM0G,OAAO,GAAG1G,OAAO,CAACmI,SAAS;EACjC,MAAMpI,GAAG,GAAGC,OAAO,CAACuB,aAAa;EACjC,MAAMjB,KAAK,GAAGoG,OAAO,CAAClJ,OAAO;EAC7B,MAAM4K,eAAe,GAAG3F,UAAU,CAAC,cAAc,EAAEiE,OAAO,CAAC2B,SAAS,CAAC;EACrE,MAAMrM,OAAO,GAAGwK,QAAQ,CAAC5J,KAAK,CAACkC,SAAS,IAAIF,cAAc,IAAImB,GAAG,CAACuI,UAAU,GAAGvI,GAAG,CAACuI,UAAU,GAAGvI,GAAG,CAACwI,WAAW,EAAE,EAAE7B,OAAO,EAAE1G,OAAO,CAAC8E,UAAU,EAAE/E,GAAG,CAAC;EACpJ,IAAI,CAACnD,KAAK,CAACkC,SAAS,IAAIlC,KAAK,CAAC4L,MAAM,KAAK5L,KAAK,CAAC6L,cAAc,IAAInI,KAAK,GAAG,EAAE,CAAC,gCAAgC;IACxG;IACA;IACA;IACA;IACA;IACA;IACA;IACAP,GAAG,CAAC,MAAM,CAAC,GAAG/D,OAAO;IACrB+D,GAAG,CAAC2I,SAAS,CAACV,GAAG,CAAChM,OAAO,GAAG,IAAI,CAAC;IACjC,IAAIY,KAAK,CAAC4L,MAAM,IAAIlI,KAAK,GAAG,CAAC,CAAC,8BAA8B;MACxDP,GAAG,CAAC2I,SAAS,CAACV,GAAG,CAAChM,OAAO,GAAG,IAAI,CAAC;IACrC;EACJ;EACAoM,eAAe,EAAE;AACrB,CAAC;AACD,MAAMvB,UAAU,GAAG,CAAC8B,GAAG,EAAEhC,IAAI,KAAK,KAAK,IAAI/J,KAAK,CAAC+J,IAAI,IAAIA,IAAI,IAAIgC,GAAG,CAACnL,OAAO,GAAG,EAAE,CAAC,gBAAgBmL,GAAG,CAACN,SAAS,GAAG,GAAG,GAAG1B,IAAI,GAAGgC,GAAG,CAACN,SAAS,CAAC;AAC7I,MAAMO,qBAAqB,GAAIC,GAAG,IAAKA,GAAG,CAACjJ,OAAO,CAAC,6BAA6B,EAAE,KAAK,CAAC;AACxF;AACA,MAAMkJ,WAAW,GAAI/I,GAAG,IAAKgJ,mBAAmB,CAACxI,GAAG,CAAE5C,CAAC,IAAKA,CAAC,CAACoC,GAAG,CAAC,CAAC,CAACiJ,IAAI,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC;AACpF;AACA,MAAMC,OAAO,GAAIrI,OAAO,IAAKkI,mBAAmB,CAAC9H,IAAI,CAACJ,OAAO,CAAC;AAC9D,MAAMsI,OAAO,GAAI7F,GAAG,IAAKC,UAAU,CAACD,GAAG,CAAC,CAACwB,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsE,SAAS,GAAG,CAAC,CAAC;AACpB;AACA;AACA;AACA,MAAMC,MAAM,GAAG,4BAA4B;AAC3C,MAAMC,OAAO,GAAG,8BAA8B;AAC9C,MAAMC,KAAK,GAAIjK,CAAC,IAAKA,CAAC,IAAI,IAAI;AAC9B,MAAMkK,aAAa,GAAIC,CAAC,IAAK;EACzB;EACAA,CAAC,GAAG,OAAOA,CAAC;EACZ,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,KAAK,UAAU;AAC7C,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM9L,CAAC,GAAG,UAAC+L,QAAQ,EAAEC,SAAS,EAAkB;EAC5C,IAAIC,KAAK,GAAG,IAAI;EAChB,IAAI7G,GAAG,GAAG,IAAI;EACd,IAAI8G,QAAQ,GAAG,IAAI;EACnB,IAAIC,MAAM,GAAG,KAAK;EAClB,IAAIC,UAAU,GAAG,KAAK;EACtB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,IAAI,GAAIC,CAAC,IAAK;IAChB,KAAK,IAAI9N,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8N,CAAC,CAAC9G,MAAM,EAAEhH,CAAC,EAAE,EAAE;MAC/BwN,KAAK,GAAGM,CAAC,CAAC9N,CAAC,CAAC;MACZ,IAAI+N,KAAK,CAACC,OAAO,CAACR,KAAK,CAAC,EAAE;QACtBK,IAAI,CAACL,KAAK,CAAC;MACf,CAAC,MACI,IAAIA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;QAClD,IAAKE,MAAM,GAAG,OAAOJ,QAAQ,KAAK,UAAU,IAAI,CAACF,aAAa,CAACI,KAAK,CAAC,EAAG;UACpEA,KAAK,GAAGS,MAAM,CAACT,KAAK,CAAC;QACzB,CAAC,MACI,IAAIhN,KAAK,CAAC0N,KAAK,IAAI,OAAOZ,QAAQ,KAAK,UAAU,IAAIE,KAAK,CAACpM,OAAO,KAAKgG,SAAS,EAAE;UACnF+G,eAAe,CAAE;AACrC;AACA,gFAAgF,CAAC;QACjE;QACA,IAAIT,MAAM,IAAIC,UAAU,EAAE;UACtB;UACAC,aAAa,CAACA,aAAa,CAAC5G,MAAM,GAAG,CAAC,CAAC,CAACoH,MAAM,IAAIZ,KAAK;QAC3D,CAAC,MACI;UACD;UACAI,aAAa,CAAC/I,IAAI,CAAC6I,MAAM,GAAGW,QAAQ,CAAC,IAAI,EAAEb,KAAK,CAAC,GAAGA,KAAK,CAAC;QAC9D;QACAG,UAAU,GAAGD,MAAM;MACvB;IACJ;EACJ,CAAC;EAAC,kCAjC6BY,QAAQ;IAARA,QAAQ;EAAA;EAkCvCT,IAAI,CAACS,QAAQ,CAAC;EACd,IAAIf,SAAS,EAAE;IACX,IAAI/M,KAAK,CAAC0N,KAAK,IAAIZ,QAAQ,KAAK,OAAO,EAAE;MACrCiB,uBAAuB,CAAChB,SAAS,CAAC;IACtC;IACA;IACA,IAAI/M,KAAK,CAACgO,OAAO,IAAIjB,SAAS,CAAC5G,GAAG,EAAE;MAChCA,GAAG,GAAG4G,SAAS,CAAC5G,GAAG;IACvB;IACA,IAAInG,KAAK,CAACiO,cAAc,IAAIlB,SAAS,CAACnJ,IAAI,EAAE;MACxCqJ,QAAQ,GAAGF,SAAS,CAACnJ,IAAI;IAC7B;IACA,IAAI5D,KAAK,CAACkO,SAAS,EAAE;MACjB,MAAMC,SAAS,GAAGpB,SAAS,CAACqB,SAAS,IAAIrB,SAAS,CAACsB,KAAK;MACxD,IAAIF,SAAS,EAAE;QACXpB,SAAS,CAACsB,KAAK,GACX,OAAOF,SAAS,KAAK,QAAQ,GACvBA,SAAS,GACTrM,MAAM,CAACwM,IAAI,CAACH,SAAS,CAAC,CACnB1K,MAAM,CAAE8K,CAAC,IAAKJ,SAAS,CAACI,CAAC,CAAC,CAAC,CAC3BC,IAAI,CAAC,GAAG,CAAC;MAC1B;IACJ;EACJ;EACA,IAAIxO,KAAK,CAAC0N,KAAK,IAAIN,aAAa,CAACqB,IAAI,CAACC,MAAM,CAAC,EAAE;IAC3Cf,eAAe,CAAE;AACzB;AACA,oFAAoF,CAAC;EACjF;EACA,IAAI3N,KAAK,CAAC2O,cAAc,IAAI,OAAO7B,QAAQ,KAAK,UAAU,EAAE;IACxD;IACA,OAAOA,QAAQ,CAACC,SAAS,KAAK,IAAI,GAAG,CAAC,CAAC,GAAGA,SAAS,EAAEK,aAAa,EAAEwB,WAAW,CAAC;EACpF;EACA,MAAM7G,KAAK,GAAG8F,QAAQ,CAACf,QAAQ,EAAE,IAAI,CAAC;EACtC/E,KAAK,CAAC8G,OAAO,GAAG9B,SAAS;EACzB,IAAIK,aAAa,CAAC5G,MAAM,GAAG,CAAC,EAAE;IAC1BuB,KAAK,CAAC+G,UAAU,GAAG1B,aAAa;EACpC;EACA,IAAIpN,KAAK,CAACgO,OAAO,EAAE;IACfjG,KAAK,CAACgH,KAAK,GAAG5I,GAAG;EACrB;EACA,IAAInG,KAAK,CAACiO,cAAc,EAAE;IACtBlG,KAAK,CAACiH,MAAM,GAAG/B,QAAQ;EAC3B;EACA,OAAOlF,KAAK;AAChB,CAAC;AACD,MAAM8F,QAAQ,GAAG,CAACoB,GAAG,EAAEC,IAAI,KAAK;EAC5B,MAAMnH,KAAK,GAAG;IACVnH,OAAO,EAAE,CAAC;IACVuO,KAAK,EAAEF,GAAG;IACVrB,MAAM,EAAEsB,IAAI;IACZE,KAAK,EAAE,IAAI;IACXN,UAAU,EAAE;EAChB,CAAC;EACD,IAAI9O,KAAK,CAACqP,aAAa,EAAE;IACrBtH,KAAK,CAAC8G,OAAO,GAAG,IAAI;EACxB;EACA,IAAI7O,KAAK,CAACgO,OAAO,EAAE;IACfjG,KAAK,CAACgH,KAAK,GAAG,IAAI;EACtB;EACA,IAAI/O,KAAK,CAACiO,cAAc,EAAE;IACtBlG,KAAK,CAACiH,MAAM,GAAG,IAAI;EACvB;EACA,OAAOjH,KAAK;AAChB,CAAC;AACD,MAAMuH,IAAI,GAAG,CAAC,CAAC;AACf,MAAMZ,MAAM,GAAIa,IAAI,IAAKA,IAAI,IAAIA,IAAI,CAACJ,KAAK,KAAKG,IAAI;AACpD,MAAMV,WAAW,GAAG;EAChBY,OAAO,EAAE,CAAC1B,QAAQ,EAAE2B,EAAE,KAAK3B,QAAQ,CAACnK,GAAG,CAAC+L,eAAe,CAAC,CAACF,OAAO,CAACC,EAAE,CAAC;EACpE9L,GAAG,EAAE,CAACmK,QAAQ,EAAE2B,EAAE,KAAK3B,QAAQ,CAACnK,GAAG,CAAC+L,eAAe,CAAC,CAAC/L,GAAG,CAAC8L,EAAE,CAAC,CAAC9L,GAAG,CAACgM,gBAAgB;AACrF,CAAC;AACD,MAAMD,eAAe,GAAIH,IAAI,KAAM;EAC/BK,MAAM,EAAEL,IAAI,CAACV,OAAO;EACpBgB,SAAS,EAAEN,IAAI,CAACT,UAAU;EAC1BgB,IAAI,EAAEP,IAAI,CAACR,KAAK;EAChBgB,KAAK,EAAER,IAAI,CAACP,MAAM;EAClBgB,IAAI,EAAET,IAAI,CAACJ,KAAK;EAChBc,KAAK,EAAEV,IAAI,CAAC3B;AAChB,CAAC,CAAC;AACF,MAAM+B,gBAAgB,GAAIJ,IAAI,IAAK;EAC/B,IAAI,OAAOA,IAAI,CAACS,IAAI,KAAK,UAAU,EAAE;IACjC,MAAMjD,SAAS,GAAGjL,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEwN,IAAI,CAACK,MAAM,CAAC;IAChD,IAAIL,IAAI,CAACO,IAAI,EAAE;MACX/C,SAAS,CAAC5G,GAAG,GAAGoJ,IAAI,CAACO,IAAI;IAC7B;IACA,IAAIP,IAAI,CAACQ,KAAK,EAAE;MACZhD,SAAS,CAACnJ,IAAI,GAAG2L,IAAI,CAACQ,KAAK;IAC/B;IACA,OAAOhP,CAAC,CAACwO,IAAI,CAACS,IAAI,EAAEjD,SAAS,EAAE,IAAIwC,IAAI,CAACM,SAAS,IAAI,EAAE,CAAC,CAAC;EAC7D;EACA,MAAM9H,KAAK,GAAG8F,QAAQ,CAAC0B,IAAI,CAACS,IAAI,EAAET,IAAI,CAACU,KAAK,CAAC;EAC7ClI,KAAK,CAAC8G,OAAO,GAAGU,IAAI,CAACK,MAAM;EAC3B7H,KAAK,CAAC+G,UAAU,GAAGS,IAAI,CAACM,SAAS;EACjC9H,KAAK,CAACgH,KAAK,GAAGQ,IAAI,CAACO,IAAI;EACvB/H,KAAK,CAACiH,MAAM,GAAGO,IAAI,CAACQ,KAAK;EACzB,OAAOhI,KAAK;AAChB,CAAC;AACD;AACA;AACA;AACA;AACA,MAAMgG,uBAAuB,GAAImC,QAAQ,IAAK;EAC1C,MAAMC,KAAK,GAAGrO,MAAM,CAACwM,IAAI,CAAC4B,QAAQ,CAAC;EACnC,MAAME,KAAK,GAAGD,KAAK,CAAC/N,OAAO,CAAC,OAAO,CAAC;EACpC,IAAIgO,KAAK,KAAK,CAAC,CAAC,EAAE;IACd;EACJ;EACA,MAAMC,SAAS,GAAGF,KAAK,CAAC/N,OAAO,CAAC,MAAM,CAAC;EACvC,MAAMkO,QAAQ,GAAGH,KAAK,CAAC/N,OAAO,CAAC,KAAK,CAAC;EACrC,MAAMmO,QAAQ,GAAGJ,KAAK,CAAC/N,OAAO,CAAC,KAAK,CAAC;EACrC,MAAMoO,SAAS,GAAGL,KAAK,CAAC/N,OAAO,CAAC,MAAM,CAAC;EACvC,IAAIgO,KAAK,GAAGC,SAAS,IAAID,KAAK,GAAGE,QAAQ,IAAIF,KAAK,GAAGG,QAAQ,IAAIH,KAAK,GAAGI,SAAS,EAAE;IAChFC,cAAc,CAAE,iFAAgF,CAAC;EACrG;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,CAACvN,GAAG,EAAEwN,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEpN,KAAK,KAAK;EACvE,IAAIkN,QAAQ,KAAKC,QAAQ,EAAE;IACvB,IAAIE,MAAM,GAAGC,iBAAiB,CAAC7N,GAAG,EAAEwN,UAAU,CAAC;IAC/C,IAAIM,EAAE,GAAGN,UAAU,CAACO,WAAW,EAAE;IACjC,IAAIlR,KAAK,CAACkO,SAAS,IAAIyC,UAAU,KAAK,OAAO,EAAE;MAC3C,MAAM7E,SAAS,GAAG3I,GAAG,CAAC2I,SAAS;MAC/B,MAAMqF,UAAU,GAAGC,cAAc,CAACR,QAAQ,CAAC;MAC3C,MAAMS,UAAU,GAAGD,cAAc,CAACP,QAAQ,CAAC;MAC3C/E,SAAS,CAACwF,MAAM,CAAC,GAAGH,UAAU,CAAC1N,MAAM,CAAE6J,CAAC,IAAKA,CAAC,IAAI,CAAC+D,UAAU,CAAC/F,QAAQ,CAACgC,CAAC,CAAC,CAAC,CAAC;MAC3ExB,SAAS,CAACV,GAAG,CAAC,GAAGiG,UAAU,CAAC5N,MAAM,CAAE6J,CAAC,IAAKA,CAAC,IAAI,CAAC6D,UAAU,CAAC7F,QAAQ,CAACgC,CAAC,CAAC,CAAC,CAAC;IAC5E,CAAC,MACI,IAAItN,KAAK,CAACuR,SAAS,IAAIZ,UAAU,KAAK,OAAO,EAAE;MAChD;MACA,IAAI3Q,KAAK,CAACwR,SAAS,EAAE;QACjB,KAAK,MAAMC,IAAI,IAAIb,QAAQ,EAAE;UACzB,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACY,IAAI,CAAC,IAAI,IAAI,EAAE;YACrC,IAAI,CAACzR,KAAK,CAACgL,iBAAiB,IAAIyG,IAAI,CAACnG,QAAQ,CAAC,GAAG,CAAC,EAAE;cAChDnI,GAAG,CAACsG,KAAK,CAACiI,cAAc,CAACD,IAAI,CAAC;YAClC,CAAC,MACI;cACDtO,GAAG,CAACsG,KAAK,CAACgI,IAAI,CAAC,GAAG,EAAE;YACxB;UACJ;QACJ;MACJ;MACA,KAAK,MAAMA,IAAI,IAAIZ,QAAQ,EAAE;QACzB,IAAI,CAACD,QAAQ,IAAIC,QAAQ,CAACY,IAAI,CAAC,KAAKb,QAAQ,CAACa,IAAI,CAAC,EAAE;UAChD,IAAI,CAACzR,KAAK,CAACgL,iBAAiB,IAAIyG,IAAI,CAACnG,QAAQ,CAAC,GAAG,CAAC,EAAE;YAChDnI,GAAG,CAACsG,KAAK,CAACkI,WAAW,CAACF,IAAI,EAAEZ,QAAQ,CAACY,IAAI,CAAC,CAAC;UAC/C,CAAC,MACI;YACDtO,GAAG,CAACsG,KAAK,CAACgI,IAAI,CAAC,GAAGZ,QAAQ,CAACY,IAAI,CAAC;UACpC;QACJ;MACJ;IACJ,CAAC,MACI,IAAIzR,KAAK,CAACgO,OAAO,IAAI2C,UAAU,KAAK,KAAK,EAC1C,CAAC,KACA,IAAI3Q,KAAK,CAAC4R,OAAO,IAAIjB,UAAU,KAAK,KAAK,EAAE;MAC5C;MACA,IAAIE,QAAQ,EAAE;QACVA,QAAQ,CAAC1N,GAAG,CAAC;MACjB;IACJ,CAAC,MACI,IAAInD,KAAK,CAAC6R,YAAY,KACtB7R,KAAK,CAACwE,QAAQ,GAAG,CAACuM,MAAM,GAAG,CAAC5N,GAAG,CAAC2O,gBAAgB,CAACnB,UAAU,CAAC,CAAC,IAC9DA,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,IACrBA,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACvB;MACA;MACA;MACA;MACA,IAAIA,UAAU,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACvB;QACA;QACA;QACA;QACA;QACA;QACA;QACAA,UAAU,GAAGA,UAAU,CAACoB,KAAK,CAAC,CAAC,CAAC;MACpC,CAAC,MACI,IAAIf,iBAAiB,CAAC9Q,GAAG,EAAE+Q,EAAE,CAAC,EAAE;QACjC;QACA;QACA;QACA;QACAN,UAAU,GAAGM,EAAE,CAACc,KAAK,CAAC,CAAC,CAAC;MAC5B,CAAC,MACI;QACD;QACA;QACA;QACA;QACA;QACApB,UAAU,GAAGM,EAAE,CAAC,CAAC,CAAC,GAAGN,UAAU,CAACoB,KAAK,CAAC,CAAC,CAAC;MAC5C;MACA,IAAInB,QAAQ,EAAE;QACVjQ,GAAG,CAACa,GAAG,CAAC2B,GAAG,EAAEwN,UAAU,EAAEC,QAAQ,EAAE,KAAK,CAAC;MAC7C;MACA,IAAIC,QAAQ,EAAE;QACVlQ,GAAG,CAACO,GAAG,CAACiC,GAAG,EAAEwN,UAAU,EAAEE,QAAQ,EAAE,KAAK,CAAC;MAC7C;IACJ,CAAC,MACI,IAAI7Q,KAAK,CAACgS,cAAc,EAAE;MAC3B;MACA,MAAMC,SAAS,GAAGrF,aAAa,CAACiE,QAAQ,CAAC;MACzC,IAAI,CAACE,MAAM,IAAKkB,SAAS,IAAIpB,QAAQ,KAAK,IAAK,KAAK,CAACC,KAAK,EAAE;QACxD,IAAI;UACA,IAAI,CAAC3N,GAAG,CAAC4C,OAAO,CAACuF,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC5B,MAAM4G,CAAC,GAAGrB,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAGA,QAAQ;YAC1C;YACA,IAAIF,UAAU,KAAK,MAAM,EAAE;cACvBI,MAAM,GAAG,KAAK;YAClB,CAAC,MACI,IAAIH,QAAQ,IAAI,IAAI,IAAIzN,GAAG,CAACwN,UAAU,CAAC,IAAIuB,CAAC,EAAE;cAC/C/O,GAAG,CAACwN,UAAU,CAAC,GAAGuB,CAAC;YACvB;UACJ,CAAC,MACI;YACD/O,GAAG,CAACwN,UAAU,CAAC,GAAGE,QAAQ;UAC9B;QACJ,CAAC,CACD,OAAOrO,CAAC,EAAE,CAAE;MAChB;MACA;AACZ;AACA;AACA;AACA;AACA;AACA;MACY,IAAI2P,KAAK,GAAG,KAAK;MACjB,IAAInS,KAAK,CAACoS,SAAS,EAAE;QACjB,IAAInB,EAAE,MAAMA,EAAE,GAAGA,EAAE,CAACjO,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,EAAE;UAC3C2N,UAAU,GAAGM,EAAE;UACfkB,KAAK,GAAG,IAAI;QAChB;MACJ;MACA,IAAItB,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAK,KAAK,EAAE;QACxC,IAAIA,QAAQ,KAAK,KAAK,IAAI1N,GAAG,CAACkP,YAAY,CAAC1B,UAAU,CAAC,KAAK,EAAE,EAAE;UAC3D,IAAI3Q,KAAK,CAACoS,SAAS,IAAID,KAAK,EAAE;YAC1BhP,GAAG,CAACmP,iBAAiB,CAAC1M,QAAQ,EAAE+K,UAAU,CAAC;UAC/C,CAAC,MACI;YACDxN,GAAG,CAACoP,eAAe,CAAC5B,UAAU,CAAC;UACnC;QACJ;MACJ,CAAC,MACI,IAAI,CAAC,CAACI,MAAM,IAAIrN,KAAK,GAAG,CAAC,CAAC,gBAAgBoN,KAAK,KAAK,CAACmB,SAAS,EAAE;QACjEpB,QAAQ,GAAGA,QAAQ,KAAK,IAAI,GAAG,EAAE,GAAGA,QAAQ;QAC5C,IAAI7Q,KAAK,CAACoS,SAAS,IAAID,KAAK,EAAE;UAC1BhP,GAAG,CAACqP,cAAc,CAAC5M,QAAQ,EAAE+K,UAAU,EAAEE,QAAQ,CAAC;QACtD,CAAC,MACI;UACD1N,GAAG,CAAC+H,YAAY,CAACyF,UAAU,EAAEE,QAAQ,CAAC;QAC1C;MACJ;IACJ;EACJ;AACJ,CAAC;AACD,MAAM4B,mBAAmB,GAAG,IAAI;AAChC,MAAMrB,cAAc,GAAIhB,KAAK,IAAM,CAACA,KAAK,GAAG,EAAE,GAAGA,KAAK,CAACsC,KAAK,CAACD,mBAAmB,CAAE;AAClF,MAAME,aAAa,GAAG,CAACC,QAAQ,EAAEC,QAAQ,EAAEjT,SAAS,EAAE+Q,UAAU,KAAK;EACjE;EACA;EACA;EACA,MAAMxN,GAAG,GAAG0P,QAAQ,CAACzD,KAAK,CAACjF,QAAQ,KAAK,EAAE,CAAC,0BAA0B0I,QAAQ,CAACzD,KAAK,CAAC3E,IAAI,GAClFoI,QAAQ,CAACzD,KAAK,CAAC3E,IAAI,GACnBoI,QAAQ,CAACzD,KAAK;EACpB,MAAM0D,aAAa,GAAIF,QAAQ,IAAIA,QAAQ,CAAC/D,OAAO,IAAKrC,SAAS;EACjE,MAAMuG,aAAa,GAAGF,QAAQ,CAAChE,OAAO,IAAIrC,SAAS;EACnD,IAAIxM,KAAK,CAACwR,SAAS,EAAE;IACjB;IACA,KAAKb,UAAU,IAAImC,aAAa,EAAE;MAC9B,IAAI,EAAEnC,UAAU,IAAIoC,aAAa,CAAC,EAAE;QAChCrC,WAAW,CAACvN,GAAG,EAAEwN,UAAU,EAAEmC,aAAa,CAACnC,UAAU,CAAC,EAAE/J,SAAS,EAAEhH,SAAS,EAAEiT,QAAQ,CAACjS,OAAO,CAAC;MACnG;IACJ;EACJ;EACA;EACA,KAAK+P,UAAU,IAAIoC,aAAa,EAAE;IAC9BrC,WAAW,CAACvN,GAAG,EAAEwN,UAAU,EAAEmC,aAAa,CAACnC,UAAU,CAAC,EAAEoC,aAAa,CAACpC,UAAU,CAAC,EAAE/Q,SAAS,EAAEiT,QAAQ,CAACjS,OAAO,CAAC;EACnH;AACJ,CAAC;AACD,MAAMoS,SAAS,GAAG,CAACC,cAAc,EAAEC,cAAc,EAAEC,UAAU,EAAEC,SAAS,KAAK;EACzE;EACA,MAAMvF,QAAQ,GAAGqF,cAAc,CAACpE,UAAU,CAACqE,UAAU,CAAC;EACtD,IAAI3T,CAAC,GAAG,CAAC;EACT,IAAI2D,GAAG;EACP,IAAIkQ,SAAS;EACb,IAAIC,QAAQ;EACZ,IAAItT,KAAK,CAACiO,cAAc,IAAI,CAACxO,kBAAkB,EAAE;IAC7C;IACAE,iBAAiB,GAAG,IAAI;IACxB,IAAIkO,QAAQ,CAACsB,KAAK,KAAK,MAAM,EAAE;MAC3B,IAAI/P,OAAO,EAAE;QACT;QACAgU,SAAS,CAACtH,SAAS,CAACV,GAAG,CAAChM,OAAO,GAAG,IAAI,CAAC;MAC3C;MACAyO,QAAQ,CAACjN,OAAO,IAAIiN,QAAQ,CAACiB,UAAU;MACjC;MACE,CAAC,CAAC;MACJ;MACE,CAAC,CAAC;IACd;EACJ;;EACA,IAAI9O,KAAK,CAAC0N,KAAK,IAAIG,QAAQ,CAACuB,KAAK,EAAE;IAC/BzB,eAAe,CAAE,WAAUE,QAAQ,CAACD,MAAM,KAAK,IAAI,GAAI,IAAGC,QAAQ,CAACD,MAAO,QAAO,GAAI,IAAGC,QAAQ,CAACsB,KAAM,WAAW,mTAAkT,CAAC;EACza;EACA,IAAInP,KAAK,CAACuT,QAAQ,IAAI1F,QAAQ,CAACD,MAAM,KAAK,IAAI,EAAE;IAC5C;IACAzK,GAAG,GAAG0K,QAAQ,CAACuB,KAAK,GAAG9O,GAAG,CAACkT,cAAc,CAAC3F,QAAQ,CAACD,MAAM,CAAC;EAC9D,CAAC,MACI,IAAI5N,KAAK,CAACiO,cAAc,IAAIJ,QAAQ,CAACjN,OAAO,GAAG,CAAC,CAAC,uBAAuB;IACzE;IACAuC,GAAG,GAAG0K,QAAQ,CAACuB,KAAK,GAChBpP,KAAK,CAACyT,OAAO,IAAIzT,KAAK,CAACgL,iBAAiB,GAAG0I,sBAAsB,CAAC7F,QAAQ,CAAC,GAAGvN,GAAG,CAACkT,cAAc,CAAC,EAAE,CAAC;EAC5G,CAAC,MACI;IACD,IAAIxT,KAAK,CAAC2T,GAAG,IAAI,CAAC/T,SAAS,EAAE;MACzBA,SAAS,GAAGiO,QAAQ,CAACsB,KAAK,KAAK,KAAK;IACxC;IACA;IACAhM,GAAG,GAAG0K,QAAQ,CAACuB,KAAK,GAAIpP,KAAK,CAAC2T,GAAG,GAC3BrT,GAAG,CAACsT,eAAe,CAAChU,SAAS,GAAG6M,MAAM,GAAGC,OAAO,EAAE1M,KAAK,CAACiO,cAAc,IAAIJ,QAAQ,CAACjN,OAAO,GAAG,CAAC,CAAC,uBAC3F,SAAS,GACTiN,QAAQ,CAACsB,KAAK,CAAC,GACnB7O,GAAG,CAACyK,aAAa,CAAC/K,KAAK,CAACiO,cAAc,IAAIJ,QAAQ,CAACjN,OAAO,GAAG,CAAC,CAAC,uBAC3D,SAAS,GACTiN,QAAQ,CAACsB,KAAK,CAAE;IAC1B,IAAInP,KAAK,CAAC2T,GAAG,IAAI/T,SAAS,IAAIiO,QAAQ,CAACsB,KAAK,KAAK,eAAe,EAAE;MAC9DvP,SAAS,GAAG,KAAK;IACrB;IACA;IACA,IAAII,KAAK,CAACqP,aAAa,EAAE;MACrBsD,aAAa,CAAC,IAAI,EAAE9E,QAAQ,EAAEjO,SAAS,CAAC;IAC5C;IACA,IAAI,CAACI,KAAK,CAACkC,SAAS,IAAIlC,KAAK,CAAC4L,MAAM,KAAKe,KAAK,CAACvN,OAAO,CAAC,IAAI+D,GAAG,CAAC,MAAM,CAAC,KAAK/D,OAAO,EAAE;MAChF;MACA;MACA+D,GAAG,CAAC2I,SAAS,CAACV,GAAG,CAAEjI,GAAG,CAAC,MAAM,CAAC,GAAG/D,OAAO,CAAE;IAC9C;IACA,IAAIyO,QAAQ,CAACiB,UAAU,EAAE;MACrB,KAAKtP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqO,QAAQ,CAACiB,UAAU,CAACtI,MAAM,EAAE,EAAEhH,CAAC,EAAE;QAC7C;QACA6T,SAAS,GAAGL,SAAS,CAACC,cAAc,EAAEpF,QAAQ,EAAErO,CAAC,EAAE2D,GAAG,CAAC;QACvD;QACA,IAAIkQ,SAAS,EAAE;UACX;UACAlQ,GAAG,CAAC0Q,WAAW,CAACR,SAAS,CAAC;QAC9B;MACJ;IACJ;IACA,IAAIrT,KAAK,CAAC2T,GAAG,EAAE;MACX,IAAI9F,QAAQ,CAACsB,KAAK,KAAK,KAAK,EAAE;QAC1B;QACAvP,SAAS,GAAG,KAAK;MACrB,CAAC,MACI,IAAIuD,GAAG,CAAC4C,OAAO,KAAK,eAAe,EAAE;QACtC;QACAnG,SAAS,GAAG,IAAI;MACpB;IACJ;EACJ;EACA,IAAII,KAAK,CAACiO,cAAc,EAAE;IACtB9K,GAAG,CAAC,MAAM,CAAC,GAAG7D,WAAW;IACzB,IAAIuO,QAAQ,CAACjN,OAAO,IAAI,CAAC,CAAC,uBAAuB,CAAC,CAAC,sBAAsB,EAAE;MACvE;MACAuC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI;MAClB;MACAA,GAAG,CAAC,MAAM,CAAC,GAAG9D,UAAU;MACxB;MACA8D,GAAG,CAAC,MAAM,CAAC,GAAG0K,QAAQ,CAACmB,MAAM,IAAI,EAAE;MACnC;MACAsE,QAAQ,GAAGL,cAAc,IAAIA,cAAc,CAACnE,UAAU,IAAImE,cAAc,CAACnE,UAAU,CAACqE,UAAU,CAAC;MAC/F,IAAIG,QAAQ,IAAIA,QAAQ,CAACnE,KAAK,KAAKtB,QAAQ,CAACsB,KAAK,IAAI8D,cAAc,CAAC7D,KAAK,EAAE;QACvE;QACA;QACA0E,yBAAyB,CAACb,cAAc,CAAC7D,KAAK,EAAE,KAAK,CAAC;MAC1D;IACJ;EACJ;EACA,OAAOjM,GAAG;AACd,CAAC;AACD,MAAM2Q,yBAAyB,GAAG,CAACV,SAAS,EAAEW,SAAS,KAAK;EACxDpT,GAAG,CAACC,OAAO,IAAI,CAAC,CAAC;EACjB,MAAMoT,iBAAiB,GAAGZ,SAAS,CAACa,UAAU;EAC9C,KAAK,IAAIzU,CAAC,GAAGwU,iBAAiB,CAACxN,MAAM,GAAG,CAAC,EAAEhH,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACpD,MAAM6T,SAAS,GAAGW,iBAAiB,CAACxU,CAAC,CAAC;IACtC,IAAI6T,SAAS,CAAC,MAAM,CAAC,KAAK/T,WAAW,IAAI+T,SAAS,CAAC,MAAM,CAAC,EAAE;MACxD;MACA;MACA;MACA;MACAa,mBAAmB,CAACb,SAAS,CAAC,CAAClI,YAAY,CAACkI,SAAS,EAAEc,aAAa,CAACd,SAAS,CAAC,CAAC;MAChF;MACA;MACA;MACAA,SAAS,CAAC,MAAM,CAAC,CAAC/B,MAAM,EAAE;MAC1B+B,SAAS,CAAC,MAAM,CAAC,GAAGzM,SAAS;MAC7BjH,iBAAiB,GAAG,IAAI;IAC5B;IACA,IAAIoU,SAAS,EAAE;MACXD,yBAAyB,CAACT,SAAS,EAAEU,SAAS,CAAC;IACnD;EACJ;EACApT,GAAG,CAACC,OAAO,IAAI,CAAC,CAAC,CAAC;AACtB,CAAC;;AACD,MAAMwT,SAAS,GAAG,CAAChB,SAAS,EAAEiB,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,KAAK;EAC5E,IAAIC,YAAY,GAAK1U,KAAK,CAACiO,cAAc,IAAImF,SAAS,CAAC,MAAM,CAAC,IAAIA,SAAS,CAAC,MAAM,CAAC,CAACuB,UAAU,IAAKvB,SAAU;EAC7G,IAAIC,SAAS;EACb,IAAIrT,KAAK,CAACkC,SAAS,IAAIwS,YAAY,CAAChJ,UAAU,IAAIgJ,YAAY,CAAC3O,OAAO,KAAKzG,WAAW,EAAE;IACpFoV,YAAY,GAAGA,YAAY,CAAChJ,UAAU;EAC1C;EACA,OAAO8I,QAAQ,IAAIC,MAAM,EAAE,EAAED,QAAQ,EAAE;IACnC,IAAID,MAAM,CAACC,QAAQ,CAAC,EAAE;MAClBnB,SAAS,GAAGL,SAAS,CAAC,IAAI,EAAEsB,WAAW,EAAEE,QAAQ,EAAEpB,SAAS,CAAC;MAC7D,IAAIC,SAAS,EAAE;QACXkB,MAAM,CAACC,QAAQ,CAAC,CAACpF,KAAK,GAAGiE,SAAS;QAClCqB,YAAY,CAACvJ,YAAY,CAACkI,SAAS,EAAErT,KAAK,CAACiO,cAAc,GAAGkG,aAAa,CAACE,MAAM,CAAC,GAAGA,MAAM,CAAC;MAC/F;IACJ;EACJ;AACJ,CAAC;AACD,MAAMO,YAAY,GAAG,CAACL,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAE1M,KAAK,EAAE5E,GAAG,KAAK;EAC3D,OAAOqR,QAAQ,IAAIC,MAAM,EAAE,EAAED,QAAQ,EAAE;IACnC,IAAKzM,KAAK,GAAGwM,MAAM,CAACC,QAAQ,CAAC,EAAG;MAC5BrR,GAAG,GAAG4E,KAAK,CAACqH,KAAK;MACjByF,YAAY,CAAC9M,KAAK,CAAC;MACnB,IAAI/H,KAAK,CAACiO,cAAc,EAAE;QACtB;QACA;QACAvO,2BAA2B,GAAG,IAAI;QAClC,IAAIyD,GAAG,CAAC,MAAM,CAAC,EAAE;UACb;UACAA,GAAG,CAAC,MAAM,CAAC,CAACmO,MAAM,EAAE;QACxB,CAAC,MACI;UACD;UACA;UACAwC,yBAAyB,CAAC3Q,GAAG,EAAE,IAAI,CAAC;QACxC;MACJ;MACA;MACAA,GAAG,CAACmO,MAAM,EAAE;IAChB;EACJ;AACJ,CAAC;AACD,MAAMwD,cAAc,GAAG,CAAC1B,SAAS,EAAE2B,KAAK,EAAElH,QAAQ,EAAEmH,KAAK,KAAK;EAC1D,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAI3V,CAAC,GAAG,CAAC;EACT,IAAI4V,SAAS,GAAGL,KAAK,CAACvO,MAAM,GAAG,CAAC;EAChC,IAAI6O,aAAa,GAAGN,KAAK,CAAC,CAAC,CAAC;EAC5B,IAAIO,WAAW,GAAGP,KAAK,CAACK,SAAS,CAAC;EAClC,IAAIG,SAAS,GAAGP,KAAK,CAACxO,MAAM,GAAG,CAAC;EAChC,IAAIgP,aAAa,GAAGR,KAAK,CAAC,CAAC,CAAC;EAC5B,IAAIS,WAAW,GAAGT,KAAK,CAACO,SAAS,CAAC;EAClC,IAAIhG,IAAI;EACR,IAAImG,SAAS;EACb,OAAOT,WAAW,IAAIG,SAAS,IAAIF,WAAW,IAAIK,SAAS,EAAE;IACzD,IAAIF,aAAa,IAAI,IAAI,EAAE;MACvB;MACAA,aAAa,GAAGN,KAAK,CAAC,EAAEE,WAAW,CAAC;IACxC,CAAC,MACI,IAAIK,WAAW,IAAI,IAAI,EAAE;MAC1BA,WAAW,GAAGP,KAAK,CAAC,EAAEK,SAAS,CAAC;IACpC,CAAC,MACI,IAAII,aAAa,IAAI,IAAI,EAAE;MAC5BA,aAAa,GAAGR,KAAK,CAAC,EAAEE,WAAW,CAAC;IACxC,CAAC,MACI,IAAIO,WAAW,IAAI,IAAI,EAAE;MAC1BA,WAAW,GAAGT,KAAK,CAAC,EAAEO,SAAS,CAAC;IACpC,CAAC,MACI,IAAII,WAAW,CAACN,aAAa,EAAEG,aAAa,CAAC,EAAE;MAChDI,KAAK,CAACP,aAAa,EAAEG,aAAa,CAAC;MACnCH,aAAa,GAAGN,KAAK,CAAC,EAAEE,WAAW,CAAC;MACpCO,aAAa,GAAGR,KAAK,CAAC,EAAEE,WAAW,CAAC;IACxC,CAAC,MACI,IAAIS,WAAW,CAACL,WAAW,EAAEG,WAAW,CAAC,EAAE;MAC5CG,KAAK,CAACN,WAAW,EAAEG,WAAW,CAAC;MAC/BH,WAAW,GAAGP,KAAK,CAAC,EAAEK,SAAS,CAAC;MAChCK,WAAW,GAAGT,KAAK,CAAC,EAAEO,SAAS,CAAC;IACpC,CAAC,MACI,IAAII,WAAW,CAACN,aAAa,EAAEI,WAAW,CAAC,EAAE;MAC9C;MACA,IAAIzV,KAAK,CAACiO,cAAc,KAAKoH,aAAa,CAAClG,KAAK,KAAK,MAAM,IAAIsG,WAAW,CAACtG,KAAK,KAAK,MAAM,CAAC,EAAE;QAC1F2E,yBAAyB,CAACuB,aAAa,CAACjG,KAAK,CAACuF,UAAU,EAAE,KAAK,CAAC;MACpE;MACAiB,KAAK,CAACP,aAAa,EAAEI,WAAW,CAAC;MACjCrC,SAAS,CAACjI,YAAY,CAACkK,aAAa,CAACjG,KAAK,EAAEkG,WAAW,CAAClG,KAAK,CAACyG,WAAW,CAAC;MAC1ER,aAAa,GAAGN,KAAK,CAAC,EAAEE,WAAW,CAAC;MACpCQ,WAAW,GAAGT,KAAK,CAAC,EAAEO,SAAS,CAAC;IACpC,CAAC,MACI,IAAII,WAAW,CAACL,WAAW,EAAEE,aAAa,CAAC,EAAE;MAC9C;MACA,IAAIxV,KAAK,CAACiO,cAAc,KAAKoH,aAAa,CAAClG,KAAK,KAAK,MAAM,IAAIsG,WAAW,CAACtG,KAAK,KAAK,MAAM,CAAC,EAAE;QAC1F2E,yBAAyB,CAACwB,WAAW,CAAClG,KAAK,CAACuF,UAAU,EAAE,KAAK,CAAC;MAClE;MACAiB,KAAK,CAACN,WAAW,EAAEE,aAAa,CAAC;MACjCpC,SAAS,CAACjI,YAAY,CAACmK,WAAW,CAAClG,KAAK,EAAEiG,aAAa,CAACjG,KAAK,CAAC;MAC9DkG,WAAW,GAAGP,KAAK,CAAC,EAAEK,SAAS,CAAC;MAChCI,aAAa,GAAGR,KAAK,CAAC,EAAEE,WAAW,CAAC;IACxC,CAAC,MACI;MACD;MACAC,QAAQ,GAAG,CAAC,CAAC;MACb,IAAInV,KAAK,CAACgO,OAAO,EAAE;QACf,KAAKxO,CAAC,GAAGyV,WAAW,EAAEzV,CAAC,IAAI4V,SAAS,EAAE,EAAE5V,CAAC,EAAE;UACvC,IAAIuV,KAAK,CAACvV,CAAC,CAAC,IAAIuV,KAAK,CAACvV,CAAC,CAAC,CAACuP,KAAK,KAAK,IAAI,IAAIgG,KAAK,CAACvV,CAAC,CAAC,CAACuP,KAAK,KAAKyG,aAAa,CAACzG,KAAK,EAAE;YAC/EoG,QAAQ,GAAG3V,CAAC;YACZ;UACJ;QACJ;MACJ;MACA,IAAIQ,KAAK,CAACgO,OAAO,IAAImH,QAAQ,IAAI,CAAC,EAAE;QAChCO,SAAS,GAAGX,KAAK,CAACI,QAAQ,CAAC;QAC3B,IAAIO,SAAS,CAACvG,KAAK,KAAKqG,aAAa,CAACrG,KAAK,EAAE;UACzCI,IAAI,GAAGyD,SAAS,CAAC+B,KAAK,IAAIA,KAAK,CAACG,WAAW,CAAC,EAAErH,QAAQ,EAAEsH,QAAQ,EAAE/B,SAAS,CAAC;QAChF,CAAC,MACI;UACDwC,KAAK,CAACF,SAAS,EAAEF,aAAa,CAAC;UAC/BT,KAAK,CAACI,QAAQ,CAAC,GAAGvO,SAAS;UAC3B2I,IAAI,GAAGmG,SAAS,CAACtG,KAAK;QAC1B;QACAoG,aAAa,GAAGR,KAAK,CAAC,EAAEE,WAAW,CAAC;MACxC,CAAC,MACI;QACD;QACA3F,IAAI,GAAGyD,SAAS,CAAC+B,KAAK,IAAIA,KAAK,CAACG,WAAW,CAAC,EAAErH,QAAQ,EAAEqH,WAAW,EAAE9B,SAAS,CAAC;QAC/EoC,aAAa,GAAGR,KAAK,CAAC,EAAEE,WAAW,CAAC;MACxC;MACA,IAAI3F,IAAI,EAAE;QACN,IAAIvP,KAAK,CAACiO,cAAc,EAAE;UACtBiG,mBAAmB,CAACmB,aAAa,CAACjG,KAAK,CAAC,CAACjE,YAAY,CAACoE,IAAI,EAAE4E,aAAa,CAACkB,aAAa,CAACjG,KAAK,CAAC,CAAC;QACnG,CAAC,MACI;UACDiG,aAAa,CAACjG,KAAK,CAACuF,UAAU,CAACxJ,YAAY,CAACoE,IAAI,EAAE8F,aAAa,CAACjG,KAAK,CAAC;QAC1E;MACJ;IACJ;EACJ;EACA,IAAI6F,WAAW,GAAGG,SAAS,EAAE;IACzBhB,SAAS,CAAChB,SAAS,EAAE4B,KAAK,CAACO,SAAS,GAAG,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,GAAGP,KAAK,CAACO,SAAS,GAAG,CAAC,CAAC,CAACnG,KAAK,EAAEvB,QAAQ,EAAEmH,KAAK,EAAEE,WAAW,EAAEK,SAAS,CAAC;EACnI,CAAC,MACI,IAAIvV,KAAK,CAACwR,SAAS,IAAI0D,WAAW,GAAGK,SAAS,EAAE;IACjDX,YAAY,CAACG,KAAK,EAAEE,WAAW,EAAEG,SAAS,CAAC;EAC/C;AACJ,CAAC;AACD,MAAMO,WAAW,GAAG,CAACG,MAAM,EAAEC,MAAM,KAAK;EACpC;EACA;EACA,IAAID,MAAM,CAAC3G,KAAK,KAAK4G,MAAM,CAAC5G,KAAK,EAAE;IAC/B,IAAInP,KAAK,CAACiO,cAAc,IAAI6H,MAAM,CAAC3G,KAAK,KAAK,MAAM,EAAE;MACjD,OAAO2G,MAAM,CAAC9G,MAAM,KAAK+G,MAAM,CAAC/G,MAAM;IAC1C;IACA,IAAIhP,KAAK,CAACgO,OAAO,EAAE;MACf,OAAO8H,MAAM,CAAC/G,KAAK,KAAKgH,MAAM,CAAChH,KAAK;IACxC;IACA,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB,CAAC;AACD,MAAMoF,aAAa,GAAI5E,IAAI,IAAK;EAC5B;EACA;EACA;EACA;EACA,OAAQA,IAAI,IAAIA,IAAI,CAAC,MAAM,CAAC,IAAKA,IAAI;AACzC,CAAC;AACD,MAAM2E,mBAAmB,GAAI3E,IAAI,IAAK,CAACA,IAAI,CAAC,MAAM,CAAC,GAAGA,IAAI,CAAC,MAAM,CAAC,GAAGA,IAAI,EAAEoF,UAAU;AACrF,MAAMiB,KAAK,GAAG,CAACtC,QAAQ,EAAEzF,QAAQ,KAAK;EAClC,MAAM1K,GAAG,GAAI0K,QAAQ,CAACuB,KAAK,GAAGkE,QAAQ,CAAClE,KAAM;EAC7C,MAAM4G,WAAW,GAAG1C,QAAQ,CAACxE,UAAU;EACvC,MAAMmH,WAAW,GAAGpI,QAAQ,CAACiB,UAAU;EACvC,MAAMG,GAAG,GAAGpB,QAAQ,CAACsB,KAAK;EAC1B,MAAMD,IAAI,GAAGrB,QAAQ,CAACD,MAAM;EAC5B,IAAIsI,aAAa;EACjB,IAAI,CAAClW,KAAK,CAACuT,QAAQ,IAAIrE,IAAI,KAAK,IAAI,EAAE;IAClC,IAAIlP,KAAK,CAAC2T,GAAG,EAAE;MACX;MACA;MACA/T,SAAS,GAAGqP,GAAG,KAAK,KAAK,GAAG,IAAI,GAAGA,GAAG,KAAK,eAAe,GAAG,KAAK,GAAGrP,SAAS;IAClF;IACA;IACA,IAAII,KAAK,CAACqP,aAAa,IAAIrP,KAAK,CAACmW,OAAO,EAAE;MACtC,IAAInW,KAAK,CAACoW,IAAI,IAAInH,GAAG,KAAK,MAAM,EAC5B,CAAC,KACA;QACD;QACA;QACA;QACA0D,aAAa,CAACW,QAAQ,EAAEzF,QAAQ,EAAEjO,SAAS,CAAC;MAChD;IACJ;IACA,IAAII,KAAK,CAACwR,SAAS,IAAIwE,WAAW,KAAK,IAAI,IAAIC,WAAW,KAAK,IAAI,EAAE;MACjE;MACAnB,cAAc,CAAC3R,GAAG,EAAE6S,WAAW,EAAEnI,QAAQ,EAAEoI,WAAW,CAAC;IAC3D,CAAC,MACI,IAAIA,WAAW,KAAK,IAAI,EAAE;MAC3B;MACA,IAAIjW,KAAK,CAACwR,SAAS,IAAIxR,KAAK,CAACuT,QAAQ,IAAID,QAAQ,CAAC1F,MAAM,KAAK,IAAI,EAAE;QAC/D;QACAzK,GAAG,CAACkT,WAAW,GAAG,EAAE;MACxB;MACA;MACAjC,SAAS,CAACjR,GAAG,EAAE,IAAI,EAAE0K,QAAQ,EAAEoI,WAAW,EAAE,CAAC,EAAEA,WAAW,CAACzP,MAAM,GAAG,CAAC,CAAC;IAC1E,CAAC,MACI,IAAIxG,KAAK,CAACwR,SAAS,IAAIwE,WAAW,KAAK,IAAI,EAAE;MAC9C;MACApB,YAAY,CAACoB,WAAW,EAAE,CAAC,EAAEA,WAAW,CAACxP,MAAM,GAAG,CAAC,CAAC;IACxD;IACA,IAAIxG,KAAK,CAAC2T,GAAG,IAAI/T,SAAS,IAAIqP,GAAG,KAAK,KAAK,EAAE;MACzCrP,SAAS,GAAG,KAAK;IACrB;EACJ,CAAC,MACI,IAAII,KAAK,CAACuT,QAAQ,IAAIvT,KAAK,CAACiO,cAAc,KAAKiI,aAAa,GAAG/S,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;IAC9E;IACA+S,aAAa,CAACvB,UAAU,CAAC0B,WAAW,GAAGnH,IAAI;EAC/C,CAAC,MACI,IAAIlP,KAAK,CAACuT,QAAQ,IAAID,QAAQ,CAAC1F,MAAM,KAAKsB,IAAI,EAAE;IACjD;IACA;IACA/L,GAAG,CAACmT,IAAI,GAAGpH,IAAI;EACnB;AACJ,CAAC;AACD,MAAMqH,4BAA4B,GAAIpT,GAAG,IAAK;EAC1C;EACA,MAAM8Q,UAAU,GAAG9Q,GAAG,CAAC8Q,UAAU;EACjC,IAAIZ,SAAS;EACb,IAAI7T,CAAC;EACL,IAAIgX,IAAI;EACR,IAAIC,CAAC;EACL,IAAIC,YAAY;EAChB,IAAIvM,QAAQ;EACZ,KAAK3K,CAAC,GAAG,CAAC,EAAEgX,IAAI,GAAGvC,UAAU,CAACzN,MAAM,EAAEhH,CAAC,GAAGgX,IAAI,EAAEhX,CAAC,EAAE,EAAE;IACjD6T,SAAS,GAAGY,UAAU,CAACzU,CAAC,CAAC;IACzB,IAAI6T,SAAS,CAAClJ,QAAQ,KAAK,CAAC,CAAC,mBAAmB;MAC5C,IAAIkJ,SAAS,CAAC,MAAM,CAAC,EAAE;QACnB;QACA;QACAqD,YAAY,GAAGrD,SAAS,CAAC,MAAM,CAAC;QAChC;QACA;QACAA,SAAS,CAACsD,MAAM,GAAG,KAAK;QACxB,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,EAAEC,CAAC,EAAE,EAAE;UACvBtM,QAAQ,GAAG8J,UAAU,CAACwC,CAAC,CAAC,CAACtM,QAAQ;UACjC,IAAI8J,UAAU,CAACwC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAKpD,SAAS,CAAC,MAAM,CAAC,IAAIqD,YAAY,KAAK,EAAE,EAAE;YACpE;YACA,IAAIvM,QAAQ,KAAK,CAAC,CAAC,qBAAqBuM,YAAY,KAAKzC,UAAU,CAACwC,CAAC,CAAC,CAACpE,YAAY,CAAC,MAAM,CAAC,EAAE;cACzFgB,SAAS,CAACsD,MAAM,GAAG,IAAI;cACvB;YACJ;UACJ,CAAC,MACI;YACD;YACA;YACA;YACA,IAAIxM,QAAQ,KAAK,CAAC,CAAC,qBACdA,QAAQ,KAAK,CAAC,CAAC,kBAAkB8J,UAAU,CAACwC,CAAC,CAAC,CAACJ,WAAW,CAACO,IAAI,EAAE,KAAK,EAAG,EAAE;cAC5EvD,SAAS,CAACsD,MAAM,GAAG,IAAI;cACvB;YACJ;UACJ;QACJ;MACJ;MACA;MACAJ,4BAA4B,CAAClD,SAAS,CAAC;IAC3C;EACJ;AACJ,CAAC;AACD,MAAMwD,aAAa,GAAG,EAAE;AACxB,MAAMC,mBAAmB,GAAI3T,GAAG,IAAK;EACjC;EACA,IAAIkQ,SAAS;EACb,IAAI9D,IAAI;EACR,IAAIwH,gBAAgB;EACpB,IAAIL,YAAY;EAChB,IAAIM,gBAAgB;EACpB,IAAIP,CAAC;EACL,IAAIjX,CAAC,GAAG,CAAC;EACT,MAAMyU,UAAU,GAAG9Q,GAAG,CAAC8Q,UAAU;EACjC,MAAMuC,IAAI,GAAGvC,UAAU,CAACzN,MAAM;EAC9B,OAAOhH,CAAC,GAAGgX,IAAI,EAAEhX,CAAC,EAAE,EAAE;IAClB6T,SAAS,GAAGY,UAAU,CAACzU,CAAC,CAAC;IACzB,IAAI6T,SAAS,CAAC,MAAM,CAAC,KAAK9D,IAAI,GAAG8D,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI9D,IAAI,CAACoF,UAAU,EAAE;MACpE;MACA;MACAoC,gBAAgB,GAAGxH,IAAI,CAACoF,UAAU,CAACV,UAAU;MAC7CyC,YAAY,GAAGrD,SAAS,CAAC,MAAM,CAAC;MAChC,KAAKoD,CAAC,GAAGM,gBAAgB,CAACvQ,MAAM,GAAG,CAAC,EAAEiQ,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC/ClH,IAAI,GAAGwH,gBAAgB,CAACN,CAAC,CAAC;QAC1B,IAAI,CAAClH,IAAI,CAAC,MAAM,CAAC,IAAI,CAACA,IAAI,CAAC,MAAM,CAAC,IAAIA,IAAI,CAAC,MAAM,CAAC,KAAK8D,SAAS,CAAC,MAAM,CAAC,EAAE;UACtE;UACA;UACA;UACA,IAAI4D,mBAAmB,CAAC1H,IAAI,EAAEmH,YAAY,CAAC,EAAE;YACzC;YACAM,gBAAgB,GAAGH,aAAa,CAACzK,IAAI,CAAE8K,CAAC,IAAKA,CAAC,CAACC,gBAAgB,KAAK5H,IAAI,CAAC;YACzE;YACA;YACA;YACA7P,2BAA2B,GAAG,IAAI;YAClC6P,IAAI,CAAC,MAAM,CAAC,GAAGA,IAAI,CAAC,MAAM,CAAC,IAAImH,YAAY;YAC3C,IAAIM,gBAAgB,EAAE;cAClB;cACA;cACAA,gBAAgB,CAACI,aAAa,GAAG/D,SAAS;YAC9C,CAAC,MACI;cACD;cACAwD,aAAa,CAACxS,IAAI,CAAC;gBACf+S,aAAa,EAAE/D,SAAS;gBACxB8D,gBAAgB,EAAE5H;cACtB,CAAC,CAAC;YACN;YACA,IAAIA,IAAI,CAAC,MAAM,CAAC,EAAE;cACdsH,aAAa,CAAClT,GAAG,CAAE0T,YAAY,IAAK;gBAChC,IAAIJ,mBAAmB,CAACI,YAAY,CAACF,gBAAgB,EAAE5H,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;kBAClEyH,gBAAgB,GAAGH,aAAa,CAACzK,IAAI,CAAE8K,CAAC,IAAKA,CAAC,CAACC,gBAAgB,KAAK5H,IAAI,CAAC;kBACzE,IAAIyH,gBAAgB,IAAI,CAACK,YAAY,CAACD,aAAa,EAAE;oBACjDC,YAAY,CAACD,aAAa,GAAGJ,gBAAgB,CAACI,aAAa;kBAC/D;gBACJ;cACJ,CAAC,CAAC;YACN;UACJ,CAAC,MACI,IAAI,CAACP,aAAa,CAACpI,IAAI,CAAEyI,CAAC,IAAKA,CAAC,CAACC,gBAAgB,KAAK5H,IAAI,CAAC,EAAE;YAC9D;YACA;YACAsH,aAAa,CAACxS,IAAI,CAAC;cACf8S,gBAAgB,EAAE5H;YACtB,CAAC,CAAC;UACN;QACJ;MACJ;IACJ;IACA,IAAI8D,SAAS,CAAClJ,QAAQ,KAAK,CAAC,CAAC,mBAAmB;MAC5C2M,mBAAmB,CAACzD,SAAS,CAAC;IAClC;EACJ;AACJ,CAAC;AACD,MAAM4D,mBAAmB,GAAG,CAACK,cAAc,EAAEZ,YAAY,KAAK;EAC1D,IAAIY,cAAc,CAACnN,QAAQ,KAAK,CAAC,CAAC,mBAAmB;IACjD,IAAImN,cAAc,CAACjF,YAAY,CAAC,MAAM,CAAC,KAAK,IAAI,IAAIqE,YAAY,KAAK,EAAE,EAAE;MACrE,OAAO,IAAI;IACf;IACA,IAAIY,cAAc,CAACjF,YAAY,CAAC,MAAM,CAAC,KAAKqE,YAAY,EAAE;MACtD,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACA,IAAIY,cAAc,CAAC,MAAM,CAAC,KAAKZ,YAAY,EAAE;IACzC,OAAO,IAAI;EACf;EACA,OAAOA,YAAY,KAAK,EAAE;AAC9B,CAAC;AACD,MAAM7B,YAAY,GAAI0C,KAAK,IAAK;EAC5B,IAAIvX,KAAK,CAAC4R,OAAO,EAAE;IACf2F,KAAK,CAAC1I,OAAO,IAAI0I,KAAK,CAAC1I,OAAO,CAACnI,GAAG,IAAI6Q,KAAK,CAAC1I,OAAO,CAACnI,GAAG,CAAC,IAAI,CAAC;IAC7D6Q,KAAK,CAACzI,UAAU,IAAIyI,KAAK,CAACzI,UAAU,CAACnL,GAAG,CAACkR,YAAY,CAAC;EAC1D;AACJ,CAAC;AACD,MAAM2C,UAAU,GAAG,CAACpU,OAAO,EAAEqU,eAAe,KAAK;EAC7C,MAAMzN,OAAO,GAAG5G,OAAO,CAACuB,aAAa;EACrC,MAAMmF,OAAO,GAAG1G,OAAO,CAACmI,SAAS;EACjC,MAAM+H,QAAQ,GAAGlQ,OAAO,CAAC4E,OAAO,IAAI6F,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;EACxD,MAAM6J,SAAS,GAAGhJ,MAAM,CAAC+I,eAAe,CAAC,GAAGA,eAAe,GAAG1W,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE0W,eAAe,CAAC;EAC5FnY,WAAW,GAAG0K,OAAO,CAACjE,OAAO;EAC7B;EACA,IAAI/F,KAAK,CAAC0N,KAAK,IAAIH,KAAK,CAACC,OAAO,CAACiK,eAAe,CAAC,IAAIA,eAAe,CAAChJ,IAAI,CAACC,MAAM,CAAC,EAAE;IAC/E,MAAM,IAAIiJ,KAAK,CAAE;AACzB,uCAAuCrY,WAAW,CAAC4R,WAAW,EAAG;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CAAC;EACA;EACA,IAAIlR,KAAK,CAACmW,OAAO,IAAIrM,OAAO,CAAC8N,gBAAgB,EAAE;IAC3CF,SAAS,CAAC7I,OAAO,GAAG6I,SAAS,CAAC7I,OAAO,IAAI,CAAC,CAAC;IAC3C/E,OAAO,CAAC8N,gBAAgB,CAACjU,GAAG,CAAC;MAAA,IAAC,CAACkU,QAAQ,EAAEC,SAAS,CAAC;MAAA,OAAMJ,SAAS,CAAC7I,OAAO,CAACiJ,SAAS,CAAC,GAAG9N,OAAO,CAAC6N,QAAQ,CAAC;IAAA,CAAC,CAAC;EAC/G;EACAH,SAAS,CAACvI,KAAK,GAAG,IAAI;EACtBuI,SAAS,CAAC9W,OAAO,IAAI,CAAC,CAAC;EACvBwC,OAAO,CAAC4E,OAAO,GAAG0P,SAAS;EAC3BA,SAAS,CAACtI,KAAK,GAAGkE,QAAQ,CAAClE,KAAK,GAAIpP,KAAK,CAACkC,SAAS,GAAG8H,OAAO,CAAC0B,UAAU,IAAI1B,OAAO,GAAGA,OAAQ;EAC9F,IAAIhK,KAAK,CAAC4L,MAAM,IAAI5L,KAAK,CAACkC,SAAS,EAAE;IACjC9C,OAAO,GAAG4K,OAAO,CAAC,MAAM,CAAC;EAC7B;EACA,IAAIhK,KAAK,CAACiO,cAAc,EAAE;IACtB5O,UAAU,GAAG2K,OAAO,CAAC,MAAM,CAAC;IAC5BvK,kBAAkB,GAAGuC,cAAc,IAAI,CAAC8H,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,kCAAkC,CAAC;IAC/F;IACAlB,2BAA2B,GAAG,KAAK;EACvC;EACA;EACAkW,KAAK,CAACtC,QAAQ,EAAEoE,SAAS,CAAC;EAC1B,IAAI1X,KAAK,CAACiO,cAAc,EAAE;IACtB;IACA;IACAtN,GAAG,CAACC,OAAO,IAAI,CAAC,CAAC;IACjB,IAAIjB,iBAAiB,EAAE;MACnBmX,mBAAmB,CAACY,SAAS,CAACtI,KAAK,CAAC;MACpC,IAAI2I,YAAY;MAChB,IAAIT,cAAc;MAClB,IAAIU,eAAe;MACnB,IAAIC,aAAa;MACjB,IAAIC,gBAAgB;MACpB,IAAIC,OAAO;MACX,IAAI3Y,CAAC,GAAG,CAAC;MACT,OAAOA,CAAC,GAAGqX,aAAa,CAACrQ,MAAM,EAAEhH,CAAC,EAAE,EAAE;QAClCuY,YAAY,GAAGlB,aAAa,CAACrX,CAAC,CAAC;QAC/B8X,cAAc,GAAGS,YAAY,CAACZ,gBAAgB;QAC9C,IAAI,CAACG,cAAc,CAAC,MAAM,CAAC,EAAE;UACzB;UACA;UACAU,eAAe,GACXhY,KAAK,CAACyT,OAAO,IAAIzT,KAAK,CAACgL,iBAAiB,GAClCoN,yBAAyB,CAACd,cAAc,CAAC,GACzChX,GAAG,CAACkT,cAAc,CAAC,EAAE,CAAC;UAChCwE,eAAe,CAAC,MAAM,CAAC,GAAGV,cAAc;UACxCA,cAAc,CAAC3C,UAAU,CAACxJ,YAAY,CAAEmM,cAAc,CAAC,MAAM,CAAC,GAAGU,eAAe,EAAGV,cAAc,CAAC;QACtG;MACJ;MACA,KAAK9X,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqX,aAAa,CAACrQ,MAAM,EAAEhH,CAAC,EAAE,EAAE;QACvCuY,YAAY,GAAGlB,aAAa,CAACrX,CAAC,CAAC;QAC/B8X,cAAc,GAAGS,YAAY,CAACZ,gBAAgB;QAC9C,IAAIY,YAAY,CAACX,aAAa,EAAE;UAC5B;UACA;UACAa,aAAa,GAAGF,YAAY,CAACX,aAAa,CAACzC,UAAU;UACrDuD,gBAAgB,GAAGH,YAAY,CAACX,aAAa,CAACvB,WAAW;UACzDmC,eAAe,GAAGV,cAAc,CAAC,MAAM,CAAC;UACxC,OAAQU,eAAe,GAAGA,eAAe,CAACK,eAAe,EAAG;YACxDF,OAAO,GAAGH,eAAe,CAAC,MAAM,CAAC;YACjC,IAAIG,OAAO,IAAIA,OAAO,CAAC,MAAM,CAAC,KAAKb,cAAc,CAAC,MAAM,CAAC,IAAIW,aAAa,KAAKE,OAAO,CAACxD,UAAU,EAAE;cAC/FwD,OAAO,GAAGA,OAAO,CAACtC,WAAW;cAC7B,IAAI,CAACsC,OAAO,IAAI,CAACA,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC9BD,gBAAgB,GAAGC,OAAO;gBAC1B;cACJ;YACJ;UACJ;UACA,IAAK,CAACD,gBAAgB,IAAID,aAAa,KAAKX,cAAc,CAAC3C,UAAU,IACjE2C,cAAc,CAACzB,WAAW,KAAKqC,gBAAgB,EAAE;YACjD;YACA;YACA;YACA,IAAIZ,cAAc,KAAKY,gBAAgB,EAAE;cACrC,IAAI,CAACZ,cAAc,CAAC,MAAM,CAAC,IAAIA,cAAc,CAAC,MAAM,CAAC,EAAE;gBACnD;gBACAA,cAAc,CAAC,MAAM,CAAC,GAAGA,cAAc,CAAC,MAAM,CAAC,CAAC3C,UAAU,CAAC7H,QAAQ;cACvE;cACA;cACAmL,aAAa,CAAC9M,YAAY,CAACmM,cAAc,EAAEY,gBAAgB,CAAC;YAChE;UACJ;QACJ,CAAC,MACI;UACD;UACA,IAAIZ,cAAc,CAACnN,QAAQ,KAAK,CAAC,CAAC,mBAAmB;YACjDmN,cAAc,CAACX,MAAM,GAAG,IAAI;UAChC;QACJ;MACJ;IACJ;IACA,IAAIjX,2BAA2B,EAAE;MAC7B6W,4BAA4B,CAACmB,SAAS,CAACtI,KAAK,CAAC;IACjD;IACA;IACA;IACAzO,GAAG,CAACC,OAAO,IAAI,CAAC,CAAC,CAAC;IAClB;IACAiW,aAAa,CAACrQ,MAAM,GAAG,CAAC;EAC5B;AACJ,CAAC;AACD;AACA;AACA,MAAMkN,sBAAsB,GAAI4E,SAAS,IAAKhY,GAAG,CAACiY,aAAa,CAAE,QAAOD,SAAS,CAACtJ,MAAM,GAAG,SAAS,GAAGsJ,SAAS,CAACtJ,MAAM,GAAG,GAAG,GAAG,EAAG,WAAU1P,WAAW,CAAC4R,WAAW,EAAG,GAAE,CAAC;AAC1K,MAAMkH,yBAAyB,GAAId,cAAc,IAAKhX,GAAG,CAACiY,aAAa,CAAE,mBAAkB,IACtFjB,cAAc,CAACkB,SAAS,GAClB,IAAGlB,cAAc,CAACkB,SAAU,WAAUlB,cAAc,CAAC,MAAM,CAAE,GAAE,GAC/D,IAAGA,cAAc,CAACjB,WAAY,GAAE,CAAC,CAAC;AAC7C,MAAMoC,UAAU,GAAI/R,GAAG,IAAM1G,KAAK,CAACwE,QAAQ,GAAGmC,UAAU,CAACD,GAAG,CAAC,CAAC/B,aAAa,GAAG+B,GAAI;AAClF,MAAMgS,WAAW,GAAG,CAAChS,GAAG,EAAE9C,IAAI,EAAEF,KAAK,KAAK;EACtC,MAAMP,GAAG,GAAGsV,UAAU,CAAC/R,GAAG,CAAC;EAC3B,OAAO;IACHiS,IAAI,EAAGC,MAAM,IAAK;MACd,IAAI5Y,KAAK,CAAC0N,KAAK,IAAI,CAACvK,GAAG,CAAC0V,WAAW,EAAE;QACjCpI,cAAc,CAAE,QAAO7M,IAAK,iFAAgF,CAAC;MACjH;MACA,OAAOkV,SAAS,CAAC3V,GAAG,EAAES,IAAI,EAAE;QACxBmV,OAAO,EAAE,CAAC,EAAErV,KAAK,GAAG,CAAC,CAAC,cAAc;QACpCsV,QAAQ,EAAE,CAAC,EAAEtV,KAAK,GAAG,CAAC,CAAC,eAAe;QACtCuV,UAAU,EAAE,CAAC,EAAEvV,KAAK,GAAG,CAAC,CAAC,kBAAkB;QAC3CkV;MACJ,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,SAAS,GAAG,CAAC3V,GAAG,EAAES,IAAI,EAAEtC,IAAI,KAAK;EACnC,MAAMiD,EAAE,GAAG5D,GAAG,CAACe,EAAE,CAACkC,IAAI,EAAEtC,IAAI,CAAC;EAC7B6B,GAAG,CAAC+V,aAAa,CAAC3U,EAAE,CAAC;EACrB,OAAOA,EAAE;AACb,CAAC;AACD,MAAM4U,gBAAgB,GAAG,CAAC/V,OAAO,EAAEwE,iBAAiB,KAAK;EACrD,IAAI5H,KAAK,CAACoZ,YAAY,IAAIxR,iBAAiB,IAAI,CAACxE,OAAO,CAACwF,iBAAiB,IAAIhB,iBAAiB,CAAC,KAAK,CAAC,EAAE;IACnGA,iBAAiB,CAAC,KAAK,CAAC,CAACvD,IAAI,CAAC,IAAI1B,OAAO,CAAEuU,CAAC,IAAM9T,OAAO,CAACwF,iBAAiB,GAAGsO,CAAE,CAAC,CAAC;EACtF;AACJ,CAAC;AACD,MAAMmC,cAAc,GAAG,CAACjW,OAAO,EAAEkW,aAAa,KAAK;EAC/C,IAAItZ,KAAK,CAACuZ,SAAS,IAAIvZ,KAAK,CAACwR,SAAS,EAAE;IACpCpO,OAAO,CAACxC,OAAO,IAAI,EAAE,CAAC;EAC1B;;EACA,IAAIZ,KAAK,CAACoZ,YAAY,IAAIhW,OAAO,CAACxC,OAAO,GAAG,CAAC,CAAC,4BAA4B;IACtEwC,OAAO,CAACxC,OAAO,IAAI,GAAG,CAAC;IACvB;EACJ;EACAuY,gBAAgB,CAAC/V,OAAO,EAAEA,OAAO,CAACyE,mBAAmB,CAAC;EACtD;EACA;EACA;EACA,MAAM2R,QAAQ,GAAG,MAAMC,aAAa,CAACrW,OAAO,EAAEkW,aAAa,CAAC;EAC5D,OAAOtZ,KAAK,CAACuZ,SAAS,GAAGG,SAAS,CAACF,QAAQ,CAAC,GAAGA,QAAQ,EAAE;AAC7D,CAAC;AACD,MAAMC,aAAa,GAAG,CAACrW,OAAO,EAAEkW,aAAa,KAAK;EAC9C,MAAMnW,GAAG,GAAGC,OAAO,CAACuB,aAAa;EACjC,MAAMgV,WAAW,GAAG9T,UAAU,CAAC,gBAAgB,EAAEzC,OAAO,CAACmI,SAAS,CAACE,SAAS,CAAC;EAC7E,MAAMmO,QAAQ,GAAG5Z,KAAK,CAACwE,QAAQ,GAAGpB,OAAO,CAACqB,cAAc,GAAGtB,GAAG;EAC9D,IAAI0W,OAAO;EACX,IAAIP,aAAa,EAAE;IACf,IAAItZ,KAAK,CAACwE,QAAQ,IAAIxE,KAAK,CAACuD,YAAY,EAAE;MACtCH,OAAO,CAACxC,OAAO,IAAI,GAAG,CAAC;MACvB,IAAIwC,OAAO,CAACsB,iBAAiB,EAAE;QAC3BtB,OAAO,CAACsB,iBAAiB,CAACf,GAAG,CAAC;UAAA,IAAC,CAACW,UAAU,EAAEwV,KAAK,CAAC;UAAA,OAAKC,QAAQ,CAACH,QAAQ,EAAEtV,UAAU,EAAEwV,KAAK,CAAC;QAAA,EAAC;QAC7F1W,OAAO,CAACsB,iBAAiB,GAAG,IAAI;MACpC;IACJ;IACAsV,kBAAkB,CAAC7W,GAAG,EAAE,mBAAmB,CAAC;IAC5C,IAAInD,KAAK,CAACia,WAAW,EAAE;MACnBJ,OAAO,GAAGE,QAAQ,CAACH,QAAQ,EAAE,mBAAmB,CAAC;IACrD;EACJ,CAAC,MACI;IACDI,kBAAkB,CAAC7W,GAAG,EAAE,qBAAqB,CAAC;IAC9C,IAAInD,KAAK,CAACka,aAAa,EAAE;MACrBL,OAAO,GAAGE,QAAQ,CAACH,QAAQ,EAAE,qBAAqB,CAAC;IACvD;EACJ;EACAI,kBAAkB,CAAC7W,GAAG,EAAE,qBAAqB,CAAC;EAC9C,IAAInD,KAAK,CAACma,aAAa,EAAE;IACrBN,OAAO,GAAGO,IAAI,CAACP,OAAO,EAAE,MAAME,QAAQ,CAACH,QAAQ,EAAE,qBAAqB,CAAC,CAAC;EAC5E;EACAD,WAAW,EAAE;EACb,OAAOS,IAAI,CAACP,OAAO,EAAE,MAAMQ,eAAe,CAACjX,OAAO,EAAEwW,QAAQ,EAAEN,aAAa,CAAC,CAAC;AACjF,CAAC;AACD,MAAMe,eAAe,GAAG,OAAOjX,OAAO,EAAEwW,QAAQ,EAAEN,aAAa,KAAK;EAChE;EACA,MAAMnW,GAAG,GAAGC,OAAO,CAACuB,aAAa;EACjC,MAAM2V,SAAS,GAAGzU,UAAU,CAAC,QAAQ,EAAEzC,OAAO,CAACmI,SAAS,CAACE,SAAS,CAAC;EACnE,MAAM8O,EAAE,GAAGpX,GAAG,CAAC,MAAM,CAAC;EACtB,IAAInD,KAAK,CAACyJ,KAAK,IAAI6P,aAAa,EAAE;IAC9B;IACApP,YAAY,CAAC9G,OAAO,CAAC;EACzB;EACA,MAAMoX,SAAS,GAAG3U,UAAU,CAAC,QAAQ,EAAEzC,OAAO,CAACmI,SAAS,CAACE,SAAS,CAAC;EACnE,IAAIzL,KAAK,CAAC0N,KAAK,EAAE;IACbtK,OAAO,CAACxC,OAAO,IAAI,IAAI,CAAC;EAC5B;;EACA,IAAIZ,KAAK,CAACgL,iBAAiB,EAAE;IACzB,MAAMyP,UAAU,CAACrX,OAAO,EAAEwW,QAAQ,EAAEzW,GAAG,CAAC;EAC5C,CAAC,MACI;IACDsX,UAAU,CAACrX,OAAO,EAAEwW,QAAQ,EAAEzW,GAAG,CAAC;EACtC;EACA,IAAInD,KAAK,CAACK,UAAU,IAAIM,GAAG,CAACiK,SAAS,EAAE;IACnCjK,GAAG,CAACiK,SAAS,CAAC8P,UAAU,CAACvX,GAAG,CAAC;EACjC;EACA,IAAInD,KAAK,CAAC0N,KAAK,EAAE;IACbtK,OAAO,CAAC2D,aAAa,EAAE;IACvB3D,OAAO,CAACxC,OAAO,IAAI,CAAC,IAAI,CAAC;EAC7B;;EACA,IAAIZ,KAAK,CAACgL,iBAAiB,EAAE;IACzB,IAAI;MACA;MACA2P,mBAAmB,CAACxX,GAAG,CAAC;MACxB,IAAImW,aAAa,EAAE;QACf;QACA,IAAIlW,OAAO,CAACmI,SAAS,CAAC3K,OAAO,GAAG,CAAC,CAAC,8BAA8B;UAC5DuC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE;QACpB,CAAC,MACI,IAAIC,OAAO,CAACmI,SAAS,CAAC3K,OAAO,GAAG,CAAC,CAAC,8BAA8B;UACjEuC,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG;QACrB;MACJ;IACJ,CAAC,CACD,OAAOX,CAAC,EAAE;MACNoC,YAAY,CAACpC,CAAC,EAAEW,GAAG,CAAC;IACxB;EACJ;EACA,IAAInD,KAAK,CAACoZ,YAAY,IAAImB,EAAE,EAAE;IAC1B;IACA;IACA;IACAA,EAAE,CAAC5W,GAAG,CAAE8L,EAAE,IAAKA,EAAE,EAAE,CAAC;IACpBtM,GAAG,CAAC,MAAM,CAAC,GAAGyD,SAAS;EAC3B;EACA4T,SAAS,EAAE;EACXF,SAAS,EAAE;EACX,IAAIta,KAAK,CAACoZ,YAAY,EAAE;IACpB,MAAMwB,gBAAgB,GAAGzX,GAAG,CAAC,KAAK,CAAC;IACnC,MAAM0X,UAAU,GAAG,MAAMC,mBAAmB,CAAC1X,OAAO,CAAC;IACrD,IAAIwX,gBAAgB,CAACpU,MAAM,KAAK,CAAC,EAAE;MAC/BqU,UAAU,EAAE;IAChB,CAAC,MACI;MACDlY,OAAO,CAACoY,GAAG,CAACH,gBAAgB,CAAC,CAACR,IAAI,CAACS,UAAU,CAAC;MAC9CzX,OAAO,CAACxC,OAAO,IAAI,CAAC,CAAC;MACrBga,gBAAgB,CAACpU,MAAM,GAAG,CAAC;IAC/B;EACJ,CAAC,MACI;IACDsU,mBAAmB,CAAC1X,OAAO,CAAC;EAChC;AACJ,CAAC;AACD,MAAMqX,UAAU,GAAG,CAACrX,OAAO,EAAEwW,QAAQ,EAAEzW,GAAG,KAAK;EAC3C;EACA;EACA;EACA,MAAM6X,WAAW,GAAGhb,KAAK,CAACgb,WAAW,GAAG,IAAI,GAAG,KAAK;EACpD,MAAMxW,QAAQ,GAAGxE,KAAK,CAACwE,QAAQ,GAAG,IAAI,GAAG,KAAK;EAC9C,MAAM+U,SAAS,GAAGvZ,KAAK,CAACuZ,SAAS,GAAG,IAAI,GAAG,KAAK;EAChD,MAAM/H,SAAS,GAAGxR,KAAK,CAACwR,SAAS,GAAG,IAAI,GAAG,KAAK;EAChD,IAAI;IACA3R,YAAY,GAAG+Z,QAAQ;IACvBA,QAAQ,GAAGoB,WAAW,GAAGpB,QAAQ,CAACqB,MAAM,EAAE,GAAGrB,QAAQ,CAACqB,MAAM,IAAIrB,QAAQ,CAACqB,MAAM,EAAE;IACjF,IAAIzJ,SAAS,IAAI+H,SAAS,EAAE;MACxBnW,OAAO,CAACxC,OAAO,IAAI,CAAC,EAAE,CAAC;IAC3B;;IACA,IAAI4Q,SAAS,IAAIhN,QAAQ,EAAE;MACvBpB,OAAO,CAACxC,OAAO,IAAI,CAAC,CAAC;IACzB;;IACA,IAAIZ,KAAK,CAACkb,WAAW,IAAIlb,KAAK,CAACmW,OAAO,EAAE;MACpC,IAAInW,KAAK,CAACmb,UAAU,IAAInb,KAAK,CAACmW,OAAO,EAAE;QACnC;QACA;QACA;QACA,IAAInW,KAAK,CAACgL,iBAAiB,EAAE;UACzB,OAAOrI,OAAO,CAACC,OAAO,CAACgX,QAAQ,CAAC,CAACQ,IAAI,CAAEhK,KAAK,IAAKoH,UAAU,CAACpU,OAAO,EAAEgN,KAAK,CAAC,CAAC;QAChF,CAAC,MACI;UACDoH,UAAU,CAACpU,OAAO,EAAEwW,QAAQ,CAAC;QACjC;MACJ,CAAC,MACI;QACDzW,GAAG,CAACkT,WAAW,GAAGuD,QAAQ;MAC9B;IACJ;EACJ,CAAC,CACD,OAAOpX,CAAC,EAAE;IACNoC,YAAY,CAACpC,CAAC,EAAEY,OAAO,CAACuB,aAAa,CAAC;EAC1C;EACA9E,YAAY,GAAG,IAAI;EACnB,OAAO,IAAI;AACf,CAAC;AACD,MAAMub,eAAe,GAAG,MAAMvb,YAAY;AAC1C,MAAMib,mBAAmB,GAAI1X,OAAO,IAAK;EACrC,MAAM2C,OAAO,GAAG3C,OAAO,CAACmI,SAAS,CAACE,SAAS;EAC3C,MAAMtI,GAAG,GAAGC,OAAO,CAACuB,aAAa;EACjC,MAAM0W,aAAa,GAAGxV,UAAU,CAAC,YAAY,EAAEE,OAAO,CAAC;EACvD,MAAM6T,QAAQ,GAAG5Z,KAAK,CAACwE,QAAQ,GAAGpB,OAAO,CAACqB,cAAc,GAAGtB,GAAG;EAC9D,MAAMyE,iBAAiB,GAAGxE,OAAO,CAACyE,mBAAmB;EACrD,IAAI7H,KAAK,CAACsb,YAAY,EAAE;IACpB,IAAItb,KAAK,CAAC0N,KAAK,EAAE;MACbtK,OAAO,CAACxC,OAAO,IAAI,IAAI,CAAC;IAC5B;;IACAmZ,QAAQ,CAACH,QAAQ,EAAE,oBAAoB,CAAC;IACxC,IAAI5Z,KAAK,CAAC0N,KAAK,EAAE;MACbtK,OAAO,CAACxC,OAAO,IAAI,CAAC,IAAI,CAAC;IAC7B;EACJ;;EACAoZ,kBAAkB,CAAC7W,GAAG,EAAE,oBAAoB,CAAC;EAC7C,IAAI,EAAEC,OAAO,CAACxC,OAAO,GAAG,EAAE,CAAC,yBAAyB,EAAE;IAClDwC,OAAO,CAACxC,OAAO,IAAI,EAAE,CAAC;IACtB,IAAIZ,KAAK,CAACoZ,YAAY,IAAIpZ,KAAK,CAAC6L,cAAc,EAAE;MAC5C;MACA0P,eAAe,CAACpY,GAAG,CAAC;IACxB;IACA,IAAInD,KAAK,CAACwb,UAAU,EAAE;MAClB,IAAIxb,KAAK,CAAC0N,KAAK,EAAE;QACbtK,OAAO,CAACxC,OAAO,IAAI,IAAI,CAAC;MAC5B;;MACAmZ,QAAQ,CAACH,QAAQ,EAAE,kBAAkB,CAAC;MACtC,IAAI5Z,KAAK,CAAC0N,KAAK,EAAE;QACbtK,OAAO,CAACxC,OAAO,IAAI,CAAC,IAAI,CAAC;MAC7B;IACJ;;IACAoZ,kBAAkB,CAAC7W,GAAG,EAAE,kBAAkB,CAAC;IAC3CkY,aAAa,EAAE;IACf,IAAIrb,KAAK,CAACoZ,YAAY,EAAE;MACpBhW,OAAO,CAACkF,gBAAgB,CAACnF,GAAG,CAAC;MAC7B,IAAI,CAACyE,iBAAiB,EAAE;QACpB6T,UAAU,CAAC1V,OAAO,CAAC;MACvB;IACJ;EACJ,CAAC,MACI;IACD,IAAI/F,KAAK,CAAC0b,YAAY,EAAE;MACpB;MACA;MACA;MACA;MACA,IAAI1b,KAAK,CAAC0N,KAAK,EAAE;QACbtK,OAAO,CAACxC,OAAO,IAAI,IAAI,CAAC;MAC5B;;MACAmZ,QAAQ,CAACH,QAAQ,EAAE,oBAAoB,CAAC;MACxC,IAAI5Z,KAAK,CAAC0N,KAAK,EAAE;QACbtK,OAAO,CAACxC,OAAO,IAAI,CAAC,IAAI,CAAC;MAC7B;IACJ;;IACAoZ,kBAAkB,CAAC7W,GAAG,EAAE,oBAAoB,CAAC;IAC7CkY,aAAa,EAAE;EACnB;EACA,IAAIrb,KAAK,CAACiL,oBAAoB,EAAE;IAC5B9H,GAAG,CAAC,YAAY,CAAC,IAAIA,GAAG,CAAC,YAAY,CAAC,EAAE;EAC5C;EACA,IAAInD,KAAK,CAAC6D,MAAM,IAAI7D,KAAK,CAACwE,QAAQ,EAAE;IAChCpB,OAAO,CAACsF,mBAAmB,CAACvF,GAAG,CAAC;EACpC;EACA;EACA;EACA,IAAInD,KAAK,CAACoZ,YAAY,EAAE;IACpB,IAAIhW,OAAO,CAACwF,iBAAiB,EAAE;MAC3BxF,OAAO,CAACwF,iBAAiB,EAAE;MAC3BxF,OAAO,CAACwF,iBAAiB,GAAGhC,SAAS;IACzC;IACA,IAAIxD,OAAO,CAACxC,OAAO,GAAG,GAAG,CAAC,qBAAqB;MAC3C+a,QAAQ,CAAC,MAAMtC,cAAc,CAACjW,OAAO,EAAE,KAAK,CAAC,CAAC;IAClD;IACAA,OAAO,CAACxC,OAAO,IAAI,EAAE,CAAC,CAAC,6BAA6B,GAAG,CAAC,oBAAoB;EAChF;EACA;EACA;EACA;AACJ,CAAC;;AACD,MAAMgb,WAAW,GAAIlV,GAAG,IAAK;EACzB,IAAI1G,KAAK,CAACwR,SAAS,EAAE;IACjB,MAAMpO,OAAO,GAAGuD,UAAU,CAACD,GAAG,CAAC;IAC/B,MAAMmS,WAAW,GAAGzV,OAAO,CAACuB,aAAa,CAACkU,WAAW;IACrD,IAAIA,WAAW,IACX,CAACzV,OAAO,CAACxC,OAAO,IAAI,CAAC,CAAC,oBAAoB,EAAE,CAAC,wBAAwB,MAAM,CAAC,CAAC,mBAAmB;MAChGyY,cAAc,CAACjW,OAAO,EAAE,KAAK,CAAC;IAClC;IACA;IACA,OAAOyV,WAAW;EACtB;EACA,OAAO,KAAK;AAChB,CAAC;AACD,MAAM4C,UAAU,GAAII,GAAG,IAAK;EACxB;EACA;EACA,IAAI7b,KAAK,CAAC6L,cAAc,EAAE;IACtB0P,eAAe,CAACjb,GAAG,CAACwb,eAAe,CAAC;EACxC;EACA,IAAI9b,KAAK,CAAC+b,UAAU,EAAE;IAClBpb,GAAG,CAACC,OAAO,IAAI,CAAC,CAAC;EACrB;;EACA+a,QAAQ,CAAC,MAAM7C,SAAS,CAAC5Y,GAAG,EAAE,SAAS,EAAE;IAAE0Y,MAAM,EAAE;MAAEoD,SAAS,EAAE/b;IAAU;EAAE,CAAC,CAAC,CAAC;EAC/E,IAAID,KAAK,CAACgG,OAAO,IAAIC,WAAW,CAACG,OAAO,EAAE;IACtCH,WAAW,CAACG,OAAO,CAAE,aAAYnG,SAAU,qBAAoB4b,GAAI,GAAE,EAAE,cAAc,CAAC;EAC1F;AACJ,CAAC;AACD,MAAM9B,QAAQ,GAAG,CAACH,QAAQ,EAAE/V,MAAM,EAAEoY,GAAG,KAAK;EACxC,IAAIrC,QAAQ,IAAIA,QAAQ,CAAC/V,MAAM,CAAC,EAAE;IAC9B,IAAI;MACA,OAAO+V,QAAQ,CAAC/V,MAAM,CAAC,CAACoY,GAAG,CAAC;IAChC,CAAC,CACD,OAAOzZ,CAAC,EAAE;MACNoC,YAAY,CAACpC,CAAC,CAAC;IACnB;EACJ;EACA,OAAOoE,SAAS;AACpB,CAAC;AACD,MAAMwT,IAAI,GAAG,CAACP,OAAO,EAAEqC,MAAM,KAAK;EAC9B,OAAOrC,OAAO,IAAIA,OAAO,CAACO,IAAI,GAAGP,OAAO,CAACO,IAAI,CAAC8B,MAAM,CAAC,GAAGA,MAAM,EAAE;AACpE,CAAC;AACD,MAAMlC,kBAAkB,GAAG,CAAC7W,GAAG,EAAEgZ,aAAa,KAAK;EAC/C,IAAInc,KAAK,CAACoc,kBAAkB,EAAE;IAC1BtD,SAAS,CAAC3V,GAAG,EAAE,UAAU,GAAGgZ,aAAa,EAAE;MACvCpD,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAE,IAAI;MACdJ,MAAM,EAAE;QACJoD,SAAS,EAAE/b;MACf;IACJ,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAMsb,eAAe,GAAIpY,GAAG,IAAKnD,KAAK,CAACqc,aAAa,GAC9ClZ,GAAG,CAAC2I,SAAS,CAACV,GAAG,CAAC,UAAU,CAAC,GAC7BpL,KAAK,CAACsc,iBAAiB,GACnBnZ,GAAG,CAAC+H,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,GAChCtE,SAAS;AACnB,MAAM+T,mBAAmB,GAAIxX,GAAG,IAAK;EACjC,MAAM2K,QAAQ,GAAG3K,GAAG,CAAC2K,QAAQ;EAC7B,IAAIA,QAAQ,IAAI,IAAI,EAAE;IAClB,KAAK,IAAItO,CAAC,GAAG,CAAC,EAAE+c,EAAE,GAAGzO,QAAQ,CAACtH,MAAM,EAAEhH,CAAC,GAAG+c,EAAE,EAAE/c,CAAC,EAAE,EAAE;MAC/C,MAAMgd,QAAQ,GAAG1O,QAAQ,CAACtO,CAAC,CAAC;MAC5B,IAAI,OAAOgd,QAAQ,CAACC,iBAAiB,KAAK,UAAU,EAAE;QAClDD,QAAQ,CAACC,iBAAiB,EAAE;MAChC;MACA9B,mBAAmB,CAAC6B,QAAQ,CAAC;IACjC;EACJ;AACJ,CAAC;AACD,MAAME,uBAAuB,GAAG,CAAC1S,OAAO,EAAEjE,OAAO,EAAE4W,MAAM,EAAEvZ,OAAO,KAAK;EACnE,MAAMwZ,UAAU,GAAG/W,UAAU,CAAC,eAAe,EAAEE,OAAO,CAAC;EACvD,MAAM2F,UAAU,GAAG1B,OAAO,CAAC0B,UAAU;EACrC,MAAMmR,gBAAgB,GAAG,EAAE;EAC3B,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAMC,eAAe,GAAG/c,KAAK,CAACkC,SAAS,IAAIwJ,UAAU,GAAG,EAAE,GAAG,IAAI;EACjE,MAAM3D,KAAK,GAAI3E,OAAO,CAAC4E,OAAO,GAAG6F,QAAQ,CAAC9H,OAAO,EAAE,IAAI,CAAE;EACzD,IAAI,CAACpF,GAAG,CAACqc,aAAa,EAAE;IACpBC,yBAAyB,CAAC3c,GAAG,CAAC0E,IAAI,EAAGrE,GAAG,CAACqc,aAAa,GAAG,IAAIE,GAAG,EAAE,CAAE;EACxE;EACAlT,OAAO,CAACxE,UAAU,CAAC,GAAGmX,MAAM;EAC5B3S,OAAO,CAACuI,eAAe,CAAC/M,UAAU,CAAC;EACnC2X,aAAa,CAACpV,KAAK,EAAE8U,gBAAgB,EAAEC,SAAS,EAAEC,eAAe,EAAE/S,OAAO,EAAEA,OAAO,EAAE2S,MAAM,CAAC;EAC5FE,gBAAgB,CAAClZ,GAAG,CAAE2J,CAAC,IAAK;IACxB,MAAM8P,aAAa,GAAG9P,CAAC,CAAC+P,QAAQ,GAAG,GAAG,GAAG/P,CAAC,CAACgQ,QAAQ;IACnD,MAAMtF,eAAe,GAAGrX,GAAG,CAACqc,aAAa,CAACza,GAAG,CAAC6a,aAAa,CAAC;IAC5D,MAAM7N,IAAI,GAAGjC,CAAC,CAAC8B,KAAK;IACpB,IAAI4I,eAAe,IAAIhW,cAAc,IAAIgW,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE;MACrEA,eAAe,CAACrD,UAAU,CAACxJ,YAAY,CAACoE,IAAI,EAAEyI,eAAe,CAACnC,WAAW,CAAC;IAC9E;IACA,IAAI,CAACnK,UAAU,EAAE;MACb6D,IAAI,CAAC,MAAM,CAAC,GAAGxJ,OAAO;MACtB,IAAIiS,eAAe,EAAE;QACjBzI,IAAI,CAAC,MAAM,CAAC,GAAGyI,eAAe;QAC9BzI,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAGA,IAAI;MAC/B;IACJ;IACA5O,GAAG,CAACqc,aAAa,CAACO,MAAM,CAACH,aAAa,CAAC;EAC3C,CAAC,CAAC;EACF,IAAIpd,KAAK,CAACkC,SAAS,IAAIwJ,UAAU,EAAE;IAC/BqR,eAAe,CAACpZ,GAAG,CAAE6Z,cAAc,IAAK;MACpC,IAAIA,cAAc,EAAE;QAChB9R,UAAU,CAACmI,WAAW,CAAC2J,cAAc,CAAC;MAC1C;IACJ,CAAC,CAAC;EACN;EACAZ,UAAU,EAAE;AAChB,CAAC;AACD,MAAMO,aAAa,GAAG,CAAC7I,WAAW,EAAEuI,gBAAgB,EAAEC,SAAS,EAAEC,eAAe,EAAE/S,OAAO,EAAEuF,IAAI,EAAEoN,MAAM,KAAK;EACxG,IAAIc,aAAa;EACjB,IAAIC,WAAW;EACf,IAAIC,UAAU;EACd,IAAIne,CAAC;EACL,IAAI+P,IAAI,CAACpF,QAAQ,KAAK,CAAC,CAAC,mBAAmB;IACvCsT,aAAa,GAAGlO,IAAI,CAAC8C,YAAY,CAAC3M,gBAAgB,CAAC;IACnD,IAAI+X,aAAa,EAAE;MACf;MACA;MACAC,WAAW,GAAGD,aAAa,CAAC/K,KAAK,CAAC,GAAG,CAAC;MACtC,IAAIgL,WAAW,CAAC,CAAC,CAAC,KAAKf,MAAM,IAAIe,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACrDC,UAAU,GAAG;UACT/c,OAAO,EAAE,CAAC;UACVyc,QAAQ,EAAEK,WAAW,CAAC,CAAC,CAAC;UACxBJ,QAAQ,EAAEI,WAAW,CAAC,CAAC,CAAC;UACxBE,OAAO,EAAEF,WAAW,CAAC,CAAC,CAAC;UACvBG,OAAO,EAAEH,WAAW,CAAC,CAAC,CAAC;UACvBvO,KAAK,EAAEI,IAAI,CAACxJ,OAAO,CAACmL,WAAW,EAAE;UACjC9B,KAAK,EAAEG,IAAI;UACXV,OAAO,EAAE,IAAI;UACbC,UAAU,EAAE,IAAI;UAChBC,KAAK,EAAE,IAAI;UACXC,MAAM,EAAE,IAAI;UACZpB,MAAM,EAAE;QACZ,CAAC;QACDiP,gBAAgB,CAACxY,IAAI,CAACsZ,UAAU,CAAC;QACjCpO,IAAI,CAACgD,eAAe,CAAC7M,gBAAgB,CAAC;QACtC;QACA;QACA,IAAI,CAAC4O,WAAW,CAACxF,UAAU,EAAE;UACzBwF,WAAW,CAACxF,UAAU,GAAG,EAAE;QAC/B;QACA;QACAwF,WAAW,CAACxF,UAAU,CAAC6O,UAAU,CAACE,OAAO,CAAC,GAAGF,UAAU;QACvD;QACArJ,WAAW,GAAGqJ,UAAU;QACxB,IAAIZ,eAAe,IAAIY,UAAU,CAACC,OAAO,KAAK,GAAG,EAAE;UAC/Cb,eAAe,CAACY,UAAU,CAACE,OAAO,CAAC,GAAGF,UAAU,CAACvO,KAAK;QAC1D;MACJ;IACJ;IACA;IACA,KAAK5P,CAAC,GAAG+P,IAAI,CAAC0E,UAAU,CAACzN,MAAM,GAAG,CAAC,EAAEhH,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC9C2d,aAAa,CAAC7I,WAAW,EAAEuI,gBAAgB,EAAEC,SAAS,EAAEC,eAAe,EAAE/S,OAAO,EAAEuF,IAAI,CAAC0E,UAAU,CAACzU,CAAC,CAAC,EAAEmd,MAAM,CAAC;IACjH;IACA,IAAIpN,IAAI,CAAC7D,UAAU,EAAE;MACjB;MACA,KAAKlM,CAAC,GAAG+P,IAAI,CAAC7D,UAAU,CAACuI,UAAU,CAACzN,MAAM,GAAG,CAAC,EAAEhH,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACzD2d,aAAa,CAAC7I,WAAW,EAAEuI,gBAAgB,EAAEC,SAAS,EAAEC,eAAe,EAAE/S,OAAO,EAAEuF,IAAI,CAAC7D,UAAU,CAACuI,UAAU,CAACzU,CAAC,CAAC,EAAEmd,MAAM,CAAC;MAC5H;IACJ;EACJ,CAAC,MACI,IAAIpN,IAAI,CAACpF,QAAQ,KAAK,CAAC,CAAC,mBAAmB;IAC5C;IACAuT,WAAW,GAAGnO,IAAI,CAACuO,SAAS,CAACpL,KAAK,CAAC,GAAG,CAAC;IACvC,IAAIgL,WAAW,CAAC,CAAC,CAAC,KAAKf,MAAM,IAAIe,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACrD;MACAD,aAAa,GAAGC,WAAW,CAAC,CAAC,CAAC;MAC9BC,UAAU,GAAG;QACT/c,OAAO,EAAE,CAAC;QACVyc,QAAQ,EAAEK,WAAW,CAAC,CAAC,CAAC;QACxBJ,QAAQ,EAAEI,WAAW,CAAC,CAAC,CAAC;QACxBE,OAAO,EAAEF,WAAW,CAAC,CAAC,CAAC;QACvBG,OAAO,EAAEH,WAAW,CAAC,CAAC,CAAC;QACvBtO,KAAK,EAAEG,IAAI;QACXV,OAAO,EAAE,IAAI;QACbC,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE,IAAI;QACZG,KAAK,EAAE,IAAI;QACXvB,MAAM,EAAE;MACZ,CAAC;MACD,IAAI6P,aAAa,KAAKlY,YAAY,EAAE;QAChCoY,UAAU,CAACvO,KAAK,GAAGG,IAAI,CAACsG,WAAW;QACnC,IAAI8H,UAAU,CAACvO,KAAK,IAAIuO,UAAU,CAACvO,KAAK,CAACjF,QAAQ,KAAK,CAAC,CAAC,gBAAgB;UACpEwT,UAAU,CAAC/P,MAAM,GAAG+P,UAAU,CAACvO,KAAK,CAACiH,WAAW;UAChDwG,gBAAgB,CAACxY,IAAI,CAACsZ,UAAU,CAAC;UACjC;UACApO,IAAI,CAAC+B,MAAM,EAAE;UACb,IAAI,CAACgD,WAAW,CAACxF,UAAU,EAAE;YACzBwF,WAAW,CAACxF,UAAU,GAAG,EAAE;UAC/B;UACAwF,WAAW,CAACxF,UAAU,CAAC6O,UAAU,CAACE,OAAO,CAAC,GAAGF,UAAU;UACvD,IAAIZ,eAAe,IAAIY,UAAU,CAACC,OAAO,KAAK,GAAG,EAAE;YAC/Cb,eAAe,CAACY,UAAU,CAACE,OAAO,CAAC,GAAGF,UAAU,CAACvO,KAAK;UAC1D;QACJ;MACJ,CAAC,MACI,IAAIuO,UAAU,CAACN,QAAQ,KAAKV,MAAM,EAAE;QACrC;QACA,IAAIc,aAAa,KAAKnY,YAAY,EAAE;UAChC;UACAqY,UAAU,CAACxO,KAAK,GAAG,MAAM;UACzB,IAAIuO,WAAW,CAAC,CAAC,CAAC,EAAE;YAChBnO,IAAI,CAAC,MAAM,CAAC,GAAGoO,UAAU,CAAC3O,MAAM,GAAG0O,WAAW,CAAC,CAAC,CAAC;UACrD,CAAC,MACI;YACDnO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;UACrB;UACAA,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI;UACnB,IAAIvP,KAAK,CAACkC,SAAS,IAAI6a,eAAe,EAAE;YACpC;YACA;YACAY,UAAU,CAACvO,KAAK,GAAG9O,GAAG,CAACyK,aAAa,CAAC4S,UAAU,CAACxO,KAAK,CAAC;YACtD,IAAIwO,UAAU,CAAC3O,MAAM,EAAE;cACnB;cACA2O,UAAU,CAACvO,KAAK,CAAClE,YAAY,CAAC,MAAM,EAAEyS,UAAU,CAAC3O,MAAM,CAAC;YAC5D;YACA;YACAO,IAAI,CAACoF,UAAU,CAACxJ,YAAY,CAACwS,UAAU,CAACvO,KAAK,EAAEG,IAAI,CAAC;YACpD;YACAA,IAAI,CAAC+B,MAAM,EAAE;YACb,IAAIqM,UAAU,CAACC,OAAO,KAAK,GAAG,EAAE;cAC5Bb,eAAe,CAACY,UAAU,CAACE,OAAO,CAAC,GAAGF,UAAU,CAACvO,KAAK;YAC1D;UACJ;UACA0N,SAAS,CAACzY,IAAI,CAACsZ,UAAU,CAAC;UAC1B,IAAI,CAACrJ,WAAW,CAACxF,UAAU,EAAE;YACzBwF,WAAW,CAACxF,UAAU,GAAG,EAAE;UAC/B;UACAwF,WAAW,CAACxF,UAAU,CAAC6O,UAAU,CAACE,OAAO,CAAC,GAAGF,UAAU;QAC3D,CAAC,MACI,IAAIF,aAAa,KAAKrY,cAAc,EAAE;UACvC;UACA,IAAIpF,KAAK,CAACkC,SAAS,IAAI6a,eAAe,EAAE;YACpC;YACAxN,IAAI,CAAC+B,MAAM,EAAE;UACjB,CAAC,MACI,IAAItR,KAAK,CAACiO,cAAc,EAAE;YAC3BjE,OAAO,CAAC,MAAM,CAAC,GAAGuF,IAAI;YACtBA,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI;UACvB;QACJ;MACJ;IACJ;EACJ,CAAC,MACI,IAAI+E,WAAW,IAAIA,WAAW,CAACnF,KAAK,KAAK,OAAO,EAAE;IACnD,MAAMpH,KAAK,GAAG8F,QAAQ,CAAC,IAAI,EAAE0B,IAAI,CAAC8G,WAAW,CAAC;IAC9CtO,KAAK,CAACqH,KAAK,GAAGG,IAAI;IAClBxH,KAAK,CAAC8V,OAAO,GAAG,GAAG;IACnBvJ,WAAW,CAACxF,UAAU,GAAG,CAAC/G,KAAK,CAAC;EACpC;AACJ,CAAC;AACD,MAAMkV,yBAAyB,GAAG,CAAC1N,IAAI,EAAEwO,WAAW,KAAK;EACrD,IAAIxO,IAAI,CAACpF,QAAQ,KAAK,CAAC,CAAC,mBAAmB;IACvC,IAAI3K,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAG+P,IAAI,CAAC0E,UAAU,CAACzN,MAAM,EAAEhH,CAAC,EAAE,EAAE;MACpCyd,yBAAyB,CAAC1N,IAAI,CAAC0E,UAAU,CAACzU,CAAC,CAAC,EAAEue,WAAW,CAAC;IAC9D;IACA,IAAIxO,IAAI,CAAC7D,UAAU,EAAE;MACjB,KAAKlM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+P,IAAI,CAAC7D,UAAU,CAACuI,UAAU,CAACzN,MAAM,EAAEhH,CAAC,EAAE,EAAE;QACpDyd,yBAAyB,CAAC1N,IAAI,CAAC7D,UAAU,CAACuI,UAAU,CAACzU,CAAC,CAAC,EAAEue,WAAW,CAAC;MACzE;IACJ;EACJ,CAAC,MACI,IAAIxO,IAAI,CAACpF,QAAQ,KAAK,CAAC,CAAC,mBAAmB;IAC5C,MAAMuT,WAAW,GAAGnO,IAAI,CAACuO,SAAS,CAACpL,KAAK,CAAC,GAAG,CAAC;IAC7C,IAAIgL,WAAW,CAAC,CAAC,CAAC,KAAKrY,eAAe,EAAE;MACpC0Y,WAAW,CAACpU,GAAG,CAAC+T,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,WAAW,CAAC,CAAC,CAAC,EAAEnO,IAAI,CAAC;MAC5DA,IAAI,CAACuO,SAAS,GAAG,EAAE;MACnB;MACA;MACAvO,IAAI,CAAC,MAAM,CAAC,GAAGmO,WAAW,CAAC,CAAC,CAAC;IACjC;EACJ;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,kBAAkB,GAAG,CAACC,SAAS,EAAEC,QAAQ,KAAK;EAChD;EACA,IAAID,SAAS,IAAI,IAAI,IAAI,CAACrR,aAAa,CAACqR,SAAS,CAAC,EAAE;IAChD,IAAIje,KAAK,CAACme,WAAW,IAAID,QAAQ,GAAG,CAAC,CAAC,eAAe;MACjD;MACA;MACA,OAAOD,SAAS,KAAK,OAAO,GAAG,KAAK,GAAGA,SAAS,KAAK,EAAE,IAAI,CAAC,CAACA,SAAS;IAC1E;IACA,IAAIje,KAAK,CAACoe,UAAU,IAAIF,QAAQ,GAAG,CAAC,CAAC,cAAc;MAC/C;MACA,OAAOG,UAAU,CAACJ,SAAS,CAAC;IAChC;IACA,IAAIje,KAAK,CAACse,UAAU,IAAIJ,QAAQ,GAAG,CAAC,CAAC,cAAc;MAC/C;MACA;MACA,OAAOzQ,MAAM,CAACwQ,SAAS,CAAC;IAC5B;IACA;IACA,OAAOA,SAAS;EACpB;EACA;EACA;EACA,OAAOA,SAAS;AACpB,CAAC;AACD,MAAMM,QAAQ,GAAG,CAAC7X,GAAG,EAAEmR,QAAQ,KAAKlR,UAAU,CAACD,GAAG,CAAC,CAACiB,gBAAgB,CAACpF,GAAG,CAACsV,QAAQ,CAAC;AAClF,MAAM2G,QAAQ,GAAG,CAAC9X,GAAG,EAAEmR,QAAQ,EAAE4G,MAAM,EAAE3U,OAAO,KAAK;EACjD;EACA,MAAM1G,OAAO,GAAGuD,UAAU,CAACD,GAAG,CAAC;EAC/B,MAAMvD,GAAG,GAAGnD,KAAK,CAACwE,QAAQ,GAAGpB,OAAO,CAACuB,aAAa,GAAG+B,GAAG;EACxD,MAAMgY,MAAM,GAAGtb,OAAO,CAACuE,gBAAgB,CAACpF,GAAG,CAACsV,QAAQ,CAAC;EACrD,MAAMnU,KAAK,GAAGN,OAAO,CAACxC,OAAO;EAC7B,MAAMgZ,QAAQ,GAAG5Z,KAAK,CAACwE,QAAQ,GAAGpB,OAAO,CAACqB,cAAc,GAAGtB,GAAG;EAC9Dsb,MAAM,GAAGT,kBAAkB,CAACS,MAAM,EAAE3U,OAAO,CAAC6U,SAAS,CAAC9G,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACnE;EACA,MAAM+G,UAAU,GAAGC,MAAM,CAACC,KAAK,CAACJ,MAAM,CAAC,IAAIG,MAAM,CAACC,KAAK,CAACL,MAAM,CAAC;EAC/D,MAAMM,cAAc,GAAGN,MAAM,KAAKC,MAAM,IAAI,CAACE,UAAU;EACvD,IAAI,CAAC,CAAC5e,KAAK,CAACwE,QAAQ,IAAI,EAAEd,KAAK,GAAG,CAAC,CAAC,6BAA6B,IAAIgb,MAAM,KAAK9X,SAAS,KAAKmY,cAAc,EAAE;IAC1G;IACA;IACA3b,OAAO,CAACuE,gBAAgB,CAACgC,GAAG,CAACkO,QAAQ,EAAE4G,MAAM,CAAC;IAC9C,IAAIze,KAAK,CAAC0N,KAAK,EAAE;MACb,IAAItK,OAAO,CAACxC,OAAO,GAAG,IAAI,CAAC,mBAAmB;QAC1C6P,cAAc,CAAE,mBAAkBoH,QAAS,yFAAwF,EAAE,WAAW,EAAE1U,GAAG,EAAE,aAAa,EAAEsb,MAAM,EAAE,aAAa,EAAEC,MAAM,CAAC;MACxM,CAAC,MACI,IAAItb,OAAO,CAACxC,OAAO,GAAG,IAAI,CAAC,oBAAoB;QAChD6P,cAAc,CAAE,mBAAkBoH,QAAS,8GAA6G,EAAE,WAAW,EAAE1U,GAAG,EAAE,aAAa,EAAEsb,MAAM,EAAE,aAAa,EAAEC,MAAM,CAAC;MAC7N;IACJ;IACA,IAAI,CAAC1e,KAAK,CAACwE,QAAQ,IAAIoV,QAAQ,EAAE;MAC7B;MACA,IAAI5Z,KAAK,CAACgf,aAAa,IAAIlV,OAAO,CAACmV,UAAU,IAAIvb,KAAK,GAAG,GAAG,CAAC,oBAAoB;QAC7E,MAAMwb,YAAY,GAAGpV,OAAO,CAACmV,UAAU,CAACpH,QAAQ,CAAC;QACjD,IAAIqH,YAAY,EAAE;UACd;UACAA,YAAY,CAACvb,GAAG,CAAEwb,eAAe,IAAK;YAClC,IAAI;cACA;cACAvF,QAAQ,CAACuF,eAAe,CAAC,CAACV,MAAM,EAAEC,MAAM,EAAE7G,QAAQ,CAAC;YACvD,CAAC,CACD,OAAOrV,CAAC,EAAE;cACNoC,YAAY,CAACpC,CAAC,EAAEW,GAAG,CAAC;YACxB;UACJ,CAAC,CAAC;QACN;MACJ;MACA,IAAInD,KAAK,CAACwR,SAAS,IACf,CAAC9N,KAAK,IAAI,CAAC,CAAC,oBAAoB,EAAE,CAAC,wBAAwB,MAAM,CAAC,CAAC,mBAAmB;QACtF,IAAI1D,KAAK,CAACof,eAAe,IAAIxF,QAAQ,CAACyF,qBAAqB,EAAE;UACzD,IAAIzF,QAAQ,CAACyF,qBAAqB,CAACZ,MAAM,EAAEC,MAAM,EAAE7G,QAAQ,CAAC,KAAK,KAAK,EAAE;YACpE;UACJ;QACJ;QACA;QACA;QACA;QACA;QACAwB,cAAc,CAACjW,OAAO,EAAE,KAAK,CAAC;MAClC;IACJ;EACJ;AACJ,CAAC;AACD,MAAMkc,cAAc,GAAG,CAACC,IAAI,EAAEzV,OAAO,EAAEpG,KAAK,KAAK;EAC7C,IAAI1D,KAAK,CAACwf,MAAM,IAAI1V,OAAO,CAAC6U,SAAS,EAAE;IACnC,IAAI3e,KAAK,CAACgf,aAAa,IAAIO,IAAI,CAACE,QAAQ,EAAE;MACtC3V,OAAO,CAACmV,UAAU,GAAGM,IAAI,CAACE,QAAQ;IACtC;IACA;IACA,MAAMC,OAAO,GAAG5d,MAAM,CAAC6d,OAAO,CAAC7V,OAAO,CAAC6U,SAAS,CAAC;IACjD,MAAMiB,SAAS,GAAGL,IAAI,CAACK,SAAS;IAChCF,OAAO,CAAC/b,GAAG,CAAC,SAAiC;MAAA,IAAhC,CAACgN,UAAU,EAAE,CAACkP,WAAW,CAAC,CAAC;MACpC,IAAI,CAAC7f,KAAK,CAACyR,IAAI,IAAIzR,KAAK,CAAC8f,KAAK,MACzBD,WAAW,GAAG,EAAE,CAAC,cACb,CAAC,CAAC7f,KAAK,CAACwE,QAAQ,IAAId,KAAK,GAAG,CAAC,CAAC,qBAAqBmc,WAAW,GAAG,EAAE,CAAC,WAAY,CAAC,EAAE;QACxF;QACA/d,MAAM,CAACQ,cAAc,CAACsd,SAAS,EAAEjP,UAAU,EAAE;UACzCpO,GAAG,GAAG;YACF;YACA,OAAOgc,QAAQ,CAAC,IAAI,EAAE5N,UAAU,CAAC;UACrC,CAAC;UACDhH,GAAG,CAACkH,QAAQ,EAAE;YACV;YACA,IAAI7Q,KAAK,CAAC0N,KAAK,EAAE;cACb,MAAMhH,GAAG,GAAGC,UAAU,CAAC,IAAI,CAAC;cAC5B;cACA;cACA,CAACjD,KAAK,GAAG,CAAC,CAAC,gCAAgC,CAAC;cACxC;cACA,CAACgD,GAAG,CAAC9F,OAAO,GAAG,CAAC,CAAC,kCAAkC,CAAC;cACpD;cACA,CAACif,WAAW,GAAG,EAAE,CAAC,gBAAgB,CAAC;cACnC;cACA,CAACA,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,EAAE;gBAC1CpP,cAAc,CAAE,YAAWE,UAAW,SAAQ7G,OAAO,CAAC2B,SAAU,qIAAoI,CAAC;cACzM;YACJ;YACA;YACA+S,QAAQ,CAAC,IAAI,EAAE7N,UAAU,EAAEE,QAAQ,EAAE/G,OAAO,CAAC;UACjD,CAAC;UACDiW,YAAY,EAAE,IAAI;UAClBC,UAAU,EAAE;QAChB,CAAC,CAAC;MACN,CAAC,MACI,IAAIhgB,KAAK,CAACwE,QAAQ,IACnBxE,KAAK,CAAC6D,MAAM,IACZH,KAAK,GAAG,CAAC,CAAC,8BACVmc,WAAW,GAAG,EAAE,CAAC,cAAc;QAC/B;QACA/d,MAAM,CAACQ,cAAc,CAACsd,SAAS,EAAEjP,UAAU,EAAE;UACzCP,KAAK,GAAU;YAAA,mCAAN6P,IAAI;cAAJA,IAAI;YAAA;YACT,MAAMvZ,GAAG,GAAGC,UAAU,CAAC,IAAI,CAAC;YAC5B,OAAOD,GAAG,CAAC8B,mBAAmB,CAAC4R,IAAI,CAAC,MAAM1T,GAAG,CAACjC,cAAc,CAACkM,UAAU,CAAC,CAAC,GAAGsP,IAAI,CAAC,CAAC;UACtF;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IACF,IAAIjgB,KAAK,CAACkgB,gBAAgB,KAAK,CAAClgB,KAAK,CAACwE,QAAQ,IAAId,KAAK,GAAG,CAAC,CAAC,2BAA2B,EAAE;MACrF,MAAMyc,kBAAkB,GAAG,IAAIjD,GAAG,EAAE;MACpC0C,SAAS,CAACQ,wBAAwB,GAAG,UAAUC,QAAQ,EAAEC,SAAS,EAAEzP,QAAQ,EAAE;QAC1ElQ,GAAG,CAACG,GAAG,CAAC,MAAM;UACV,MAAM+W,QAAQ,GAAGsI,kBAAkB,CAAC5d,GAAG,CAAC8d,QAAQ,CAAC;UACjD;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAI,IAAI,CAACE,cAAc,CAAC1I,QAAQ,CAAC,EAAE;YAC/BhH,QAAQ,GAAG,IAAI,CAACgH,QAAQ,CAAC;YACzB,OAAO,IAAI,CAACA,QAAQ,CAAC;UACzB,CAAC,MACI,IAAI+H,SAAS,CAACW,cAAc,CAAC1I,QAAQ,CAAC,IACvC,OAAO,IAAI,CAACA,QAAQ,CAAC,KAAK,QAAQ,IAClC,IAAI,CAACA,QAAQ,CAAC,IAAIhH,QAAQ,EAAE;YAC5B;YACA;YACA;YACA;UACJ;UACA,IAAI,CAACgH,QAAQ,CAAC,GAAGhH,QAAQ,KAAK,IAAI,IAAI,OAAO,IAAI,CAACgH,QAAQ,CAAC,KAAK,SAAS,GAAG,KAAK,GAAGhH,QAAQ;QAChG,CAAC,CAAC;MACN,CAAC;MACD;MACA;MACA0O,IAAI,CAACiB,kBAAkB,GAAGd,OAAO,CAC5Bjc,MAAM,CAAC;QAAA,IAAC,CAACgd,CAAC,EAAEpU,CAAC,CAAC;QAAA,OAAKA,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;MAAA,EAAC,mBAAmB,CAAC;MAAA,CACjD1I,GAAG,CAAC,SAAmB;QAAA,IAAlB,CAACkU,QAAQ,EAAExL,CAAC,CAAC;QACnB,MAAMgU,QAAQ,GAAGhU,CAAC,CAAC,CAAC,CAAC,IAAIwL,QAAQ;QACjCsI,kBAAkB,CAACxW,GAAG,CAAC0W,QAAQ,EAAExI,QAAQ,CAAC;QAC1C,IAAI7X,KAAK,CAACmW,OAAO,IAAI9J,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,mBAAmB;UAC/CvC,OAAO,CAAC8N,gBAAgB,CAACvT,IAAI,CAAC,CAACwT,QAAQ,EAAEwI,QAAQ,CAAC,CAAC;QACvD;QACA,OAAOA,QAAQ;MACnB,CAAC,CAAC;IACN;EACJ;EACA,OAAOd,IAAI;AACf,CAAC;AACD,MAAMmB,mBAAmB,GAAG,OAAOvd,GAAG,EAAEC,OAAO,EAAE0G,OAAO,EAAE6W,YAAY,EAAEpB,IAAI,KAAK;EAC7E;EACA,IAAI,CAACvf,KAAK,CAACwE,QAAQ,IAAIxE,KAAK,CAACgL,iBAAiB,IAAIhL,KAAK,CAACyJ,KAAK,KACzD,CAACrG,OAAO,CAACxC,OAAO,GAAG,EAAE,CAAC,mCAAmC,CAAC,EAAE;IAC5D,IAAIZ,KAAK,CAACwE,QAAQ,IAAIxE,KAAK,CAACwK,iBAAiB,EAAE;MAC3C;MACApH,OAAO,CAACxC,OAAO,IAAI,EAAE,CAAC;MACtB;MACA;MACA;MACA2e,IAAI,GAAGqB,UAAU,CAAC9W,OAAO,EAAE1G,OAAO,EAAEud,YAAY,CAAC;MACjD,IAAIpB,IAAI,CAACnF,IAAI,EAAE;QACX;QACA,MAAMyG,OAAO,GAAGxa,UAAU,CAAE,WAAUyD,OAAO,CAAC2B,SAAU,IAAGrI,OAAO,CAAC8E,UAAW,EAAC,EAAG,8BAA6B4B,OAAO,CAAC2B,SAAU,GAAE,CAAC;QACpI8T,IAAI,GAAG,MAAMA,IAAI;QACjBsB,OAAO,EAAE;MACb;MACA,IAAI,CAAC7gB,KAAK,CAAC0N,KAAK,IAAI1N,KAAK,CAACyT,OAAO,KAAK,CAAC8L,IAAI,EAAE;QACzC,MAAM,IAAI5H,KAAK,CAAE,oBAAmB7N,OAAO,CAAC2B,SAAU,IAAGrI,OAAO,CAAC8E,UAAW,iBAAgB,CAAC;MACjG;MACA,IAAIlI,KAAK,CAACwf,MAAM,IAAI,CAACD,IAAI,CAACuB,SAAS,EAAE;QACjC;QACA;QACA;QACA,IAAI9gB,KAAK,CAACgf,aAAa,EAAE;UACrBlV,OAAO,CAACmV,UAAU,GAAGM,IAAI,CAACE,QAAQ;QACtC;QACAH,cAAc,CAACC,IAAI,EAAEzV,OAAO,EAAE,CAAC,CAAC,iBAAiB;QACjDyV,IAAI,CAACuB,SAAS,GAAG,IAAI;MACzB;MACA,MAAMC,cAAc,GAAGlb,UAAU,CAAC,gBAAgB,EAAEiE,OAAO,CAAC2B,SAAS,CAAC;MACtE;MACA;MACA;MACA,IAAIzL,KAAK,CAACwf,MAAM,EAAE;QACdpc,OAAO,CAACxC,OAAO,IAAI,CAAC,CAAC;MACzB;MACA;MACA;MACA;MACA;MACA,IAAI;QACA,IAAI2e,IAAI,CAACnc,OAAO,CAAC;MACrB,CAAC,CACD,OAAOZ,CAAC,EAAE;QACNoC,YAAY,CAACpC,CAAC,CAAC;MACnB;MACA,IAAIxC,KAAK,CAACwf,MAAM,EAAE;QACdpc,OAAO,CAACxC,OAAO,IAAI,CAAC,CAAC,CAAC;MAC1B;;MACA,IAAIZ,KAAK,CAACgf,aAAa,EAAE;QACrB5b,OAAO,CAACxC,OAAO,IAAI,GAAG,CAAC;MAC3B;;MACAmgB,cAAc,EAAE;MAChBC,qBAAqB,CAAC5d,OAAO,CAACqB,cAAc,CAAC;IACjD,CAAC,MACI;MACD;MACA8a,IAAI,GAAGpc,GAAG,CAAC8d,WAAW;MACtB7d,OAAO,CAACxC,OAAO,IAAI,EAAE,CAAC;MACtB;MACA;MACA;MACAsgB,cAAc,CAACC,WAAW,CAACrX,OAAO,CAAC2B,SAAS,CAAC,CAAC2O,IAAI,CAAC,MAAOhX,OAAO,CAACxC,OAAO,IAAI,GAAG,CAAC,kBAAmB,CAAC;IACzG;;IACA,IAAIZ,KAAK,CAACyJ,KAAK,IAAI8V,IAAI,CAAC9V,KAAK,EAAE;MAC3B;MACA,IAAIA,KAAK,GAAG8V,IAAI,CAAC9V,KAAK;MACtB,IAAIzJ,KAAK,CAAC+J,IAAI,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE;QACzCA,KAAK,GAAGA,KAAK,CAAErG,OAAO,CAAC8E,UAAU,GAAGgE,WAAW,CAAC/I,GAAG,CAAC,CAAE;QACtD,IAAInD,KAAK,CAACgL,iBAAiB,IAAI5H,OAAO,CAAC8E,UAAU,EAAE;UAC/C/E,GAAG,CAAC+H,YAAY,CAAC,QAAQ,EAAE9H,OAAO,CAAC8E,UAAU,CAAC;QAClD;MACJ;MACA,MAAM9I,OAAO,GAAG6K,UAAU,CAACH,OAAO,EAAE1G,OAAO,CAAC8E,UAAU,CAAC;MACvD,IAAI,CAACwB,MAAM,CAACa,GAAG,CAACnL,OAAO,CAAC,EAAE;QACtB,MAAMgiB,iBAAiB,GAAGvb,UAAU,CAAC,gBAAgB,EAAEiE,OAAO,CAAC2B,SAAS,CAAC;QACzE,IAAI,CAACzL,KAAK,CAACgL,iBAAiB,IACxBhL,KAAK,CAACkC,SAAS,IACflC,KAAK,CAACiC,aAAa,IACnB6H,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,0BAA0B;UAC9C6I,KAAK,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,CAAC2Q,IAAI,CAAE/N,CAAC,IAAKA,CAAC,CAACgV,QAAQ,CAAC5X,KAAK,EAAErK,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1F;QACAkK,aAAa,CAAClK,OAAO,EAAEqK,KAAK,EAAE,CAAC,EAAEK,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,6BAA6B,CAAC;QACnFwgB,iBAAiB,EAAE;MACvB;IACJ;EACJ;EACA;EACA,MAAMxZ,iBAAiB,GAAGxE,OAAO,CAACyE,mBAAmB;EACrD,MAAMyZ,QAAQ,GAAG,MAAMjI,cAAc,CAACjW,OAAO,EAAE,IAAI,CAAC;EACpD,IAAIpD,KAAK,CAACoZ,YAAY,IAAIxR,iBAAiB,IAAIA,iBAAiB,CAAC,MAAM,CAAC,EAAE;IACtE;IACA;IACA;IACA;IACA;IACA;IACAA,iBAAiB,CAAC,MAAM,CAAC,CAACvD,IAAI,CAACid,QAAQ,CAAC;EAC5C,CAAC,MACI;IACDA,QAAQ,EAAE;EACd;AACJ,CAAC;AACD,MAAMN,qBAAqB,GAAIpH,QAAQ,IAAK;EACxC,IAAI5Z,KAAK,CAACwE,QAAQ,IAAIxE,KAAK,CAACyc,iBAAiB,EAAE;IAC3C1C,QAAQ,CAACH,QAAQ,EAAE,mBAAmB,CAAC;EAC3C;AACJ,CAAC;AACD,MAAM6C,iBAAiB,GAAItZ,GAAG,IAAK;EAC/B,IAAI,CAACxC,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,6BAA6B,CAAC,EAAE;IACjD,MAAMwC,OAAO,GAAGuD,UAAU,CAACxD,GAAG,CAAC;IAC/B,MAAM2G,OAAO,GAAG1G,OAAO,CAACmI,SAAS;IACjC,MAAMgW,YAAY,GAAG1b,UAAU,CAAC,mBAAmB,EAAEiE,OAAO,CAAC2B,SAAS,CAAC;IACvE,IAAIzL,KAAK,CAACwD,wBAAwB,EAAE;MAChC;MACAN,qBAAqB,CAACC,GAAG,EAAEC,OAAO,EAAE0G,OAAO,CAAC0X,WAAW,EAAE,IAAI,CAAC;IAClE;IACA,IAAI,EAAEpe,OAAO,CAACxC,OAAO,GAAG,CAAC,CAAC,mBAAmB,EAAE;MAC3C;MACAwC,OAAO,CAACxC,OAAO,IAAI,CAAC,CAAC;MACrB,IAAI+b,MAAM;MACV,IAAI3c,KAAK,CAACwK,iBAAiB,EAAE;QACzBmS,MAAM,GAAGxZ,GAAG,CAACkP,YAAY,CAAC7M,UAAU,CAAC;QACrC,IAAImX,MAAM,EAAE;UACR,IAAI3c,KAAK,CAACkC,SAAS,IAAIF,cAAc,IAAI8H,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,8BAA8B;YACvF,MAAMxB,OAAO,GAAGY,KAAK,CAAC+J,IAAI,GACpBH,QAAQ,CAACzG,GAAG,CAACuI,UAAU,EAAE5B,OAAO,EAAE3G,GAAG,CAACkP,YAAY,CAAC,QAAQ,CAAC,CAAC,GAC7DzI,QAAQ,CAACzG,GAAG,CAACuI,UAAU,EAAE5B,OAAO,CAAC;YACvC3G,GAAG,CAAC2I,SAAS,CAACwF,MAAM,CAAClS,OAAO,GAAG,IAAI,EAAEA,OAAO,GAAG,IAAI,CAAC;UACxD;UACAsd,uBAAuB,CAACvZ,GAAG,EAAE2G,OAAO,CAAC2B,SAAS,EAAEkR,MAAM,EAAEvZ,OAAO,CAAC;QACpE;MACJ;MACA,IAAIpD,KAAK,CAACiO,cAAc,IAAI,CAAC0O,MAAM,EAAE;QACjC;QACA;QACA;QACA;QACA,IAAI3c,KAAK,CAACgL,iBAAiB,IACtB,CAAChL,KAAK,CAACoW,IAAI,IAAIpW,KAAK,CAACkC,SAAS,KAC3B4H,OAAO,CAAClJ,OAAO,IAAI,CAAC,CAAC,0BAA0B,CAAC,CAAC,yBAA0B,EAAE;UACjF6gB,mBAAmB,CAACte,GAAG,CAAC;QAC5B;MACJ;MACA,IAAInD,KAAK,CAACoZ,YAAY,EAAE;QACpB;QACA;QACA,IAAIxR,iBAAiB,GAAGzE,GAAG;QAC3B,OAAQyE,iBAAiB,GAAGA,iBAAiB,CAAC+M,UAAU,IAAI/M,iBAAiB,CAAC6C,IAAI,EAAG;UACjF;UACA;UACA,IAAKzK,KAAK,CAACwK,iBAAiB,IACxB5C,iBAAiB,CAACuC,QAAQ,KAAK,CAAC,CAAC,qBACjCvC,iBAAiB,CAAC8Z,YAAY,CAAC,MAAM,CAAC,IACtC9Z,iBAAiB,CAAC,KAAK,CAAC,IACxBA,iBAAiB,CAAC,KAAK,CAAC,EAAE;YAC1B;YACA;YACAuR,gBAAgB,CAAC/V,OAAO,EAAGA,OAAO,CAACyE,mBAAmB,GAAGD,iBAAiB,CAAE;YAC5E;UACJ;QACJ;MACJ;MACA;MACA;MACA,IAAI5H,KAAK,CAACyR,IAAI,IAAI,CAACzR,KAAK,CAACgL,iBAAiB,IAAIlB,OAAO,CAAC6U,SAAS,EAAE;QAC7D7c,MAAM,CAAC6d,OAAO,CAAC7V,OAAO,CAAC6U,SAAS,CAAC,CAAChb,GAAG,CAAC,UAAiC;UAAA,IAAhC,CAACgN,UAAU,EAAE,CAACkP,WAAW,CAAC,CAAC;UAC9D,IAAIA,WAAW,GAAG,EAAE,CAAC,cAAc1c,GAAG,CAACod,cAAc,CAAC5P,UAAU,CAAC,EAAE;YAC/D,MAAMP,KAAK,GAAGjN,GAAG,CAACwN,UAAU,CAAC;YAC7B,OAAOxN,GAAG,CAACwN,UAAU,CAAC;YACtBxN,GAAG,CAACwN,UAAU,CAAC,GAAGP,KAAK;UAC3B;QACJ,CAAC,CAAC;MACN;MACA,IAAIpQ,KAAK,CAAC2hB,kBAAkB,EAAE;QAC1B;QACA;QACA;QACA;QACAhG,QAAQ,CAAC,MAAM+E,mBAAmB,CAACvd,GAAG,EAAEC,OAAO,EAAE0G,OAAO,CAAC,CAAC;MAC9D,CAAC,MACI;QACD4W,mBAAmB,CAACvd,GAAG,EAAEC,OAAO,EAAE0G,OAAO,CAAC;MAC9C;IACJ,CAAC,MACI;MACD;MACA;MACA;MACA5G,qBAAqB,CAACC,GAAG,EAAEC,OAAO,EAAE0G,OAAO,CAAC0X,WAAW,EAAE,KAAK,CAAC;MAC/D;MACAR,qBAAqB,CAAC5d,OAAO,CAACqB,cAAc,CAAC;IACjD;IACA8c,YAAY,EAAE;EAClB;AACJ,CAAC;AACD,MAAME,mBAAmB,GAAIte,GAAG,IAAK;EACjC;EACA;EACA;EACA;EACA;EACA;EACA,MAAMye,aAAa,GAAIze,GAAG,CAAC,MAAM,CAAC,GAAG7C,GAAG,CAACiY,aAAa,CAACvY,KAAK,CAACyT,OAAO,GAAI,qBAAoBtQ,GAAG,CAACqV,SAAU,GAAE,GAAG,EAAE,CAAE;EACnHoJ,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI;EAC5Bze,GAAG,CAACgI,YAAY,CAACyW,aAAa,EAAEze,GAAG,CAAC0e,UAAU,CAAC;AACnD,CAAC;AACD,MAAMC,oBAAoB,GAAI3e,GAAG,IAAK;EAClC,IAAI,CAACxC,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,6BAA6B,CAAC,EAAE;IACjD,MAAMwC,OAAO,GAAGuD,UAAU,CAACxD,GAAG,CAAC;IAC/B,MAAMyW,QAAQ,GAAG5Z,KAAK,CAACwE,QAAQ,GAAGpB,OAAO,CAACqB,cAAc,GAAGtB,GAAG;IAC9D,IAAInD,KAAK,CAACuD,YAAY,EAAE;MACpB,IAAIH,OAAO,CAACgB,aAAa,EAAE;QACvBhB,OAAO,CAACgB,aAAa,CAACT,GAAG,CAAEoe,UAAU,IAAKA,UAAU,EAAE,CAAC;QACvD3e,OAAO,CAACgB,aAAa,GAAGwC,SAAS;MACrC;IACJ;IACA;IACA,IAAI5G,KAAK,CAACK,UAAU,IAAIM,GAAG,CAACiK,SAAS,EAAE;MACnCjK,GAAG,CAACiK,SAAS,CAACoX,UAAU,CAAC7e,GAAG,CAAC;IACjC;IACA,IAAInD,KAAK,CAACwE,QAAQ,IAAIxE,KAAK,CAAC8hB,oBAAoB,EAAE;MAC9C/H,QAAQ,CAACH,QAAQ,EAAE,sBAAsB,CAAC;IAC9C;IACA,IAAI5Z,KAAK,CAACiiB,YAAY,EAAE;MACpBlI,QAAQ,CAACH,QAAQ,EAAE,oBAAoB,CAAC;IAC5C;EACJ;AACJ,CAAC;AACD,MAAMsI,mBAAmB,GAAG,CAAC3C,IAAI,EAAE4C,WAAW,KAAK;EAC/CjB,cAAc,CAACkB,MAAM,CAACD,WAAW,CAAC,CAAC,CAAC,EAAEE,kBAAkB,CAAC9C,IAAI,EAAE4C,WAAW,CAAC,CAAC;AAChF,CAAC;AACD,MAAME,kBAAkB,GAAG,CAAC9C,IAAI,EAAE4C,WAAW,KAAK;EAC9C,MAAMrY,OAAO,GAAG;IACZlJ,OAAO,EAAEuhB,WAAW,CAAC,CAAC,CAAC;IACvB1W,SAAS,EAAE0W,WAAW,CAAC,CAAC;EAC5B,CAAC;EACD,IAAIniB,KAAK,CAACwf,MAAM,EAAE;IACd1V,OAAO,CAAC6U,SAAS,GAAGwD,WAAW,CAAC,CAAC,CAAC;EACtC;EACA,IAAIniB,KAAK,CAACuD,YAAY,EAAE;IACpBuG,OAAO,CAAC0X,WAAW,GAAGW,WAAW,CAAC,CAAC,CAAC;EACxC;EACA,IAAIniB,KAAK,CAACgf,aAAa,EAAE;IACrBlV,OAAO,CAACmV,UAAU,GAAGM,IAAI,CAACN,UAAU;EACxC;EACA,IAAIjf,KAAK,CAACmW,OAAO,EAAE;IACfrM,OAAO,CAAC8N,gBAAgB,GAAG,EAAE;EACjC;EACA,IAAI5X,KAAK,CAACkC,SAAS,IAAI,CAACF,cAAc,IAAI8H,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,8BAA8B;IACxFkJ,OAAO,CAAClJ,OAAO,IAAI,CAAC,CAAC;EACzB;;EACA,MAAM0hB,yBAAyB,GAAG/C,IAAI,CAACK,SAAS,CAACnD,iBAAiB;EAClE,MAAM8F,4BAA4B,GAAGhD,IAAI,CAACK,SAAS,CAACkC,oBAAoB;EACxEhgB,MAAM,CAACC,MAAM,CAACwd,IAAI,CAACK,SAAS,EAAE;IAC1B4C,cAAc,GAAG;MACbC,YAAY,CAAC,IAAI,EAAE3Y,OAAO,CAAC;IAC/B,CAAC;IACD2S,iBAAiB,GAAG;MAChBA,iBAAiB,CAAC,IAAI,CAAC;MACvB,IAAIzc,KAAK,CAACyc,iBAAiB,IAAI6F,yBAAyB,EAAE;QACtDA,yBAAyB,CAACI,IAAI,CAAC,IAAI,CAAC;MACxC;IACJ,CAAC;IACDZ,oBAAoB,GAAG;MACnBA,oBAAoB,CAAC,IAAI,CAAC;MAC1B,IAAI9hB,KAAK,CAAC8hB,oBAAoB,IAAIS,4BAA4B,EAAE;QAC5DA,4BAA4B,CAACG,IAAI,CAAC,IAAI,CAAC;MAC3C;IACJ,CAAC;IACDC,cAAc,GAAG;MACb,IAAI3gB,cAAc,EAAE;QAChB,IAAIhC,KAAK,CAAC4iB,oBAAoB,EAAE;UAC5B,IAAI,CAACzgB,YAAY,CAAC;YACd4H,IAAI,EAAE,MAAM;YACZ8Y,cAAc,EAAE,CAAC,EAAE/Y,OAAO,CAAClJ,OAAO,GAAG,EAAE,CAAC;UAC5C,CAAC,CAAC;QACN,CAAC,MACI;UACD,IAAI,CAACuB,YAAY,CAAC;YAAE4H,IAAI,EAAE;UAAO,CAAC,CAAC;QACvC;MACJ,CAAC,MACI;QACD,IAAI,CAAC2B,UAAU,GAAG,IAAI;MAC1B;IACJ;EACJ,CAAC,CAAC;EACF6T,IAAI,CAACuD,EAAE,GAAGhZ,OAAO,CAAC2B,SAAS;EAC3B,OAAO6T,cAAc,CAACC,IAAI,EAAEzV,OAAO,EAAE,CAAC,CAAC,6BAA6B,CAAC,CAAC,iBAAiB;AAC3F,CAAC;;AACD,MAAMiZ,eAAe,GAAI5f,GAAG,IAAK;EAC7B,IAAInD,KAAK,CAACyJ,KAAK,IAAIzJ,KAAK,CAAC+J,IAAI,IAAI,CAAC/J,KAAK,CAACwE,QAAQ,EAAE;IAC9C,MAAMuF,IAAI,GAAGmC,WAAW,CAAC/I,GAAG,CAAC;IAC7B,MAAMC,OAAO,GAAGuD,UAAU,CAACxD,GAAG,CAAC;IAC/B,IAAIC,OAAO,CAAC8E,UAAU,KAAK6B,IAAI,EAAE;MAC7B,MAAMD,OAAO,GAAG1G,OAAO,CAACmI,SAAS;MACjC,MAAMyX,UAAU,GAAG7f,GAAG,CAAC,MAAM,CAAC;MAC9B,MAAM/D,OAAO,GAAG6K,UAAU,CAACH,OAAO,EAAEC,IAAI,CAAC;MACzC,MAAMN,KAAK,GAAGtG,GAAG,CAAC8d,WAAW,CAACxX,KAAK,CAACM,IAAI,CAAC;MACzC,MAAMrG,KAAK,GAAGoG,OAAO,CAAClJ,OAAO;MAC7B,IAAI6I,KAAK,EAAE;QACP,IAAI,CAACC,MAAM,CAACa,GAAG,CAACnL,OAAO,CAAC,EAAE;UACtBkK,aAAa,CAAClK,OAAO,EAAEqK,KAAK,EAAE,CAAC,EAAE/F,KAAK,GAAG,CAAC,CAAC,6BAA6B,CAAC;QAC7E;;QACAN,OAAO,CAAC8E,UAAU,GAAG6B,IAAI;QACzB5G,GAAG,CAAC2I,SAAS,CAACwF,MAAM,CAAC0R,UAAU,GAAG,IAAI,EAAEA,UAAU,GAAG,IAAI,CAAC;QAC1D9Y,YAAY,CAAC9G,OAAO,CAAC;QACrBwY,WAAW,CAACzY,GAAG,CAAC;MACpB;IACJ;EACJ;AACJ,CAAC;AACD,MAAM8f,QAAQ,GAAG,CAAC9f,GAAG,EAAE2G,OAAO,EAAE6W,YAAY,KAAK;EAC7C;EACA,MAAMvd,OAAO,GAAGuD,UAAU,CAACxD,GAAG,CAAC;EAC/B;EACAC,OAAO,CAACxC,OAAO,GAAG,CAAC,CAAC;EACpB;EACA;EACA;EACA;EACA;EACAuC,GAAG,CAAC,YAAY,CAAC,GAAG,MAAM;IACtB;IACA,OAAOA,GAAG,CAAC,YAAY,CAAC;EAC5B,CAAC;EACD;EACAud,mBAAmB,CAACvd,GAAG,EAAEC,OAAO,EAAE0G,OAAO,EAAE6W,YAAY,CAAC;AAC5D,CAAC;AACD,MAAMuC,cAAc,GAAIC,oBAAoB,IAAK;EAC7C,MAAMC,YAAY,GAAGD,oBAAoB,CAACE,SAAS;EACnDF,oBAAoB,CAACE,SAAS,GAAG,UAAUC,IAAI,EAAE;IAC7C,MAAMC,OAAO,GAAG,IAAI;IACpB,MAAMC,WAAW,GAAGxjB,KAAK,CAACkC,SAAS,GAAGqhB,OAAO,CAAC7X,UAAU,IAAI1J,cAAc,GAAG,KAAK;IAClF,MAAMyhB,UAAU,GAAGL,YAAY,CAACV,IAAI,CAACa,OAAO,EAAEC,WAAW,GAAGF,IAAI,GAAG,KAAK,CAAC;IACzE,IAAItjB,KAAK,CAACoW,IAAI,IAAI,CAACoN,WAAW,IAAIF,IAAI,EAAE;MACpC,IAAI9jB,CAAC,GAAG,CAAC;MACT,IAAIkkB,OAAO,EAAEC,cAAc;MAC3B,MAAMC,eAAe,GAAG,CACpB,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,KAAK,EACL,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,CACT;MACD,OAAOpkB,CAAC,GAAG+jB,OAAO,CAACtP,UAAU,CAACzN,MAAM,EAAEhH,CAAC,EAAE,EAAE;QACvCkkB,OAAO,GAAGH,OAAO,CAACtP,UAAU,CAACzU,CAAC,CAAC,CAAC,MAAM,CAAC;QACvCmkB,cAAc,GAAGC,eAAe,CAACC,KAAK,CAAEC,YAAY,IAAK,CAACP,OAAO,CAACtP,UAAU,CAACzU,CAAC,CAAC,CAACskB,YAAY,CAAC,CAAC;QAC9F,IAAIJ,OAAO,EAAE;UACT,IAAI1jB,KAAK,CAAC+jB,kBAAkB,IAAIN,UAAU,CAACO,aAAa,EAAE;YACtDP,UAAU,CAACO,aAAa,CAACN,OAAO,CAACL,SAAS,CAAC,IAAI,CAAC,CAAC;UACrD,CAAC,MACI;YACDI,UAAU,CAAC5P,WAAW,CAAC6P,OAAO,CAACL,SAAS,CAAC,IAAI,CAAC,CAAC;UACnD;QACJ;QACA,IAAIM,cAAc,EAAE;UAChBF,UAAU,CAAC5P,WAAW,CAAC0P,OAAO,CAACtP,UAAU,CAACzU,CAAC,CAAC,CAAC6jB,SAAS,CAAC,IAAI,CAAC,CAAC;QACjE;MACJ;IACJ;IACA,OAAOI,UAAU;EACrB,CAAC;AACL,CAAC;AACD,MAAMQ,oBAAoB,GAAId,oBAAoB,IAAK;EACnDA,oBAAoB,CAACa,aAAa,GAAGb,oBAAoB,CAACtP,WAAW;EACrEsP,oBAAoB,CAACtP,WAAW,GAAG,UAAUqQ,QAAQ,EAAE;IACnD,MAAMjX,QAAQ,GAAIiX,QAAQ,CAAC,MAAM,CAAC,GAAGC,WAAW,CAACD,QAAQ,CAAE;IAC3D,MAAME,QAAQ,GAAGC,eAAe,CAAC,IAAI,CAACpQ,UAAU,EAAEhH,QAAQ,CAAC;IAC3D,IAAImX,QAAQ,EAAE;MACV,MAAME,cAAc,GAAGC,qBAAqB,CAACH,QAAQ,EAAEnX,QAAQ,CAAC;MAChE,MAAMuX,WAAW,GAAGF,cAAc,CAACA,cAAc,CAAC9d,MAAM,GAAG,CAAC,CAAC;MAC7D,OAAOge,WAAW,CAAC7P,UAAU,CAACxJ,YAAY,CAAC+Y,QAAQ,EAAEM,WAAW,CAAC3O,WAAW,CAAC;IACjF;IACA,OAAO,IAAI,CAACmO,aAAa,CAACE,QAAQ,CAAC;EACvC,CAAC;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,MAAMO,gBAAgB,GAAG,CAACC,oBAAoB,EAAE5a,OAAO,KAAK;EACxD,IAAI9J,KAAK,CAAC4L,MAAM,IAAI9B,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,8BAA8B;IAClE,MAAM+jB,UAAU,GAAG7iB,MAAM,CAAC8iB,wBAAwB,CAACC,IAAI,CAACjF,SAAS,EAAE,aAAa,CAAC;IACjF9d,MAAM,CAACQ,cAAc,CAACoiB,oBAAoB,EAAE,eAAe,EAAEC,UAAU,CAAC;IACxE7iB,MAAM,CAACQ,cAAc,CAACoiB,oBAAoB,EAAE,aAAa,EAAE;MACvDniB,GAAG,GAAG;QACF,IAAIuiB,EAAE;QACN;QACA;QACA,MAAMV,QAAQ,GAAGC,eAAe,CAAC,IAAI,CAACpQ,UAAU,EAAE,EAAE,CAAC;QACrD;QACA;QACA,IAAI,CAAC,CAAC6Q,EAAE,GAAGV,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACvO,WAAW,MAAM,IAAI,IAAIiP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC3a,QAAQ,MAAM,CAAC,CAAC,iBAAiB;UAC1J,OAAOia,QAAQ,CAACvO,WAAW,CAACQ,WAAW;QAC3C,CAAC,MACI,IAAI+N,QAAQ,EAAE;UACf,OAAOA,QAAQ,CAAC/N,WAAW;QAC/B,CAAC,MACI;UACD;UACA,OAAO,IAAI,CAAC0O,aAAa;QAC7B;MACJ,CAAC;MACDpb,GAAG,CAACyG,KAAK,EAAE;QACP,IAAI0U,EAAE;QACN;QACA;QACA,MAAMV,QAAQ,GAAGC,eAAe,CAAC,IAAI,CAACpQ,UAAU,EAAE,EAAE,CAAC;QACrD;QACA;QACA;QACA,IAAI,CAAC,CAAC6Q,EAAE,GAAGV,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACvO,WAAW,MAAM,IAAI,IAAIiP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC3a,QAAQ,MAAM,CAAC,CAAC,iBAAiB;UAC1Jia,QAAQ,CAACvO,WAAW,CAACQ,WAAW,GAAGjG,KAAK;QAC5C,CAAC,MACI,IAAIgU,QAAQ,EAAE;UACfA,QAAQ,CAAC/N,WAAW,GAAGjG,KAAK;QAChC,CAAC,MACI;UACD;UACA;UACA;UACA,IAAI,CAAC2U,aAAa,GAAG3U,KAAK;UAC1B,MAAMwR,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;UAClC,IAAIA,aAAa,EAAE;YACf,IAAI,CAACzW,YAAY,CAACyW,aAAa,EAAE,IAAI,CAACC,UAAU,CAAC;UACrD;QACJ;MACJ;IACJ,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAMmD,mBAAmB,GAAG,CAAC7hB,GAAG,EAAE2G,OAAO,KAAK;EAC1C,MAAMmb,YAAY,SAAS1X,KAAK,CAAC;IAC7B2X,IAAI,CAAChT,CAAC,EAAE;MACJ,OAAO,IAAI,CAACA,CAAC,CAAC;IAClB;EACJ;EACA,IAAIpI,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,0BAA0B;IAC9C,MAAMukB,YAAY,GAAGhiB,GAAG,CAACiiB,gBAAgB,CAAC,YAAY,CAAC;IACvDtjB,MAAM,CAACQ,cAAc,CAACa,GAAG,EAAE,UAAU,EAAE;MACnCZ,GAAG,GAAG;QACF,OAAO,IAAI,CAAC0R,UAAU,CAACtQ,GAAG,CAAEuO,CAAC,IAAKA,CAAC,CAAC/H,QAAQ,KAAK,CAAC,CAAC;MACvD;IACJ,CAAC,CAAC;IACFrI,MAAM,CAACQ,cAAc,CAACa,GAAG,EAAE,mBAAmB,EAAE;MAC5CZ,GAAG,GAAG;QACF,OAAOY,GAAG,CAAC2K,QAAQ,CAACtH,MAAM;MAC9B;IACJ,CAAC,CAAC;IACF1E,MAAM,CAACQ,cAAc,CAACa,GAAG,EAAE,YAAY,EAAE;MACrCZ,GAAG,GAAG;QACF,MAAM0R,UAAU,GAAGkR,YAAY,CAACzC,IAAI,CAAC,IAAI,CAAC;QAC1C,IAAI,CAAC/hB,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,6BAA6B,CAAC,IAC/C+F,UAAU,CAAC,IAAI,CAAC,CAAC/F,OAAO,GAAG,CAAC,CAAC,mBAAmB;UAChD,MAAMuI,MAAM,GAAG,IAAI8b,YAAY,EAAE;UACjC,KAAK,IAAIzlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyU,UAAU,CAACzN,MAAM,EAAEhH,CAAC,EAAE,EAAE;YACxC,MAAM4W,IAAI,GAAGnC,UAAU,CAACzU,CAAC,CAAC,CAAC,MAAM,CAAC;YAClC,IAAI4W,IAAI,EAAE;cACNjN,MAAM,CAAC9E,IAAI,CAAC+R,IAAI,CAAC;YACrB;UACJ;UACA,OAAOjN,MAAM;QACjB;QACA,OAAO8b,YAAY,CAACI,IAAI,CAACpR,UAAU,CAAC;MACxC;IACJ,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAMkQ,WAAW,GAAI5U,IAAI,IAAKA,IAAI,CAAC,MAAM,CAAC,IAAKA,IAAI,CAACpF,QAAQ,KAAK,CAAC,IAAIoF,IAAI,CAAC8C,YAAY,CAAC,MAAM,CAAE,IAAI,EAAE;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgS,eAAe,GAAG,CAACpQ,UAAU,EAAEhH,QAAQ,KAAK;EAC9C,IAAIzN,CAAC,GAAG,CAAC;EACT,IAAI6T,SAAS;EACb,OAAO7T,CAAC,GAAGyU,UAAU,CAACzN,MAAM,EAAEhH,CAAC,EAAE,EAAE;IAC/B6T,SAAS,GAAGY,UAAU,CAACzU,CAAC,CAAC;IACzB,IAAI6T,SAAS,CAAC,MAAM,CAAC,IAAIA,SAAS,CAAC,MAAM,CAAC,KAAKpG,QAAQ,EAAE;MACrD,OAAOoG,SAAS;IACpB;IACAA,SAAS,GAAGgR,eAAe,CAAChR,SAAS,CAACY,UAAU,EAAEhH,QAAQ,CAAC;IAC3D,IAAIoG,SAAS,EAAE;MACX,OAAOA,SAAS;IACpB;EACJ;EACA,OAAO,IAAI;AACf,CAAC;AACD,MAAMkR,qBAAqB,GAAG,CAACrS,CAAC,EAAEjF,QAAQ,KAAK;EAC3C,MAAMgH,UAAU,GAAG,CAAC/B,CAAC,CAAC;EACtB,OAAO,CAACA,CAAC,GAAGA,CAAC,CAAC2D,WAAW,KAAK3D,CAAC,CAAC,MAAM,CAAC,KAAKjF,QAAQ,EAAE;IAClDgH,UAAU,CAAC5P,IAAI,CAAC6N,CAAC,CAAC;EACtB;EACA,OAAO+B,UAAU;AACrB,CAAC;AACD,MAAMqR,aAAa,GAAG,UAACC,WAAW,EAAmB;EAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;EAC5C,IAAIxlB,KAAK,CAACgG,OAAO,IAAIC,WAAW,CAACC,IAAI,EAAE;IACnCD,WAAW,CAACC,IAAI,CAAC,cAAc,CAAC;EACpC;EACA6C,eAAe,EAAE;EACjB,MAAM0c,YAAY,GAAG5f,UAAU,CAAC,eAAe,CAAC;EAChD,MAAM6f,OAAO,GAAG,EAAE;EAClB,MAAMC,OAAO,GAAGH,OAAO,CAACG,OAAO,IAAI,EAAE;EACrC,MAAMzE,cAAc,GAAGhhB,GAAG,CAACghB,cAAc;EACzC,MAAM1gB,IAAI,GAAGF,GAAG,CAACE,IAAI;EACrB,MAAMolB,WAAW,GAAG,aAAcplB,IAAI,CAACkK,aAAa,CAAC,eAAe,CAAC;EACrE,MAAMmb,eAAe,GAAG,aAAcvlB,GAAG,CAACyK,aAAa,CAAC,OAAO,CAAC;EAChE,MAAM+a,0BAA0B,GAAG,EAAE;EACrC,MAAMpc,MAAM,GAAG,aAAcpJ,GAAG,CAACylB,gBAAgB,CAAE,IAAGtgB,iBAAkB,GAAE,CAAC;EAC3E,IAAIugB,eAAe;EACnB,IAAIC,eAAe,GAAG,IAAI;EAC1B,IAAIzmB,CAAC,GAAG,CAAC;EACTsC,MAAM,CAACC,MAAM,CAACpB,GAAG,EAAE6kB,OAAO,CAAC;EAC3B7kB,GAAG,CAACE,cAAc,GAAG,IAAIqlB,GAAG,CAACV,OAAO,CAACW,YAAY,IAAI,IAAI,EAAE7lB,GAAG,CAAC8lB,OAAO,CAAC,CAACC,IAAI;EAC5E,IAAIrmB,KAAK,CAAC+b,UAAU,EAAE;IAClB,IAAIyJ,OAAO,CAACc,SAAS,EAAE;MACnB3lB,GAAG,CAACC,OAAO,IAAI,CAAC,CAAC;IACrB;EACJ;;EACA,IAAIZ,KAAK,CAACwK,iBAAiB,EAAE;IACzB;IACA;IACA7J,GAAG,CAACC,OAAO,IAAI,CAAC,CAAC;EACrB;;EACA,IAAIZ,KAAK,CAACwK,iBAAiB,IAAIxK,KAAK,CAACkC,SAAS,EAAE;IAC5C,OAAO1C,CAAC,GAAGkK,MAAM,CAAClD,MAAM,EAAEhH,CAAC,EAAE,EAAE;MAC3B8J,aAAa,CAACI,MAAM,CAAClK,CAAC,CAAC,CAAC6S,YAAY,CAAC5M,iBAAiB,CAAC,EAAEuG,qBAAqB,CAACtC,MAAM,CAAClK,CAAC,CAAC,CAACmL,SAAS,CAAC,EAAE,IAAI,CAAC;IAC9G;EACJ;EACA4a,WAAW,CAAC5hB,GAAG,CAAE4iB,UAAU,IAAK;IAC5BA,UAAU,CAAC,CAAC,CAAC,CAAC5iB,GAAG,CAAEwe,WAAW,IAAK;MAC/B,MAAMrY,OAAO,GAAG;QACZlJ,OAAO,EAAEuhB,WAAW,CAAC,CAAC,CAAC;QACvB1W,SAAS,EAAE0W,WAAW,CAAC,CAAC,CAAC;QACzBxD,SAAS,EAAEwD,WAAW,CAAC,CAAC,CAAC;QACzBX,WAAW,EAAEW,WAAW,CAAC,CAAC;MAC9B,CAAC;MACD,IAAIniB,KAAK,CAACwf,MAAM,EAAE;QACd1V,OAAO,CAAC6U,SAAS,GAAGwD,WAAW,CAAC,CAAC,CAAC;MACtC;MACA,IAAIniB,KAAK,CAACuD,YAAY,EAAE;QACpBuG,OAAO,CAAC0X,WAAW,GAAGW,WAAW,CAAC,CAAC,CAAC;MACxC;MACA,IAAIniB,KAAK,CAACmW,OAAO,EAAE;QACfrM,OAAO,CAAC8N,gBAAgB,GAAG,EAAE;MACjC;MACA,IAAI5X,KAAK,CAACgf,aAAa,EAAE;QACrBlV,OAAO,CAACmV,UAAU,GAAG,CAAC,CAAC;MAC3B;MACA,IAAIjf,KAAK,CAACkC,SAAS,IAAI,CAACF,cAAc,IAAI8H,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,8BAA8B;QACxFkJ,OAAO,CAAClJ,OAAO,IAAI,CAAC,CAAC;MACzB;;MACA,MAAMmF,OAAO,GAAG/F,KAAK,CAACwmB,gBAAgB,IAAIhB,OAAO,CAACgB,gBAAgB,GAC5DhB,OAAO,CAACgB,gBAAgB,CAAC1c,OAAO,CAAC2B,SAAS,CAAC,GAC3C3B,OAAO,CAAC2B,SAAS;MACvB,MAAMgb,WAAW,GAAG,cAAc/lB,WAAW,CAAC;QAC1C;QACAugB,WAAW,CAACyF,IAAI,EAAE;UACd;UACA,KAAK,CAACA,IAAI,CAAC;UACXA,IAAI,GAAG,IAAI;UACXjE,YAAY,CAACiE,IAAI,EAAE5c,OAAO,CAAC;UAC3B,IAAI9J,KAAK,CAACkC,SAAS,IAAI4H,OAAO,CAAClJ,OAAO,GAAG,CAAC,CAAC,8BAA8B;YACrE;YACA;YACA;YACA;YACA,IAAIoB,cAAc,EAAE;cAChB,IAAIhC,KAAK,CAAC4iB,oBAAoB,EAAE;gBAC5B8D,IAAI,CAACvkB,YAAY,CAAC;kBACd4H,IAAI,EAAE,MAAM;kBACZ8Y,cAAc,EAAE,CAAC,EAAE/Y,OAAO,CAAClJ,OAAO,GAAG,EAAE,CAAC;gBAC5C,CAAC,CAAC;cACN,CAAC,MACI;gBACD8lB,IAAI,CAACvkB,YAAY,CAAC;kBAAE4H,IAAI,EAAE;gBAAO,CAAC,CAAC;cACvC;YACJ,CAAC,MACI,IAAI,CAAC/J,KAAK,CAACgL,iBAAiB,IAAI,EAAE,YAAY,IAAI0b,IAAI,CAAC,EAAE;cAC1DA,IAAI,CAAChb,UAAU,GAAGgb,IAAI;YAC1B;UACJ;UACA,IAAI1mB,KAAK,CAAC2mB,iBAAiB,EAAE;YACzB3B,mBAAmB,CAAC0B,IAAI,EAAE5c,OAAO,CAAC;UACtC;QACJ;QACA2S,iBAAiB,GAAG;UAChB,IAAIuJ,eAAe,EAAE;YACjBY,YAAY,CAACZ,eAAe,CAAC;YAC7BA,eAAe,GAAG,IAAI;UAC1B;UACA,IAAIC,eAAe,EAAE;YACjB;YACAH,0BAA0B,CAACzhB,IAAI,CAAC,IAAI,CAAC;UACzC,CAAC,MACI;YACD1D,GAAG,CAACG,GAAG,CAAC,MAAM2b,iBAAiB,CAAC,IAAI,CAAC,CAAC;UAC1C;QACJ;QACAqF,oBAAoB,GAAG;UACnBnhB,GAAG,CAACG,GAAG,CAAC,MAAMghB,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC7C;QACA+E,gBAAgB,GAAG;UACf,OAAOlgB,UAAU,CAAC,IAAI,CAAC,CAACyB,gBAAgB;QAC5C;MACJ,CAAC;MACD,IAAIpI,KAAK,CAAC8mB,YAAY,EAAE;QACpB5D,cAAc,CAACuD,WAAW,CAAC7G,SAAS,CAAC;MACzC;MACA,IAAI5f,KAAK,CAAC+jB,kBAAkB,EAAE;QAC1BE,oBAAoB,CAACwC,WAAW,CAAC7G,SAAS,CAAC;MAC/C;MACA,IAAI5f,KAAK,CAACiL,oBAAoB,EAAE;QAC5Bwb,WAAW,CAAC7G,SAAS,CAAC,OAAO,CAAC,GAAG,UAAUe,YAAY,EAAE;UACrDsC,QAAQ,CAAC,IAAI,EAAEnZ,OAAO,EAAE6W,YAAY,CAAC;QACzC,CAAC;MACL;MACA,IAAI3gB,KAAK,CAAC+mB,wBAAwB,EAAE;QAChCtC,gBAAgB,CAACgC,WAAW,CAAC7G,SAAS,EAAE9V,OAAO,CAAC;MACpD;MACAA,OAAO,CAACkd,cAAc,GAAGT,UAAU,CAAC,CAAC,CAAC;MACtC,IAAI,CAACZ,OAAO,CAACra,QAAQ,CAACvF,OAAO,CAAC,IAAI,CAACmb,cAAc,CAAC3e,GAAG,CAACwD,OAAO,CAAC,EAAE;QAC5D2f,OAAO,CAACrhB,IAAI,CAAC0B,OAAO,CAAC;QACrBmb,cAAc,CAACkB,MAAM,CAACrc,OAAO,EAAEuZ,cAAc,CAACmH,WAAW,EAAE3c,OAAO,EAAE,CAAC,CAAC,2BAA2B,CAAC;MACtG;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;;EACF,IAAI9J,KAAK,CAACinB,qBAAqB,KAAKjnB,KAAK,CAACqc,aAAa,IAAIrc,KAAK,CAACsc,iBAAiB,CAAC,EAAE;IACjFuJ,eAAe,CAAClb,SAAS,GAAG+a,OAAO,GAAG/f,YAAY;IAClDkgB,eAAe,CAAC3a,YAAY,CAAC,aAAa,EAAE,EAAE,CAAC;IAC/C1K,IAAI,CAAC2K,YAAY,CAAC0a,eAAe,EAAED,WAAW,GAAGA,WAAW,CAAC/P,WAAW,GAAGrV,IAAI,CAACqhB,UAAU,CAAC;EAC/F;EACA;EACAoE,eAAe,GAAG,KAAK;EACvB,IAAIH,0BAA0B,CAACtf,MAAM,EAAE;IACnCsf,0BAA0B,CAACniB,GAAG,CAAE8G,IAAI,IAAKA,IAAI,CAACgS,iBAAiB,EAAE,CAAC;EACtE,CAAC,MACI;IACD,IAAIzc,KAAK,CAACgG,OAAO,EAAE;MACfrF,GAAG,CAACG,GAAG,CAAC,MAAOklB,eAAe,GAAGkB,UAAU,CAACzL,UAAU,EAAE,EAAE,EAAE,SAAS,CAAE,CAAC;IAC5E,CAAC,MACI;MACD9a,GAAG,CAACG,GAAG,CAAC,MAAOklB,eAAe,GAAGkB,UAAU,CAACzL,UAAU,EAAE,EAAE,CAAE,CAAC;IACjE;EACJ;EACA;EACAgK,YAAY,EAAE;AAClB,CAAC;AACD,MAAM0B,YAAY,GAAIC,IAAI,IAAK;EAC3B,MAAMC,QAAQ,GAAG,IAAInB,GAAG,CAACkB,IAAI,EAAEzmB,GAAG,CAACE,cAAc,CAAC;EAClD,OAAOwmB,QAAQ,CAACC,MAAM,KAAKpnB,GAAG,CAACqnB,QAAQ,CAACD,MAAM,GAAGD,QAAQ,CAAChB,IAAI,GAAGgB,QAAQ,CAACG,QAAQ;AACtF,CAAC;AACD,MAAMC,YAAY,GAAIL,IAAI,IAAMzmB,GAAG,CAACE,cAAc,GAAGumB,IAAK;AAC1D,MAAMM,UAAU,GAAG,CAACC,IAAI,EAAE5hB,OAAO,KAAK;EAClC,MAAM8gB,gBAAgB,GAAG,MAAM;IAC3B,IAAI1jB,GAAG,GAAG7C,GAAG,CAACoK,aAAa,CAAC3E,OAAO,CAAC;IACpC,IAAI,CAAC5C,GAAG,EAAE;MACNA,GAAG,GAAG7C,GAAG,CAACyK,aAAa,CAAChF,OAAO,CAAC;MAChCzF,GAAG,CAAC0E,IAAI,CAAC6O,WAAW,CAAC1Q,GAAG,CAAC;IAC7B;IACA,OAAO,OAAOA,GAAG,CAAC0jB,gBAAgB,KAAK,UAAU,GAAG1jB,GAAG,CAAC0jB,gBAAgB,EAAE,GAAGlkB,OAAO,CAACC,OAAO,CAACO,GAAG,CAAC;EACrG,CAAC;EACD,MAAMykB,MAAM,GAAG,YAAa;IAAA,mCAAT3H,IAAI;MAAJA,IAAI;IAAA;IACnB,OAAO4G,gBAAgB,EAAE,CAACzM,IAAI,CAAEjZ,EAAE,IAAKA,EAAE,CAACymB,MAAM,CAAC,GAAG3H,IAAI,CAAC,CAAC;EAC9D,CAAC;EACD,OAAO;IACH2H,MAAM;IACNf;EACJ,CAAC;AACL,CAAC;AACD,MAAMgB,UAAU,GAAG,CAACC,IAAI,EAAEC,OAAO,KAAK;EAClC,IAAIA,OAAO,IAAI9kB,OAAO,EAAE;IACpB,OAAOA,OAAO,CAAC8kB,OAAO,CAAC;EAC3B,CAAC,MACI,IAAIA,OAAO,KAAK,QAAQ,EAAE;IAC3B,OAAO7nB,GAAG;EACd,CAAC,MACI,IAAI6nB,OAAO,KAAK,UAAU,EAAE;IAC7B,OAAOznB,GAAG;EACd,CAAC,MACI,IAAIynB,OAAO,KAAK,UAAU,IAAIA,OAAO,KAAK,aAAa,EAAE;IAC1D,OAAO/nB,KAAK,CAACgL,iBAAiB,GAAG,IAAI,GAAG,KAAK;EACjD,CAAC,MACI,IAAI+c,OAAO,KAAK,UAAU,EAAE;IAC7B,OAAO/nB,KAAK,CAACgL,iBAAiB,GAAG,KAAK,GAAG,IAAI;EACjD,CAAC,MACI,IAAI+c,OAAO,KAAK,cAAc,IAAIA,OAAO,KAAK,YAAY,EAAE;IAC7D,OAAOZ,YAAY,CAAC,GAAG,CAAC;EAC5B,CAAC,MACI,IAAIY,OAAO,KAAK,OAAO,EAAE;IAC1B,OAAO;MACHC,KAAK,EAAEtO,SAAS;MAChBuO,IAAI,EAAEC,QAAQ;MACdC,IAAI,EAAE;QACF/N,IAAI,CAAC3K,EAAE,EAAE;UACL,OAAOkM,QAAQ,CAAClM,EAAE,CAAC;QACvB;MACJ;IACJ,CAAC;EACL;EACA,OAAO7I,SAAS;AACpB,CAAC;AACD,MAAMwhB,qBAAqB,GAAG,CAAC9nB,GAAG,EAAE+nB,gBAAgB,KAAK;EACrD,IAAI/nB,GAAG,IAAI,IAAI,EAAE;IACb,MAAMgoB,OAAO,GAAG;MACZC,OAAO,EAAE,CAAC;MACVC,YAAY,EAAE,CAAC;MACfH,gBAAgB,EAAE,IAAI/d,GAAG,CAAC+d,gBAAgB;IAC9C,CAAC;IACD,MAAMI,gBAAgB,GAAG,EAAE;IAC3BC,qBAAqB,CAACpoB,GAAG,EAAEA,GAAG,CAAC0E,IAAI,EAAEsjB,OAAO,EAAEG,gBAAgB,CAAC;IAC/DA,gBAAgB,CAACjZ,OAAO,CAAEwI,eAAe,IAAK;MAC1C,IAAIA,eAAe,IAAI,IAAI,EAAE;QACzB,MAAM2Q,OAAO,GAAG3Q,eAAe,CAAC,MAAM,CAAC;QACvC,IAAI2E,MAAM,GAAGgM,OAAO,CAAC,WAAW,CAAC;QACjC,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;QACjC,IAAIE,OAAO,GAAI,GAAElM,MAAO,IAAGiM,MAAO,EAAC;QACnC,IAAIjM,MAAM,IAAI,IAAI,EAAE;UAChBA,MAAM,GAAG,CAAC;UACV2L,OAAO,CAACE,YAAY,EAAE;UACtBI,MAAM,GAAGN,OAAO,CAACE,YAAY;UAC7BK,OAAO,GAAI,GAAElM,MAAO,IAAGiM,MAAO,EAAC;UAC/B,IAAID,OAAO,CAACxe,QAAQ,KAAK,CAAC,CAAC,mBAAmB;YAC1Cwe,OAAO,CAACzd,YAAY,CAACxF,gBAAgB,EAAEmjB,OAAO,CAAC;UACnD,CAAC,MACI,IAAIF,OAAO,CAACxe,QAAQ,KAAK,CAAC,CAAC,gBAAgB;YAC5C,IAAIwS,MAAM,KAAK,CAAC,EAAE;cACd,MAAMtG,WAAW,GAAGsS,OAAO,CAAC7K,SAAS,CAAClH,IAAI,EAAE;cAC5C,IAAIP,WAAW,KAAK,EAAE,EAAE;gBACpB;gBACA2B,eAAe,CAAC1G,MAAM,EAAE;gBACxB;cACJ;YACJ;YACA,MAAMwX,qBAAqB,GAAGxoB,GAAG,CAACiY,aAAa,CAACsQ,OAAO,CAAC;YACxDC,qBAAqB,CAAChL,SAAS,GAAI,GAAEvY,YAAa,IAAGsjB,OAAQ,EAAC;YAC9DF,OAAO,CAAChU,UAAU,CAACxJ,YAAY,CAAC2d,qBAAqB,EAAEH,OAAO,CAAC;UACnE;QACJ;QACA,IAAII,iBAAiB,GAAI,GAAE1jB,eAAgB,IAAGwjB,OAAQ,EAAC;QACvD,MAAMG,qBAAqB,GAAGhR,eAAe,CAAC/S,aAAa;QAC3D,IAAI+jB,qBAAqB,EAAE;UACvB,IAAIA,qBAAqB,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE;YACtC;YACA;YACA;YACAD,iBAAiB,IAAK,GAAE;UAC5B,CAAC,MACI,IAAIC,qBAAqB,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE;YAC5C;YACA;YACA;YACAD,iBAAiB,IAAK,IAAG;UAC7B;QACJ;QACA/Q,eAAe,CAAC8F,SAAS,GAAGiL,iBAAiB;MACjD;IACJ,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAML,qBAAqB,GAAG,CAACpoB,GAAG,EAAEiP,IAAI,EAAE+Y,OAAO,EAAEG,gBAAgB,KAAK;EACpE,IAAIlZ,IAAI,IAAI,IAAI,EAAE;IACd;EACJ;EACA,IAAIA,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE;IACtBkZ,gBAAgB,CAACpkB,IAAI,CAACkL,IAAI,CAAC;EAC/B;EACA,IAAIA,IAAI,CAACpF,QAAQ,KAAK,CAAC,CAAC,mBAAmB;IACvCoF,IAAI,CAAC0E,UAAU,CAACzE,OAAO,CAAE6D,SAAS,IAAK;MACnC,MAAMjQ,OAAO,GAAGuD,UAAU,CAAC0M,SAAS,CAAC;MACrC,IAAIjQ,OAAO,IAAI,IAAI,IAAI,CAACklB,OAAO,CAACD,gBAAgB,CAAC9d,GAAG,CAAC8I,SAAS,CAACvG,QAAQ,CAACoE,WAAW,EAAE,CAAC,EAAE;QACpF,MAAM+X,OAAO,GAAG;UACZC,OAAO,EAAE;QACb,CAAC;QACDC,sBAAsB,CAAC7oB,GAAG,EAAE+S,SAAS,EAAEjQ,OAAO,CAAC4E,OAAO,EAAEsgB,OAAO,EAAEW,OAAO,CAAC;MAC7E;MACAP,qBAAqB,CAACpoB,GAAG,EAAE+S,SAAS,EAAEiV,OAAO,EAAEG,gBAAgB,CAAC;IACpE,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAMU,sBAAsB,GAAG,CAAC7oB,GAAG,EAAE0J,OAAO,EAAEjC,KAAK,EAAEugB,OAAO,EAAEW,OAAO,KAAK;EACtE,IAAIlhB,KAAK,IAAI,IAAI,EAAE;IACf,MAAM4U,MAAM,GAAG,EAAE2L,OAAO,CAACC,OAAO;IAChCve,OAAO,CAACkB,YAAY,CAAC1F,UAAU,EAAEmX,MAAM,CAAC;IACxC,IAAI3S,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE;MACzBA,OAAO,CAAC,MAAM,CAAC,CAAC8T,SAAS,GAAI,GAAE1Y,cAAe,IAAGuX,MAAO,EAAC;IAC7D;IACA,IAAI5U,KAAK,CAAC+G,UAAU,IAAI,IAAI,EAAE;MAC1B,MAAMsa,KAAK,GAAG,CAAC;MACfrhB,KAAK,CAAC+G,UAAU,CAACU,OAAO,CAAC,CAAC6Z,UAAU,EAAEC,KAAK,KAAK;QAC5CC,2BAA2B,CAACjpB,GAAG,EAAE+oB,UAAU,EAAEJ,OAAO,EAAEtM,MAAM,EAAEyM,KAAK,EAAEE,KAAK,CAAC;MAC/E,CAAC,CAAC;IACN;IACA,IAAItf,OAAO,IAAIjC,KAAK,IAAIA,KAAK,CAACqH,KAAK,IAAI,CAACpF,OAAO,CAAC0X,YAAY,CAAC,MAAM,CAAC,EAAE;MAClE,MAAM8H,MAAM,GAAGxf,OAAO,CAAC/E,aAAa;MACpC,IAAIukB,MAAM,IAAIA,MAAM,CAACvV,UAAU,EAAE;QAC7B,MAAMwV,gBAAgB,GAAGlc,KAAK,CAAC8X,IAAI,CAACmE,MAAM,CAACvV,UAAU,CAAC;QACtD,MAAMyV,OAAO,GAAGD,gBAAgB,CAACrd,IAAI,CAAEmD,IAAI,IAAKA,IAAI,CAACpF,QAAQ,KAAK,CAAC,CAAC,qBAAqBoF,IAAI,CAAC,MAAM,CAAC,CAAC;QACtG,IAAIma,OAAO,EAAE;UACT,MAAMJ,KAAK,GAAGG,gBAAgB,CAACrnB,OAAO,CAAC4H,OAAO,CAAC,GAAG,CAAC;UACnDjC,KAAK,CAACqH,KAAK,CAAClE,YAAY,CAACxF,gBAAgB,EAAG,GAAEgkB,OAAO,CAAC,WAAW,CAAE,IAAGA,OAAO,CAAC,WAAW,CAAE,MAAKJ,KAAM,EAAC,CAAC;QAC5G;MACJ;IACJ;EACJ;AACJ,CAAC;AACD,MAAMC,2BAA2B,GAAG,CAACjpB,GAAG,EAAE+oB,UAAU,EAAEJ,OAAO,EAAEtM,MAAM,EAAEyM,KAAK,EAAEE,KAAK,KAAK;EACpF,MAAM9M,QAAQ,GAAG6M,UAAU,CAACja,KAAK;EACjC,IAAIoN,QAAQ,IAAI,IAAI,EAAE;IAClB;EACJ;EACA,MAAMoM,MAAM,GAAGK,OAAO,CAACC,OAAO,EAAE;EAChC,MAAML,OAAO,GAAI,GAAElM,MAAO,IAAGiM,MAAO,IAAGQ,KAAM,IAAGE,KAAM,EAAC;EACvD9M,QAAQ,CAAC,WAAW,CAAC,GAAGG,MAAM;EAC9BH,QAAQ,CAAC,WAAW,CAAC,GAAGoM,MAAM;EAC9B,IAAIpM,QAAQ,CAACrS,QAAQ,KAAK,CAAC,CAAC,mBAAmB;IAC3CqS,QAAQ,CAACtR,YAAY,CAACxF,gBAAgB,EAAEmjB,OAAO,CAAC;EACpD,CAAC,MACI,IAAIrM,QAAQ,CAACrS,QAAQ,KAAK,CAAC,CAAC,gBAAgB;IAC7C,MAAMwK,UAAU,GAAG6H,QAAQ,CAAC7H,UAAU;IACtC,MAAM7H,QAAQ,GAAG6H,UAAU,CAAC7H,QAAQ;IACpC,IAAIA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,QAAQ,EAAE;MAC/C,MAAM6c,UAAU,GAAI,GAAEpkB,YAAa,IAAGsjB,OAAQ,EAAC;MAC/C,MAAMC,qBAAqB,GAAGxoB,GAAG,CAACiY,aAAa,CAACoR,UAAU,CAAC;MAC3DhV,UAAU,CAACxJ,YAAY,CAAC2d,qBAAqB,EAAEtM,QAAQ,CAAC;IAC5D;EACJ,CAAC,MACI,IAAIA,QAAQ,CAACrS,QAAQ,KAAK,CAAC,CAAC,mBAAmB;IAChD,IAAIqS,QAAQ,CAAC,MAAM,CAAC,EAAE;MAClB,MAAMvP,QAAQ,GAAGuP,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE;MACvC,MAAMoN,UAAU,GAAI,GAAEtkB,YAAa,IAAGujB,OAAQ,IAAG5b,QAAS,EAAC;MAC3DuP,QAAQ,CAACsB,SAAS,GAAG8L,UAAU;IACnC;EACJ;EACA,IAAIP,UAAU,CAACva,UAAU,IAAI,IAAI,EAAE;IAC/B,MAAM+a,UAAU,GAAGT,KAAK,GAAG,CAAC;IAC5BC,UAAU,CAACva,UAAU,CAACU,OAAO,CAAC,CAACzH,KAAK,EAAEuhB,KAAK,KAAK;MAC5CC,2BAA2B,CAACjpB,GAAG,EAAEyH,KAAK,EAAEkhB,OAAO,EAAEtM,MAAM,EAAEkN,UAAU,EAAEP,KAAK,CAAC;IAC/E,CAAC,CAAC;EACN;AACJ,CAAC;AACD,MAAMQ,kBAAkB,GAAIxoB,IAAI,IAAKQ,MAAM,CAACC,MAAM,CAACpB,GAAG,EAAEW,IAAI,CAAC;AAC7D,MAAMyoB,QAAQ,GAAG,CAACtJ,CAAC,EAAE3S,QAAQ,KAAKA,QAAQ;AAC1C,MAAMkc,QAAQ,GAAG,IAAI3gB,OAAO,EAAE;AAC9B,MAAM1C,UAAU,GAAID,GAAG,IAAKsjB,QAAQ,CAACznB,GAAG,CAACmE,GAAG,CAAC;AAC7C,MAAMujB,gBAAgB,GAAG,CAACniB,YAAY,EAAE1E,OAAO,KAAK4mB,QAAQ,CAACrgB,GAAG,CAAEvG,OAAO,CAACqB,cAAc,GAAGqD,YAAY,EAAG1E,OAAO,CAAC;AAClH,MAAMqf,YAAY,GAAG,CAACtf,GAAG,EAAE2G,OAAO,KAAK;EACnC,MAAM1G,OAAO,GAAG;IACZxC,OAAO,EAAE,CAAC;IACV+D,aAAa,EAAExB,GAAG;IAClBoI,SAAS,EAAEzB,OAAO;IAClBnC,gBAAgB,EAAE,IAAIuV,GAAG;EAC7B,CAAC;EACD,IAAIld,KAAK,CAAC0N,KAAK,EAAE;IACbtK,OAAO,CAAC2D,aAAa,GAAG,CAAC;EAC7B;EACA,IAAI/G,KAAK,CAAC6D,MAAM,IAAI7D,KAAK,CAACwE,QAAQ,EAAE;IAChCpB,OAAO,CAACoF,mBAAmB,GAAG,IAAI7F,OAAO,CAAEuU,CAAC,IAAM9T,OAAO,CAACsF,mBAAmB,GAAGwO,CAAE,CAAC;EACvF;EACA,IAAIlX,KAAK,CAACoZ,YAAY,EAAE;IACpBhW,OAAO,CAACgF,gBAAgB,GAAG,IAAIzF,OAAO,CAAEuU,CAAC,IAAM9T,OAAO,CAACkF,gBAAgB,GAAG4O,CAAE,CAAC;IAC7E/T,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE;IACfA,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE;EACpB;EACAD,qBAAqB,CAACC,GAAG,EAAEC,OAAO,EAAE0G,OAAO,CAAC0X,WAAW,EAAE,KAAK,CAAC;EAC/D,OAAOwI,QAAQ,CAACrgB,GAAG,CAACxG,GAAG,EAAEC,OAAO,CAAC;AACrC,CAAC;AACD,MAAM4N,iBAAiB,GAAG,CAAC7N,GAAG,EAAEwN,UAAU,KAAKA,UAAU,IAAIxN,GAAG;AAChE,MAAMyB,YAAY,GAAG,CAACpC,CAAC,EAAErB,EAAE,KAAK,CAAC5B,WAAW,IAAI2qB,OAAO,CAACC,KAAK,EAAE3nB,CAAC,EAAErB,EAAE,CAAC;AACrE,MAAMipB,gBAAgB,GAAGpqB,KAAK,CAACqqB,SAAS,GAClC,CAAC,UAAU,CAAC,CAAC;AAAA,EACb,CACE,WAAW,EACX,wGAAwG,CAC3G;AACL,MAAM1c,eAAe,GAAG;EAAA,mCAAItB,CAAC;IAADA,CAAC;EAAA;EAAA,OAAK6d,OAAO,CAACC,KAAK,CAAC,GAAGC,gBAAgB,EAAE,GAAG/d,CAAC,CAAC;AAAA;AAC1E,MAAMoE,cAAc,GAAG;EAAA,mCAAIpE,CAAC;IAADA,CAAC;EAAA;EAAA,OAAK6d,OAAO,CAACI,IAAI,CAAC,GAAGF,gBAAgB,EAAE,GAAG/d,CAAC,CAAC;AAAA;AACxE,MAAMke,cAAc,GAAG;EAAA,mCAAIle,CAAC;IAADA,CAAC;EAAA;EAAA,OAAK6d,OAAO,CAACM,IAAI,CAAC,GAAGJ,gBAAgB,EAAE,GAAG/d,CAAC,CAAC;AAAA;AACxE,MAAMoe,eAAe,GAAIxmB,OAAO,IAAM1E,WAAW,GAAG0E,OAAQ;AAC5D,MAAMymB,UAAU,GAAG,aAAc,IAAIxN,GAAG,EAAE;AAC1C,MAAM0D,UAAU,GAAG,CAAC9W,OAAO,EAAE1G,OAAO,EAAEud,YAAY,KAAK;EACnD;EACA,MAAMgK,UAAU,GAAG7gB,OAAO,CAAC2B,SAAS,CAACzI,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EACvD,MAAM4nB,QAAQ,GAAG9gB,OAAO,CAACkd,cAAc;EACvC,IAAIhnB,KAAK,CAAC0N,KAAK,IAAI,OAAOkd,QAAQ,KAAK,QAAQ,EAAE;IAC7Cjd,eAAe,CAAE,oCAAmC7D,OAAO,CAAC2B,SAAU,sBAAqBrI,OAAO,CAAC8E,UAAW,2BAA0B,CAAC;IACzI,OAAOtB,SAAS;EACpB;EACA,MAAMikB,MAAM,GAAG,CAAC7qB,KAAK,CAACiL,oBAAoB,GAAGyf,UAAU,CAACnoB,GAAG,CAACqoB,QAAQ,CAAC,GAAG,KAAK;EAC7E,IAAIC,MAAM,EAAE;IACR,OAAOA,MAAM,CAACF,UAAU,CAAC;EAC7B;EACA;EACA,OAAO,MAAM,EACb;EACA;EACA;EACA;EACC,KAAIC,QAAS,YAAW5qB,KAAK,CAACiL,oBAAoB,IAAI0V,YAAY,GAAG,SAAS,GAAGA,YAAY,GAAG,EAAG,EAAC,CAAC,CAACvG,IAAI,CAAE0Q,cAAc,IAAK;IAC5H,IAAI,CAAC9qB,KAAK,CAACiL,oBAAoB,EAAE;MAC7Byf,UAAU,CAAC/gB,GAAG,CAACihB,QAAQ,EAAEE,cAAc,CAAC;IAC5C;IACA,OAAOA,cAAc,CAACH,UAAU,CAAC;EACrC,CAAC,EAAE/lB,YAAY,CAAC;AACpB,CAAC;AACD,MAAM8E,MAAM,GAAG,IAAIwT,GAAG,EAAE;AACxB,MAAM/Q,mBAAmB,GAAG,EAAE;AAC9B,MAAM4e,aAAa,GAAG,EAAE;AACxB,MAAMC,cAAc,GAAG,EAAE;AACzB,MAAMC,iBAAiB,GAAG,EAAE;AAC5B,MAAMC,SAAS,GAAG,CAACC,KAAK,EAAEnD,KAAK,KAAMvY,EAAE,IAAK;EACxC0b,KAAK,CAAC9mB,IAAI,CAACoL,EAAE,CAAC;EACd,IAAI,CAAC1P,YAAY,EAAE;IACfA,YAAY,GAAG,IAAI;IACnB,IAAIioB,KAAK,IAAIrnB,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,iBAAiB;MAC1C+a,QAAQ,CAACyP,KAAK,CAAC;IACnB,CAAC,MACI;MACDzqB,GAAG,CAACK,GAAG,CAACoqB,KAAK,CAAC;IAClB;EACJ;AACJ,CAAC;AACD,MAAMC,OAAO,GAAIF,KAAK,IAAK;EACvB,KAAK,IAAI3rB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2rB,KAAK,CAAC3kB,MAAM,EAAEhH,CAAC,EAAE,EAAE;IACnC,IAAI;MACA2rB,KAAK,CAAC3rB,CAAC,CAAC,CAACyG,WAAW,CAACqlB,GAAG,EAAE,CAAC;IAC/B,CAAC,CACD,OAAO9oB,CAAC,EAAE;MACNoC,YAAY,CAACpC,CAAC,CAAC;IACnB;EACJ;EACA2oB,KAAK,CAAC3kB,MAAM,GAAG,CAAC;AACpB,CAAC;AACD,MAAM+kB,cAAc,GAAG,CAACJ,KAAK,EAAEK,OAAO,KAAK;EACvC,IAAIhsB,CAAC,GAAG,CAAC;EACT,IAAIisB,EAAE,GAAG,CAAC;EACV,OAAOjsB,CAAC,GAAG2rB,KAAK,CAAC3kB,MAAM,IAAI,CAACilB,EAAE,GAAGxlB,WAAW,CAACqlB,GAAG,EAAE,IAAIE,OAAO,EAAE;IAC3D,IAAI;MACAL,KAAK,CAAC3rB,CAAC,EAAE,CAAC,CAACisB,EAAE,CAAC;IAClB,CAAC,CACD,OAAOjpB,CAAC,EAAE;MACNoC,YAAY,CAACpC,CAAC,CAAC;IACnB;EACJ;EACA,IAAIhD,CAAC,KAAK2rB,KAAK,CAAC3kB,MAAM,EAAE;IACpB2kB,KAAK,CAAC3kB,MAAM,GAAG,CAAC;EACpB,CAAC,MACI,IAAIhH,CAAC,KAAK,CAAC,EAAE;IACd2rB,KAAK,CAACO,MAAM,CAAC,CAAC,EAAElsB,CAAC,CAAC;EACtB;AACJ,CAAC;AACD,MAAM4rB,KAAK,GAAG,MAAM;EAChB,IAAIprB,KAAK,CAAC+b,UAAU,EAAE;IAClBjc,eAAe,EAAE;EACrB;EACA;EACA;EACA;EACAurB,OAAO,CAACN,aAAa,CAAC;EACtB;EACA,IAAI/qB,KAAK,CAAC+b,UAAU,EAAE;IAClB,MAAMyP,OAAO,GAAG,CAAC7qB,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,qBAAqB,CAAC,CAAC,kBAClDqF,WAAW,CAACqlB,GAAG,EAAE,GAAG,EAAE,GAAGK,IAAI,CAACC,IAAI,CAAC9rB,eAAe,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,GAClE+rB,QAAQ;IACdN,cAAc,CAACP,cAAc,EAAEQ,OAAO,CAAC;IACvCD,cAAc,CAACN,iBAAiB,EAAEO,OAAO,CAAC;IAC1C,IAAIR,cAAc,CAACxkB,MAAM,GAAG,CAAC,EAAE;MAC3BykB,iBAAiB,CAAC5mB,IAAI,CAAC,GAAG2mB,cAAc,CAAC;MACzCA,cAAc,CAACxkB,MAAM,GAAG,CAAC;IAC7B;IACA,IAAKzG,YAAY,GAAGgrB,aAAa,CAACvkB,MAAM,GAAGwkB,cAAc,CAACxkB,MAAM,GAAGykB,iBAAiB,CAACzkB,MAAM,GAAG,CAAC,EAAG;MAC9F;MACA;MACA7F,GAAG,CAACK,GAAG,CAACoqB,KAAK,CAAC;IAClB,CAAC,MACI;MACDtrB,eAAe,GAAG,CAAC;IACvB;EACJ,CAAC,MACI;IACDurB,OAAO,CAACL,cAAc,CAAC;IACvB,IAAKjrB,YAAY,GAAGgrB,aAAa,CAACvkB,MAAM,GAAG,CAAC,EAAG;MAC3C;MACA;MACA7F,GAAG,CAACK,GAAG,CAACoqB,KAAK,CAAC;IAClB;EACJ;AACJ,CAAC;AACD,MAAMzP,QAAQ,GAAG,aAAelM,EAAE,IAAKhN,cAAc,EAAE,CAAC2X,IAAI,CAAC3K,EAAE,CAAC;AAChE,MAAMyY,QAAQ,GAAG,aAAcgD,SAAS,CAACH,aAAa,EAAE,KAAK,CAAC;AAC9D,MAAMrR,SAAS,GAAG,aAAcwR,SAAS,CAACF,cAAc,EAAE,IAAI,CAAC;AAC/D,MAAMc,KAAK,GAAG;EACVpe,KAAK,EAAE1N,KAAK,CAAC0N,KAAK,GAAG,IAAI,GAAG,KAAK;EACjCqe,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,KAAK;EACf3B,SAAS,EAAErqB,KAAK,CAACqqB,SAAS,GAAG,IAAI,GAAG;AACxC,CAAC;AACD,SAASrqB,KAAK,EAAEisB,GAAG,EAAEhsB,SAAS,QAAQ,iCAAiC;AACvE,SAAS6rB,KAAK,EAAE1rB,GAAG,EAAE6C,OAAO,EAAE8mB,QAAQ,EAAEtpB,CAAC,EAAEA,CAAC,IAAIC,WAAW,EAAE4O,IAAI,EAAE8a,gBAAgB,EAAElnB,qBAAqB,EAAEoiB,aAAa,EAAEoF,UAAU,EAAEjO,iBAAiB,EAAE9O,eAAe,EAAE4c,cAAc,EAAE9Z,cAAc,EAAE7L,YAAY,EAAE8T,WAAW,EAAEwJ,mBAAmB,EAAEJ,oBAAoB,EAAExhB,GAAG,EAAEyiB,eAAe,EAAEnH,WAAW,EAAEuL,YAAY,EAAEO,UAAU,EAAEG,UAAU,EAAEpP,UAAU,EAAE9R,UAAU,EAAE4F,OAAO,EAAE6O,eAAe,EAAEmD,QAAQ,EAAExd,CAAC,EAAEqnB,qBAAqB,EAAEpX,iBAAiB,EAAE4P,UAAU,EAAEzU,mBAAmB,EAAEwP,QAAQ,EAAEqC,kBAAkB,EAAErd,GAAG,EAAEma,mBAAmB,EAAErY,cAAc,EAAE6c,cAAc,EAAE+C,kBAAkB,EAAE6F,QAAQ,EAAEzF,YAAY,EAAEwH,gBAAgB,EAAEzS,UAAU,EAAEiQ,YAAY,EAAEgD,eAAe,EAAEne,OAAO,EAAE1K,kBAAkB,EAAEkoB,kBAAkB,EAAEtL,QAAQ,EAAE9U,MAAM,EAAE7G,gCAAgC,EAAER,uBAAuB,EAAEL,cAAc,EAAE9B,GAAG,EAAEwZ,SAAS"},"metadata":{},"sourceType":"module"}