{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nimport axios from \"axios\";\nimport FormData$1 from \"form-data\";\nimport { createMachine, assign, spawn, send, actions } from \"xstate\";\nclass HasuraStorageApi {\n  constructor(_ref) {\n    let {\n      url\n    } = _ref;\n    this.url = url;\n    this.httpClient = axios.create({\n      baseURL: this.url\n    });\n  }\n  async upload(params) {\n    const {\n      formData\n    } = params;\n    try {\n      const res = await this.httpClient.post(\"/files\", formData, {\n        headers: __spreadProps(__spreadValues(__spreadValues({}, this.generateUploadHeaders(params)), this.generateAuthHeaders()), {\n          \"Content-Type\": \"multipart/form-data\"\n        })\n      });\n      return {\n        fileMetadata: res.data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        fileMetadata: null,\n        error\n      };\n    }\n  }\n  async getPresignedUrl(params) {\n    try {\n      const {\n        fileId\n      } = params;\n      const res = await this.httpClient.get(`/files/${fileId}/presignedurl`, {\n        headers: __spreadValues({}, this.generateAuthHeaders())\n      });\n      return {\n        presignedUrl: res.data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        presignedUrl: null,\n        error\n      };\n    }\n  }\n  async delete(params) {\n    try {\n      const {\n        fileId\n      } = params;\n      await this.httpClient.delete(`/files/${fileId}`, {\n        headers: __spreadValues({}, this.generateAuthHeaders())\n      });\n      return {\n        error: null\n      };\n    } catch (error) {\n      return {\n        error\n      };\n    }\n  }\n  setAccessToken(accessToken) {\n    this.accessToken = accessToken;\n    return this;\n  }\n  setAdminSecret(adminSecret) {\n    this.adminSecret = adminSecret;\n    return this;\n  }\n  generateUploadHeaders(params) {\n    const {\n      bucketId,\n      name,\n      id\n    } = params;\n    const uploadheaders = {};\n    if (bucketId) {\n      uploadheaders[\"x-nhost-bucket-id\"] = bucketId;\n    }\n    if (id) {\n      uploadheaders[\"x-nhost-file-id\"] = id;\n    }\n    if (name) {\n      uploadheaders[\"x-nhost-file-name\"] = name;\n    }\n    return uploadheaders;\n  }\n  generateAuthHeaders() {\n    if (!this.adminSecret && !this.accessToken) {\n      return null;\n    }\n    if (this.adminSecret) {\n      return {\n        \"x-hasura-admin-secret\": this.adminSecret\n      };\n    }\n    return {\n      Authorization: `Bearer ${this.accessToken}`\n    };\n  }\n}\nclass HasuraStorageClient {\n  constructor(_ref2) {\n    let {\n      url,\n      adminSecret\n    } = _ref2;\n    this.url = url;\n    this.api = new HasuraStorageApi({\n      url\n    });\n    this.setAdminSecret(adminSecret);\n  }\n  async upload(params) {\n    let formData;\n    if (\"file\" in params) {\n      formData = new FormData$1();\n      formData.append(\"file\", params.file);\n    } else {\n      formData = params.formData;\n    }\n    const {\n      fileMetadata,\n      error\n    } = await this.api.upload(__spreadProps(__spreadValues({}, params), {\n      formData\n    }));\n    if (error) {\n      return {\n        fileMetadata: null,\n        error\n      };\n    }\n    if (!fileMetadata) {\n      return {\n        fileMetadata: null,\n        error: new Error(\"Invalid file returned\")\n      };\n    }\n    return {\n      fileMetadata,\n      error: null\n    };\n  }\n  getUrl(params) {\n    return this.getPublicUrl(params);\n  }\n  getPublicUrl(params) {\n    const {\n      fileId\n    } = params;\n    return `${this.url}/files/${fileId}`;\n  }\n  async getPresignedUrl(params) {\n    const {\n      presignedUrl,\n      error\n    } = await this.api.getPresignedUrl(params);\n    if (error) {\n      return {\n        presignedUrl: null,\n        error\n      };\n    }\n    if (!presignedUrl) {\n      return {\n        presignedUrl: null,\n        error: new Error(\"Invalid file id\")\n      };\n    }\n    return {\n      presignedUrl,\n      error: null\n    };\n  }\n  async delete(params) {\n    const {\n      error\n    } = await this.api.delete(params);\n    if (error) {\n      return {\n        error\n      };\n    }\n    return {\n      error: null\n    };\n  }\n  setAccessToken(accessToken) {\n    this.api.setAccessToken(accessToken);\n    return this;\n  }\n  setAdminSecret(adminSecret) {\n    this.api.setAdminSecret(adminSecret);\n    return this;\n  }\n}\nconst INITIAL_FILE_CONTEXT = {\n  progress: null,\n  loaded: 0,\n  error: null\n};\nconst createFileUploadMachine = () => createMachine({\n  preserveActionOrder: true,\n  schema: {\n    context: {},\n    events: {}\n  },\n  tsTypes: {},\n  context: __spreadValues({}, INITIAL_FILE_CONTEXT),\n  initial: \"idle\",\n  on: {\n    DESTROY: {\n      actions: \"sendDestroy\",\n      target: \"stopped\"\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        ADD: {\n          actions: \"addFile\"\n        },\n        UPLOAD: {\n          cond: \"hasFile\",\n          target: \"uploading\"\n        }\n      }\n    },\n    uploading: {\n      entry: \"resetProgress\",\n      on: {\n        UPLOAD_PROGRESS: {\n          actions: [\"incrementProgress\", \"sendProgress\"]\n        },\n        UPLOAD_DONE: \"uploaded\",\n        UPLOAD_ERROR: \"error\",\n        CANCEL: \"idle\"\n      },\n      invoke: {\n        src: \"uploadFile\"\n      }\n    },\n    uploaded: {\n      entry: [\"setFileMetadata\", \"sendDone\"]\n    },\n    error: {\n      entry: [\"setError\", \"sendError\"]\n    },\n    stopped: {\n      type: \"final\"\n    }\n  }\n}, {\n  guards: {\n    hasFile: (context, event) => !!context.file || !!event.file\n  },\n  actions: {\n    incrementProgress: assign({\n      loaded: (_, _ref3) => {\n        let {\n          loaded\n        } = _ref3;\n        return loaded;\n      },\n      progress: (_, _ref4) => {\n        let {\n          progress\n        } = _ref4;\n        return progress;\n      }\n    }),\n    setFileMetadata: assign({\n      id: (_, _ref5) => {\n        let {\n          id\n        } = _ref5;\n        return id;\n      },\n      bucketId: (_, _ref6) => {\n        let {\n          bucketId\n        } = _ref6;\n        return bucketId;\n      },\n      progress: _ => 100\n    }),\n    setError: assign({\n      error: (_, _ref7) => {\n        let {\n          error\n        } = _ref7;\n        return error;\n      }\n    }),\n    sendProgress: () => {},\n    sendError: () => {},\n    sendDestroy: () => {},\n    sendDone: () => {},\n    resetProgress: assign({\n      progress: _ => null,\n      loaded: _ => 0\n    }),\n    addFile: assign({\n      file: (_, _ref8) => {\n        let {\n          file\n        } = _ref8;\n        return file;\n      },\n      bucketId: (_, _ref9) => {\n        let {\n          bucketId\n        } = _ref9;\n        return bucketId;\n      },\n      id: (_, _ref10) => {\n        let {\n          id\n        } = _ref10;\n        return id;\n      }\n    })\n  },\n  services: {\n    uploadFile: (context, event) => callback => {\n      const headers = {\n        \"Content-Type\": \"multipart/form-data\"\n      };\n      const fileId = event.id || context.id;\n      if (fileId) {\n        headers[\"x-nhost-file-id\"] = fileId;\n      }\n      const bucketId = event.bucketId || context.bucketId;\n      if (bucketId) {\n        headers[\"x-nhost-bucket-id\"] = bucketId;\n      }\n      const file = event.file || context.file;\n      headers[\"x-nhost-file-name\"] = event.name || file.name;\n      const data = new FormData();\n      data.append(\"file\", file);\n      if (event.adminSecret) {\n        headers[\"x-hasura-admin-secret\"] = event.adminSecret;\n      }\n      if (event.accessToken) {\n        headers[\"Authorization\"] = `Bearer ${event.accessToken}`;\n      }\n      let currentLoaded = 0;\n      const controller = new AbortController();\n      axios.post(event.url + \"/files\", data, {\n        headers,\n        signal: controller.signal,\n        onUploadProgress: event2 => {\n          const loaded = Math.round(event2.loaded * file.size / event2.total);\n          const additions = loaded - currentLoaded;\n          currentLoaded = loaded;\n          callback({\n            type: \"UPLOAD_PROGRESS\",\n            progress: Math.round(loaded * 100 / event2.total),\n            loaded,\n            additions\n          });\n        }\n      }).then(_ref11 => {\n        let {\n          data: {\n            id,\n            bucketId: bucketId2\n          }\n        } = _ref11;\n        callback({\n          type: \"UPLOAD_DONE\",\n          id,\n          bucketId: bucketId2\n        });\n      }).catch(_ref12 => {\n        let {\n          response,\n          message\n        } = _ref12;\n        var _a, _b, _c, _d, _e;\n        callback({\n          type: \"UPLOAD_ERROR\",\n          error: {\n            status: (_a = response == null ? void 0 : response.status) != null ? _a : 0,\n            message: ((_c = (_b = response == null ? void 0 : response.data) == null ? void 0 : _b.error) == null ? void 0 : _c.message) || message,\n            error: ((_e = (_d = response == null ? void 0 : response.data) == null ? void 0 : _d.error) == null ? void 0 : _e.message) || message\n          }\n        });\n      });\n      return () => {\n        controller.abort();\n      };\n    }\n  }\n});\nconst {\n  pure,\n  sendParent\n} = actions;\nconst createMultipleFilesUploadMachine = () => {\n  return createMachine({\n    id: \"files-list\",\n    schema: {\n      context: {},\n      events: {}\n    },\n    tsTypes: {},\n    context: {\n      progress: null,\n      files: [],\n      loaded: 0,\n      total: 0\n    },\n    initial: \"idle\",\n    on: {\n      UPLOAD: {\n        cond: \"hasFileToDownload\",\n        actions: \"addItem\",\n        target: \"uploading\"\n      },\n      ADD: {\n        actions: \"addItem\"\n      },\n      REMOVE: {\n        actions: \"removeItem\"\n      }\n    },\n    states: {\n      idle: {\n        entry: [\"resetProgress\", \"resetLoaded\", \"resetTotal\"],\n        on: {\n          CLEAR: {\n            actions: \"clearList\",\n            target: \"idle\"\n          }\n        }\n      },\n      uploading: {\n        entry: [\"upload\", \"startProgress\", \"resetLoaded\", \"resetTotal\"],\n        on: {\n          UPLOAD_PROGRESS: {\n            actions: [\"incrementProgress\"]\n          },\n          UPLOAD_DONE: [{\n            cond: \"isAllUploaded\",\n            target: \"uploaded\"\n          }, {\n            cond: \"isAllUploadedOrError\",\n            target: \"error\"\n          }],\n          UPLOAD_ERROR: [{\n            cond: \"isAllUploaded\",\n            target: \"uploaded\"\n          }, {\n            cond: \"isAllUploadedOrError\",\n            target: \"error\"\n          }],\n          CANCEL: {\n            actions: \"cancel\",\n            target: \"idle\"\n          }\n        }\n      },\n      uploaded: {\n        entry: \"setUploaded\",\n        on: {\n          CLEAR: {\n            actions: \"clearList\",\n            target: \"idle\"\n          }\n        }\n      },\n      error: {\n        on: {\n          CLEAR: {\n            actions: \"clearList\",\n            target: \"idle\"\n          }\n        }\n      }\n    }\n  }, {\n    guards: {\n      hasFileToDownload: (context, event) => context.files.some(ref => ref.getSnapshot().matches(\"idle\")) || !!event.files,\n      isAllUploaded: context => context.files.every(item => {\n        var _a;\n        return (_a = item.getSnapshot()) == null ? void 0 : _a.matches(\"uploaded\");\n      }),\n      isAllUploadedOrError: context => context.files.every(item => {\n        const snap = item.getSnapshot();\n        return (snap == null ? void 0 : snap.matches(\"error\")) || (snap == null ? void 0 : snap.matches(\"uploaded\"));\n      })\n    },\n    actions: {\n      incrementProgress: assign((context, event) => {\n        const loaded = context.loaded + event.additions;\n        const progress = Math.round(loaded * 100 / context.total);\n        return __spreadProps(__spreadValues({}, context), {\n          loaded,\n          progress\n        });\n      }),\n      setUploaded: assign({\n        progress: _ => 100,\n        loaded: _ref13 => {\n          let {\n            files\n          } = _ref13;\n          return files.map(ref => ref.getSnapshot()).filter(snap => snap.matches(\"uploaded\")).reduce((agg, curr) => {\n            var _a;\n            return agg + ((_a = curr.context.file) == null ? void 0 : _a.size);\n          }, 0);\n        }\n      }),\n      resetTotal: assign({\n        total: _ref14 => {\n          let {\n            files\n          } = _ref14;\n          return files.map(ref => ref.getSnapshot()).filter(snap => !snap.matches(\"uploaded\")).reduce((agg, curr) => {\n            var _a;\n            return agg + ((_a = curr.context.file) == null ? void 0 : _a.size);\n          }, 0);\n        }\n      }),\n      resetLoaded: assign({\n        loaded: _ => 0\n      }),\n      startProgress: assign({\n        progress: _ => 0\n      }),\n      resetProgress: assign({\n        progress: _ => null\n      }),\n      addItem: assign((context, _ref15) => {\n        let {\n          files,\n          bucketId\n        } = _ref15;\n        const additions = files ? Array.isArray(files) ? files : \"length\" in files ? Array.from(files) : [files] : [];\n        const total = context.total + additions.reduce((agg, curr) => agg + curr.size, 0);\n        const progress = Math.round(context.loaded * 100 / total);\n        return {\n          files: [...context.files, ...additions.map(file => spawn(createFileUploadMachine().withConfig({\n            actions: {\n              sendProgress: sendParent((_, _ref16) => {\n                let {\n                  additions: additions2\n                } = _ref16;\n                return {\n                  type: \"UPLOAD_PROGRESS\",\n                  additions: additions2\n                };\n              }),\n              sendDone: sendParent(\"UPLOAD_DONE\"),\n              sendError: sendParent(\"UPLOAD_ERROR\"),\n              sendDestroy: sendParent(\"REMOVE\")\n            }\n          }).withContext(__spreadProps(__spreadValues({}, INITIAL_FILE_CONTEXT), {\n            file,\n            bucketId\n          })), {\n            sync: true\n          }))],\n          total,\n          loaded: context.loaded,\n          progress\n        };\n      }),\n      removeItem: assign({\n        files: context => context.files.filter(ref => {\n          var _a, _b;\n          const stopped = (_a = ref.getSnapshot()) == null ? void 0 : _a.matches(\"stopped\");\n          if (stopped) {\n            (_b = ref.stop) == null ? void 0 : _b.call(ref);\n          }\n          return !stopped;\n        })\n      }),\n      clearList: pure(context => context.files.map(ref => send({\n        type: \"DESTROY\"\n      }, {\n        to: ref.id\n      }))),\n      upload: pure((context, event) => context.files.map(ref => send(event, {\n        to: ref.id\n      }))),\n      cancel: pure(context => context.files.map(ref => send({\n        type: \"CANCEL\"\n      }, {\n        to: ref.id\n      })))\n    }\n  });\n};\nconst uploadFilePromise = async (nhost, interpreter, params) => new Promise(resolve => {\n  interpreter.send(__spreadValues({\n    type: \"UPLOAD\",\n    url: nhost.storage.url,\n    accessToken: nhost.auth.getAccessToken(),\n    adminSecret: nhost.adminSecret\n  }, params));\n  interpreter.subscribe(s => {\n    var _a;\n    if (s.matches(\"error\")) {\n      resolve({\n        error: s.context.error,\n        isError: true,\n        isUploaded: false\n      });\n    } else if (s.matches(\"uploaded\")) {\n      resolve({\n        error: null,\n        isError: false,\n        isUploaded: true,\n        id: s.context.id,\n        bucketId: s.context.id,\n        name: (_a = s.context.file) == null ? void 0 : _a.name\n      });\n    }\n  });\n});\nconst uploadMultipleFilesPromise = async (nhost, service, params) => new Promise(resolve => {\n  service.send({\n    type: \"UPLOAD\",\n    url: nhost.storage.url,\n    accessToken: nhost.auth.getAccessToken(),\n    adminSecret: nhost.adminSecret,\n    bucketId: params == null ? void 0 : params.bucketId,\n    files: params == null ? void 0 : params.files\n  });\n  service.onTransition(s => {\n    if (s.matches(\"error\")) {\n      resolve({\n        errors: s.context.files.filter(ref => {\n          var _a;\n          return (_a = ref.getSnapshot()) == null ? void 0 : _a.context.error;\n        }),\n        isError: true,\n        files: []\n      });\n    } else if (s.matches(\"uploaded\")) {\n      resolve({\n        errors: [],\n        isError: false,\n        files: s.context.files\n      });\n    }\n  });\n});\nexport { HasuraStorageApi, HasuraStorageClient, INITIAL_FILE_CONTEXT, createFileUploadMachine, createMultipleFilesUploadMachine, uploadFilePromise, uploadMultipleFilesPromise };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAiBO,MAAMA,iBAAiB;EAM5BC,kBAAsC;IAAA,IAA1B;MAAEC;IAAA;IACZ,KAAKA,MAAMA;IAEN,kBAAaC,MAAMC,OAAO;MAC7BC,SAAS,KAAKH;IAAA,CACf;EACH;EAAA,MAEMI,OAAOC,QAAqD;IAChE,MAAM;MAAEC;IAAA,IAAaD;IAEjB;MACF,MAAME,MAAM,MAAM,KAAKC,WAAWC,KAAK,UAAUH,UAAU;QACzDI,SAASC,gDACJ,KAAKC,sBAAsBP,MAAM,IACjC,KAAKQ,qBAAoB,GAFrB;UAGP,gBAAgB;QAClB;MAAA,CACD;MAED,OAAO;QAAEC,cAAcP,IAAIQ;QAAMC,OAAO;MAAK;IAAA,SACtCA;MACA;QAAEF,cAAc;QAAME;MAAA;IAC/B;EACF;EAAA,MAEMC,gBAAgBZ,QAAuE;IACvF;MACF,MAAM;QAAEa;MAAA,IAAWb;MACnB,MAAME,MAAM,MAAM,KAAKC,WAAWW,IAAI,UAAUD,uBAAuB;QACrER,SAASU,mBACJ,KAAKP,qBAAoB;MAC9B,CACD;MACD,OAAO;QAAEQ,cAAcd,IAAIQ;QAAMC,OAAO;MAAK;IAAA,SACtCA;MACA;QAAEK,cAAc;QAAML;MAAA;IAC/B;EACF;EAAA,MAEMM,OAAOjB,QAAqD;IAC5D;MACF,MAAM;QAAEa;MAAA,IAAWb;MACnB,MAAM,KAAKG,WAAWc,OAAO,UAAUJ,UAAU;QAC/CR,SAASU,mBACJ,KAAKP,qBAAoB;MAC9B,CACD;MACM;QAAEG,OAAO;MAAA;aACTA;MACP,OAAO;QAAEA;MAAsB;IACjC;EACF;EAQAO,eAAeC,aAAwC;IACrD,KAAKA,cAAcA;IAEZ;EACT;EAQAC,eAAeC,aAAwC;IACrD,KAAKA,cAAcA;IAEZ;EACT;EAEQd,sBAAsBP,QAAwC;IAC9D;MAAEsB;MAAUC;MAAMC;IAAA,IAAOxB;IAC/B,MAAMyB,gBAA+B;IAErC,IAAIH,UAAU;MACZG,cAAc,uBAAuBH;IACvC;IACA,IAAIE,IAAI;MACNC,cAAc,qBAAqBD;IACrC;IACA,IAAID,MAAM;MACRE,cAAc,uBAAuBF;IACvC;IAEO;EACT;EAEQf,sBAGC;IACP,IAAI,CAAC,KAAKa,eAAe,CAAC,KAAKF,aAAa;MACnC;IACT;IAEA,IAAI,KAAKE,aAAa;MACb;QACL,yBAAyB,KAAKA;MAAA;IAElC;IAEO;MACLK,eAAe,UAAU,KAAKP;IAAA;EAElC;AACF;AC5GO,MAAMQ,oBAAoB;EAI/BjC,mBAAiE;IAAA,IAArD;MAAEC;MAAK0B;IAAA;IACjB,KAAK1B,MAAMA;IACX,KAAKiC,MAAM,IAAInC,iBAAiB;MAAEE;IAAK;IACvC,KAAKyB,eAAeC,WAAW;EACjC;EAAA,MAyCMtB,OAAOC,QAA6D;IACpE;IAEJ,IAAI,UAAUA,QAAQ;MACpBC,WAAW,IAAI4B;MACN5B,gBAAO,QAAQD,OAAO8B,IAAI;IAAA,OAC9B;MACL7B,WAAWD,OAAOC;IACpB;IAEA,MAAM;MAAEQ;MAAcE;IAAA,IAAU,MAAM,KAAKiB,IAAI7B,OAAOO,iCACjDN,SADiD;MAEpDC;IAAA,EACD;IACD,IAAIU,OAAO;MACF;QAAEF,cAAc;QAAME;MAAA;IAC/B;IAEA,IAAI,CAACF,cAAc;MACjB,OAAO;QAAEA,cAAc;QAAME,OAAO,IAAIoB,MAAM,uBAAuB;MAAA;IACvE;IAEO;MAAEtB;MAAcE,OAAO;IAAA;EAChC;EAKAqB,OAAOhC,QAAqC;IACnC,YAAKiC,aAAajC,MAAM;EACjC;EAYAiC,aAAajC,QAAqC;IAChD,MAAM;MAAEa;IAAA,IAAWb;IACZ,UAAG,KAAKL,aAAakB;EAC9B;EAAA,MAmBMD,gBACJZ,QACyC;IACzC,MAAM;MAAEgB;MAAcL;IAAA,IAAU,MAAM,KAAKiB,IAAIhB,gBAAgBZ,MAAM;IACrE,IAAIW,OAAO;MACF;QAAEK,cAAc;QAAML;MAAA;IAC/B;IAEA,IAAI,CAACK,cAAc;MACjB,OAAO;QAAEA,cAAc;QAAML,OAAO,IAAIoB,MAAM,iBAAiB;MAAA;IACjE;IAEO;MAAEf;MAAcL,OAAO;IAAA;EAChC;EAAA,MAYMM,OAAOjB,QAA6D;IACxE,MAAM;MAAEW;IAAA,IAAU,MAAM,KAAKiB,IAAIX,OAAOjB,MAAM;IAC9C,IAAIW,OAAO;MACT,OAAO;QAAEA;MAAM;IACjB;IAEO;MAAEA,OAAO;IAAA;EAClB;EAcAO,eAAeC,aAA2C;IACnD,SAAID,eAAeC,WAAW;IAE5B;EACT;EAcAC,eAAeC,aAA2C;IACnD,SAAID,eAAeC,WAAW;IAE5B;EACT;AACF;AClLO,MAAMa,uBAA0C;EAAEC,UAAU;EAAMC,QAAQ;EAAGzB,OAAO;AAAK;AAGnF,gCAA0B,MACrC0B,cACE;EACEC,qBAAqB;EACrBC,QAAQ;IACNC,SAAS,CAAC;IACVC,QAAQ,CAAC;EACX;EACAC,SAAS,CAAC;EACVF,SAASzB,mBAAKmB;EACdS,SAAS;EACTC,IAAI;IACFC,SAAS;MAAEC,SAAS;MAAeC,QAAQ;IAAU;EACvD;EACAC,QAAQ;IACNC,MAAM;MACJL,IAAI;QACFM,KAAK;UAAEJ,SAAS;QAAU;QAC1BK,QAAQ;UAAEC,MAAM;UAAWL,QAAQ;QAAY;MACjD;IACF;IACAM,WAAW;MACTC,OAAO;MACPV,IAAI;QACFW,iBAAiB;UAAET,SAAS,CAAC,qBAAqB,cAAc;QAAE;QAClEU,aAAa;QACbC,cAAc;QACdC,QAAQ;MACV;MACAC,QAAQ;QAAEC,KAAK;MAAa;IAC9B;IACAC,UAAU;MAAEP,OAAO,CAAC,mBAAmB,UAAU;IAAE;IACnD3C,OAAO;MAAE2C,OAAO,CAAC,YAAY,WAAW;IAAE;IAC1CQ,SAAS;MAAEC,MAAM;IAAQ;EAC3B;AACF,GACA;EACEC,QAAQ;IACNC,SAAS,CAACzB,SAAS0B,UAAU,CAAC,CAAC1B,QAAQV,QAAQ,CAAC,CAACoC,MAAMpC;EACzD;EAEAgB,SAAS;IACPqB,mBAAmBC,OAAO;MACxBhC,QAAQ,CAACiC;QAAA,IAAG;UAAEjC;QAAA;QAAA,OAAaA;MAAA;MAC3BD,UAAU,CAACkC;QAAA,IAAG;UAAElC;QAAA;QAAA,OAAeA;MAAA;IAAA,CAChC;IACDmC,iBAAiBF,OAAO;MACtB5C,IAAI,CAAC6C;QAAA,IAAG;UAAE7C;QAAA;QAAA,OAASA;MAAA;MACnBF,UAAU,CAAC+C;QAAA,IAAG;UAAE/C;QAAA;QAAA,OAAeA;MAAA;MAC/Ba,UAAWkC,KAAM;IAAA,CAClB;IACDE,UAAUH,OAAO;MAAEzD,OAAO,CAAC0D;QAAA,IAAG;UAAE1D;QAAA;QAAA,OAAYA;MAAA;IAAA,CAAO;IACnD6D,cAAc,MAAM,CAAC;IACrBC,WAAW,MAAM,CAAC;IAClBC,aAAa,MAAM,CAAC;IACpBC,UAAU,MAAM,CAAC;IACjBC,eAAeR,OAAO;MAAEjC,UAAWkC,KAAM;MAAMjC,QAASiC,KAAM;IAAA,CAAG;IACjEQ,SAAST,OAAO;MACdtC,MAAM,CAACuC;QAAA,IAAG;UAAEvC;QAAA;QAAA,OAAWA;MAAA;MACvBR,UAAU,CAAC+C;QAAA,IAAG;UAAE/C;QAAA;QAAA,OAAeA;MAAA;MAC/BE,IAAI,CAAC6C;QAAA,IAAG;UAAE7C;QAAA;QAAA,OAASA;MAAA;IAAA,CACpB;EACH;EACAsD,UAAU;IACRC,YAAY,CAACvC,SAAS0B,UAAWc,YAAa;MAC5C,MAAM3E,UAA+B;QACnC,gBAAgB;MAAA;MAEZ,eAAS6D,MAAM1C,MAAMgB,QAAQhB;MACnC,IAAIX,QAAQ;QACVR,QAAQ,qBAAqBQ;MAC/B;MACM,iBAAWqD,MAAM5C,YAAYkB,QAAQlB;MAC3C,IAAIA,UAAU;QACZjB,QAAQ,uBAAuBiB;MACjC;MACM,aAAQ4C,MAAMpC,QAAQU,QAAQV;MAC5BzB,+BAAuB6D,MAAM3C,QAAQO,KAAKP;MAC5C,aAAO,IAAIM;MACZnB,YAAO,QAAQoB,IAAI;MACxB,IAAIoC,MAAM7C,aAAa;QACrBhB,QAAQ,2BAA2B6D,MAAM7C;MAC3C;MACA,IAAI6C,MAAM/C,aAAa;QACbd,2BAAmB,UAAU6D,MAAM/C;MAC7C;MACA,IAAI8D,gBAAgB;MACd,mBAAa,IAAIC;MACvBtF,MACGQ,KAWE8D,MAAMvE,MAAM,UAAUe,MAAM;QAC7BL;QACA8E,QAAQC,WAAWD;QACnBE,kBAAmBC,UAAyB;UACpC,eAASC,KAAKC,MAAOF,OAAMlD,SAASN,KAAK2D,OAASH,OAAMI,KAAK;UACnE,MAAMC,YAAYvD,SAAS6C;UACXA;UACPD;YACPjB,MAAM;YACN5B,UAAUoD,KAAKC,MAAOpD,SAAS,MAAOkD,OAAMI,KAAK;YACjDtD;YACAuD;UAAA,CACD;QACH;MAAA,CACD,EACAC,KAAK,UAAgC;QAAA,IAA/B;UAAElF,MAAM;YAAEc;YAAIF,UAAiBuE;UAAA;QAAA;QACpCb,SAAS;UAAEjB,MAAM;UAAevC;UAAIF;QAAA,CAAU;MAC/C,GACAwE,MAAM,UAAwE;QAAA,IAAvE;UAAEC;UAAUC;QAAA;;QACThB;UACPjB,MAAM;UACNpD,OAAO;YACLsF,QAAQ,2CAAUA,WAAV,YAAoB;YAC5BD,SAAS,kDAAUtF,SAAV,mBAAgBC,UAAhB,mBAAuBqF,YAAWA;YAE3CrF,OAAO,kDAAUD,SAAV,mBAAgBC,UAAhB,mBAAuBqF,YAAWA;UAC3C;QAAA,CACD;MAAA,CACF;MAEH,OAAO,MAAM;QACXZ,WAAWc,OAAM;MAAA;IAErB;EACF;AACF,CACF;ACvKF,MAAM;EAAEC;EAAMC;AAAA,IAAetD;AAgCtB,MAAMuD,mCAAmC,MAAM;EACpD,OAAOhE,cACL;IACEb,IAAI;IACJe,QAAQ;MACNC,SAAS,CAAC;MACVC,QAAQ,CAAC;IACX;IACAC,SAAS,CAAC;IACVF,SAAS;MACPL,UAAU;MACVmE,OAAO,EAAC;MACRlE,QAAQ;MACRsD,OAAO;IACT;IACA/C,SAAS;IACTC,IAAI;MACFO,QAAQ;QAAEC,MAAM;QAAqBN,SAAS;QAAWC,QAAQ;MAAY;MAC7EG,KAAK;QAAEJ,SAAS;MAAU;MAC1ByD,QAAQ;QAAEzD,SAAS;MAAa;IAClC;IACAE,QAAQ;MACNC,MAAM;QACJK,OAAO,CAAC,iBAAiB,eAAe,YAAY;QACpDV,IAAI;UACF4D,OAAO;YAAE1D,SAAS;YAAaC,QAAQ;UAAO;QAChD;MACF;MACAM,WAAW;QACTC,OAAO,CAAC,UAAU,iBAAiB,eAAe,YAAY;QAC9DV,IAAI;UACFW,iBAAiB;YAAET,SAAS,CAAC,mBAAmB;UAAE;UAClDU,aAAa,CACX;YAAEJ,MAAM;YAAiBL,QAAQ;UAAW,GAC5C;YAAEK,MAAM;YAAwBL,QAAQ;UAAQ,EAClD;UACAU,cAAc,CACZ;YAAEL,MAAM;YAAiBL,QAAQ;UAAW,GAC5C;YAAEK,MAAM;YAAwBL,QAAQ;UAAQ,EAClD;UACAW,QAAQ;YAAEZ,SAAS;YAAUC,QAAQ;UAAO;QAC9C;MACF;MACAc,UAAU;QACRP,OAAO;QACPV,IAAI;UACF4D,OAAO;YAAE1D,SAAS;YAAaC,QAAQ;UAAO;QAChD;MACF;MACApC,OAAO;QACLiC,IAAI;UACF4D,OAAO;YAAE1D,SAAS;YAAaC,QAAQ;UAAO;QAChD;MACF;IACF;EAAA,GAEF;IACEiB,QAAQ;MACNyC,mBAAmB,CAACjE,SAAS0B,UAC3B1B,QAAQ8D,MAAMI,KAAMC,OAAQA,IAAIC,cAAeC,QAAQ,MAAM,CAAC,KAAK,CAAC,CAAC3C,MAAMoC;MAC7EQ,eAAgBtE,WACdA,QAAQ8D,MAAMS,MAAOC;;QAAS,kBAAKJ,kBAAL,mBAAoBC,QAAQ;MAAA,CAAW;MACvEI,sBAAuBzE,WACrBA,QAAQ8D,MAAMS,MAAOC,QAAS;QACtB,aAAOA,KAAKJ;QAClB,OAAO,8BAAMC,QAAQ,cAAYK,6BAAML,QAAQ;MAAU,CAC1D;IACL;IAEA/D,SAAS;MACPqB,mBAAmBC,OAAO,CAAC5B,SAAS0B,UAAU;QACtC,eAAiB1B,QAAQJ,SAAS8B,MAAMyB;QAC9C,MAAMxD,WAAWoD,KAAKC,MAAOpD,SAAS,MAAOI,QAAQkD,KAAK;QACnD,wCAAKlD,UAAL;UAAcJ;UAAQD;QAAS;MAAA,CACvC;MACDgF,aAAa/C,OAAO;QAClBjC,UAAWkC,KAAM;QACjBjC,QAAQ;UAAA,IAAC;YAAEkE;UAAA;UAAA,OACTA,MACGc,IAAKT,OAAQA,IAAIC,aAAc,EAC/BS,OAAQH,QAASA,KAAKL,QAAQ,UAAU,CAAC,EACzCS,OAAO,CAACC,KAAKC;;YAAS,cAAM,WAAKhF,QAAQV,SAAb,mBAAmB2D;UAAA,GAAO,CAAC;QAAA;MAAA,CAC7D;MACDgC,YAAYrD,OAAO;QACjBsB,OAAO;UAAA,IAAC;YAAEY;UAAA;UAAA,OACRA,MACGc,IAAKT,OAAQA,IAAIC,aAAc,EAC/BS,OAAQH,QAAS,CAACA,KAAKL,QAAQ,UAAU,CAAC,EAC1CS,OAAO,CAACC,KAAKC;;YAAS,cAAM,WAAKhF,QAAQV,SAAb,mBAAmB2D;UAAA,GAAO,CAAC;QAAA;MAAA,CAC7D;MACDiC,aAAatD,OAAO;QAAEhC,QAASiC,KAAM;MAAA,CAAG;MACxCsD,eAAevD,OAAO;QAAEjC,UAAWkC,KAAM;MAAA,CAAG;MAC5CO,eAAeR,OAAO;QAAEjC,UAAWkC,KAAM;MAAA,CAAM;MAC/CuD,SAASxD,OAAO,CAAC5B,oBAAiC;QAAA,IAAxB;UAAE8D;UAAOhF;QAAA;QACjC,MAAMqE,YAAYW,QACduB,MAAMC,QAAQxB,KAAK,IACjBA,QACA,YAAYA,QACZuB,MAAME,KAAKzB,KAAK,IAChB,CAACA,KAAK,IACR;QACE,cAAQ9D,QAAQkD,QAAQC,UAAU2B,OAAO,CAACC,KAAKC,SAASD,MAAMC,KAAK/B,MAAM,CAAC;QAChF,MAAMtD,WAAWoD,KAAKC,MAAOhD,QAAQJ,SAAS,MAAOsD,KAAK;QACnD;UACLY,OAAO,CACL,GAAG9D,QAAQ8D,OACX,GAAGX,UAAUyB,IAAKtF,QAChBkG,MACEC,0BACGC,WAAW;YACVpF,SAAS;cACP0B,cAAc4B,WAAW,CAAC/B;gBAAA,IAAG;kBAAEsB,WAAiBwC;gBAAA;gBAAA;kBAC9CpE,MAAM;kBACN4B;gBAAA;cAAA,CACA;cACFhB,UAAUyB,WAAW,aAAa;cAClC3B,WAAW2B,WAAW,cAAc;cACpC1B,aAAa0B,WAAW,QAAQ;YAClC;UACD,GACAgC,YAAY9H,iCAAK4B,uBAAL;YAA2BJ;YAAMR;UAAU,KAC1D;YAAE+G,MAAM;UAAA,CACV,CACF,EACF;UACA3C;UACAtD,QAAQI,QAAQJ;UAChBD;QAAA;MACF,CACD;MACDmG,YAAYlE,OAAO;QACjBkC,OAAQ9D,WACNA,QAAQ8D,MAAMe,OAAQV,OAAQ;;UAC5B,MAAM7C,UAAU,UAAI8C,aAAY,KAAhB,mBAAmBC,QAAQ;UAC3C,IAAI/C,SAAS;YACX,UAAIyE,SAAJ;UACF;UACA,OAAO,CAACzE;QAAA,CACT;MAAA,CACJ;MACD0E,WAAWrC,KAAM3D,WACfA,QAAQ8D,MAAMc,IAAKT,OAAQ8B,KAAK;QAAE1E,MAAM;MAAA,GAAa;QAAE2E,IAAI/B,IAAInF;MAAI,EAAC,CACtE;MACAzB,QAAQoG,KAAK,CAAC3D,SAAS0B,UAAU1B,QAAQ8D,MAAMc,IAAKT,OAAQ8B,KAAKvE,OAAO;QAAEwE,IAAI/B,IAAInF;MAAI,EAAC,CAAC;MACxFmH,QAAQxC,KAAM3D,WACZA,QAAQ8D,MAAMc,IAAKT,OAAQ8B,KAAK;QAAE1E,MAAM;MAAA,GAAY;QAAE2E,IAAI/B,IAAInF;MAAI,EAAC,CACrE;IACF;EAAA,CAEJ;AACF;ACnJa,0BAAoB,OAC/BoH,OACAC,aACA7I,WAEA,IAAI8I,QAAkCC,WAAY;EAChDF,YAAYJ,KAAK1H;IACfgD,MAAM;IACNpE,KAAKiJ,MAAMI,QAAQrJ;IACnBwB,aAAayH,MAAMK,KAAKC,gBAAe;IACvC7H,aAAauH,MAAMvH;EAAA,GAChBrB,OACJ;EACW6I,sBAAWM,KAAM;;IACvB,MAAEtC,QAAQ,OAAO,GAAG;MACdkC;QACNpI,OAAOwI,EAAE3G,QAAQ7B;QACjByI,SAAS;QACTC,YAAY;MAAA,CACb;IACQ,aAAExC,QAAQ,UAAU,GAAG;MACxBkC;QACNpI,OAAO;QACPyI,SAAS;QACTC,YAAY;QACZ7H,IAAI2H,EAAE3G,QAAQhB;QACdF,UAAU6H,EAAE3G,QAAQhB;QACpBD,MAAM,QAAEiB,QAAQV,SAAV,mBAAgBP;MAAA,CACvB;IACH;EAAA,CACD;AACH,CAAC;ACzBU,mCAA6B,OACxCqH,OACAU,SACAtJ,WAEA,IAAI8I,QAASC,WAAY;EACvBO,QAAQb,KAAK;IACX1E,MAAM;IACNpE,KAAKiJ,MAAMI,QAAQrJ;IACnBwB,aAAayH,MAAMK,KAAKC,gBAAe;IACvC7H,aAAauH,MAAMvH;IACnBC,UAAUtB,iCAAQsB;IAClBgF,OAAOtG,iCAAQsG;EAAA,CAChB;EACOgD,qBAAcH,KAAM;IACtB,MAAEtC,QAAQ,OAAO,GAAG;MACdkC;QACNQ,QAAQJ,EAAE3G,QAAQ8D,MAAMe,OAAQV;;UAAQ,iBAAIC,kBAAJ,mBAAmBpE,QAAQ7B;QAAA,CAAK;QACxEyI,SAAS;QACT9C,OAAO;MAAC,CACT;IACQ,aAAEO,QAAQ,UAAU,GAAG;MACxBkC;QAAEQ,QAAQ,EAAI;QAAAH,SAAS;QAAO9C,OAAO6C,EAAE3G,QAAQ8D;MAAA,CAAO;IAChE;EAAA,CACD;AACH,CAAC","names":["HasuraStorageApi","constructor","url","axios","create","baseURL","upload","params","formData","res","httpClient","post","headers","__spreadProps","generateUploadHeaders","generateAuthHeaders","fileMetadata","data","error","getPresignedUrl","fileId","get","__spreadValues","presignedUrl","delete","setAccessToken","accessToken","setAdminSecret","adminSecret","bucketId","name","id","uploadheaders","Authorization","HasuraStorageClient","api","FormData","file","Error","getUrl","getPublicUrl","INITIAL_FILE_CONTEXT","progress","loaded","createMachine","preserveActionOrder","schema","context","events","tsTypes","initial","on","DESTROY","actions","target","states","idle","ADD","UPLOAD","cond","uploading","entry","UPLOAD_PROGRESS","UPLOAD_DONE","UPLOAD_ERROR","CANCEL","invoke","src","uploaded","stopped","type","guards","hasFile","event","incrementProgress","assign","_","setFileMetadata","setError","sendProgress","sendError","sendDestroy","sendDone","resetProgress","addFile","services","uploadFile","callback","currentLoaded","AbortController","signal","controller","onUploadProgress","event2","Math","round","size","total","additions","then","bucketId2","catch","response","message","status","abort","pure","sendParent","createMultipleFilesUploadMachine","files","REMOVE","CLEAR","hasFileToDownload","some","ref","getSnapshot","matches","isAllUploaded","every","item","isAllUploadedOrError","snap","setUploaded","map","filter","reduce","agg","curr","resetTotal","resetLoaded","startProgress","addItem","Array","isArray","from","spawn","createFileUploadMachine","withConfig","additions2","withContext","sync","removeItem","stop","clearList","send","to","cancel","nhost","interpreter","Promise","resolve","storage","auth","getAccessToken","s","isError","isUploaded","service","errors"],"sources":["C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\hasura-storage-js\\src\\hasura-storage-api.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\hasura-storage-js\\src\\hasura-storage-client.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\hasura-storage-js\\src\\machines\\file-upload.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\hasura-storage-js\\src\\machines\\multiple-files-upload.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\hasura-storage-js\\src\\promises\\file-upload.ts","C:\\Users\\Alias\\my-nhost-app\\node_modules\\@nhost\\hasura-storage-js\\src\\promises\\multiple-files-upload.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport axios, { AxiosInstance } from 'axios'\n\nimport {\n  ApiDeleteParams,\n  ApiDeleteResponse,\n  ApiGetPresignedUrlParams,\n  ApiGetPresignedUrlResponse,\n  ApiUploadParams,\n  ApiUploadResponse,\n  UploadHeaders\n} from './utils/types'\n\n/**\n * @internal\n * This is an internal class.\n */\nexport class HasuraStorageApi {\n  private url: string\n  private httpClient: AxiosInstance\n  private accessToken?: string\n  private adminSecret?: string\n\n  constructor({ url }: { url: string }) {\n    this.url = url\n\n    this.httpClient = axios.create({\n      baseURL: this.url\n    })\n  }\n\n  async upload(params: ApiUploadParams): Promise<ApiUploadResponse> {\n    const { formData } = params\n\n    try {\n      const res = await this.httpClient.post('/files', formData, {\n        headers: {\n          ...this.generateUploadHeaders(params),\n          ...this.generateAuthHeaders(),\n          'Content-Type': 'multipart/form-data'\n        }\n      })\n\n      return { fileMetadata: res.data, error: null }\n    } catch (error) {\n      return { fileMetadata: null, error: error as Error }\n    }\n  }\n\n  async getPresignedUrl(params: ApiGetPresignedUrlParams): Promise<ApiGetPresignedUrlResponse> {\n    try {\n      const { fileId } = params\n      const res = await this.httpClient.get(`/files/${fileId}/presignedurl`, {\n        headers: {\n          ...this.generateAuthHeaders()\n        }\n      })\n      return { presignedUrl: res.data, error: null }\n    } catch (error) {\n      return { presignedUrl: null, error: error as Error }\n    }\n  }\n\n  async delete(params: ApiDeleteParams): Promise<ApiDeleteResponse> {\n    try {\n      const { fileId } = params\n      await this.httpClient.delete(`/files/${fileId}`, {\n        headers: {\n          ...this.generateAuthHeaders()\n        }\n      })\n      return { error: null }\n    } catch (error) {\n      return { error: error as Error }\n    }\n  }\n\n  /**\n   * Set the access token to use for authentication.\n   *\n   * @param accessToken Access token\n   * @returns Hasura Storage API instance\n   */\n  setAccessToken(accessToken?: string): HasuraStorageApi {\n    this.accessToken = accessToken\n\n    return this\n  }\n\n  /**\n   * Set the admin secret to use for authentication.\n   *\n   * @param adminSecret Hasura admin secret\n   * @returns Hasura Storage API instance\n   */\n  setAdminSecret(adminSecret?: string): HasuraStorageApi {\n    this.adminSecret = adminSecret\n\n    return this\n  }\n\n  private generateUploadHeaders(params: ApiUploadParams): UploadHeaders {\n    const { bucketId, name, id } = params\n    const uploadheaders: UploadHeaders = {}\n\n    if (bucketId) {\n      uploadheaders['x-nhost-bucket-id'] = bucketId\n    }\n    if (id) {\n      uploadheaders['x-nhost-file-id'] = id\n    }\n    if (name) {\n      uploadheaders['x-nhost-file-name'] = name\n    }\n\n    return uploadheaders\n  }\n\n  private generateAuthHeaders():\n    | { Authorization: string }\n    | { 'x-hasura-admin-secret': string }\n    | null {\n    if (!this.adminSecret && !this.accessToken) {\n      return null\n    }\n\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n\n    return {\n      Authorization: `Bearer ${this.accessToken}`\n    }\n  }\n}\n","import FormData from 'form-data'\n\nimport {\n  StorageDeleteParams,\n  StorageDeleteResponse,\n  StorageGetPresignedUrlParams,\n  StorageGetPresignedUrlResponse,\n  StorageGetUrlParams,\n  StorageUploadFileParams,\n  StorageUploadFormDataParams,\n  StorageUploadParams,\n  StorageUploadResponse\n} from './utils/types'\nimport { HasuraStorageApi } from './hasura-storage-api'\n\ninterface NhostStorageConstructorParams {\n  /**\n   * Storage endpoint.\n   */\n  url: string\n  /**\n   * Admin secret. When set, it is sent as an `x-hasura-admin-secret` header for all requests.\n   */\n  adminSecret?: string\n}\n/**\n * @alias Storage\n */\nexport class HasuraStorageClient {\n  readonly url: string\n  private api: HasuraStorageApi\n\n  constructor({ url, adminSecret }: NhostStorageConstructorParams) {\n    this.url = url\n    this.api = new HasuraStorageApi({ url })\n    this.setAdminSecret(adminSecret)\n  }\n\n  /**\n   * Use `nhost.storage.upload` to upload a file. \n   * \n   * It's possible to use [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) or [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) to upload a file. The `File` instance is only available in the browser while `FormData` with [`form-data`](https://www.npmjs.com/package/form-data) works both in the browser and in NodeJS (server).\n   * \n   * If no `bucketId` is specified the bucket `default` is used.\n   *\n   * @example\n   * \n   * Upload a file from a browser using `File`.\n   * \n   * ```ts\n   * await nhost.storage.upload({ file })\n   * ```\n   * \n   * Upload a file from a browser using `File` to a specific Bucket.\n   * \n    @example\n   * ```ts\n   * await nhost.storage.upload({ file, bucketId: '<Bucket-ID>' })\n   * ```\n   * \n   * Upload a file from a server using `FormData` with [`form-data`](https://www.npmjs.com/package/form-data).\n   *\n   * @example\n   * ```ts\n   * const fd = new FormData() \n   * fd.append('file', fs.createReadStream('./tests/assets/sample.pdf'))\n   * \n   * await storage.upload({\n   *   formData: fd\n   * })\n   * ```\n   * \n   * @docs https://docs.nhost.io/reference/javascript/storage/upload\n   */\n\n  async upload(params: StorageUploadFileParams): Promise<StorageUploadResponse>\n  async upload(params: StorageUploadFormDataParams): Promise<StorageUploadResponse>\n  async upload(params: StorageUploadParams): Promise<StorageUploadResponse> {\n    let formData: FormData\n\n    if ('file' in params) {\n      formData = new FormData()\n      formData.append('file', params.file)\n    } else {\n      formData = params.formData\n    }\n\n    const { fileMetadata, error } = await this.api.upload({\n      ...params,\n      formData: formData\n    })\n    if (error) {\n      return { fileMetadata: null, error }\n    }\n\n    if (!fileMetadata) {\n      return { fileMetadata: null, error: new Error('Invalid file returned') }\n    }\n\n    return { fileMetadata, error: null }\n  }\n\n  /**\n   * @deprecated Use `nhost.storage.getPublicUrl()` instead.\n   */\n  getUrl(params: StorageGetUrlParams): string {\n    return this.getPublicUrl(params)\n  }\n\n  /**\n   * Use `nhost.storage.getPublicUrl` to get the public URL of a file. The public URL can be used for un-authenticated users to access files. To access public files the `public` role must have permissions to select the file in the `storage.files` table.\n   *\n   * @example\n   * ```ts\n   * const publicUrl = nhost.storage.getPublicUrl({ fileId: '<File-ID>' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/get-public-url\n   */\n  getPublicUrl(params: StorageGetUrlParams): string {\n    const { fileId } = params\n    return `${this.url}/files/${fileId}`\n  }\n\n  /**\n   * Use `nhost.storage.getPresignedUrl` to get a presigned URL of a file. To get a presigned URL the user must have permission to select the file in the `storage.files` table.\n   *\n   * @example\n   * ```ts\n   * const { presignedUrl, error} = await nhost.storage.getPresignedUrl({ fileId: '<File-ID>' })\n   *\n   * if (error) {\n   *   throw error;\n   * }\n   *\n   * console.log('url: ', presignedUrl.url)\n   * console.log('expiration: ', presignedUrl.expiration)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/get-presigned-url\n   */\n  async getPresignedUrl(\n    params: StorageGetPresignedUrlParams\n  ): Promise<StorageGetPresignedUrlResponse> {\n    const { presignedUrl, error } = await this.api.getPresignedUrl(params)\n    if (error) {\n      return { presignedUrl: null, error }\n    }\n\n    if (!presignedUrl) {\n      return { presignedUrl: null, error: new Error('Invalid file id') }\n    }\n\n    return { presignedUrl, error: null }\n  }\n\n  /**\n   * Use `nhost.storage.delete` to delete a file. To delete a file the user must have permissions to delete the file in the `storage.files` table. Deleting the file using `nhost.storage.delete()` will delete both the file and its metadata.\n   *\n   * @example\n   * ```ts\n   * const { error } = await nhost.storage.delete({ fileId: 'uuid' })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/delete\n   */\n  async delete(params: StorageDeleteParams): Promise<StorageDeleteResponse> {\n    const { error } = await this.api.delete(params)\n    if (error) {\n      return { error }\n    }\n\n    return { error: null }\n  }\n\n  /**\n   * Use `nhost.storage.setAccessToken` to a set an access token to be used in subsequent storage requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.storage.setAccessToken('some-access-token')\n   * ```\n   *\n   * @param accessToken Access token\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/set-access-token\n   */\n  setAccessToken(accessToken?: string): HasuraStorageClient {\n    this.api.setAccessToken(accessToken)\n\n    return this\n  }\n\n  /**\n   * Use `nhost.storage.adminSecret` to set the admin secret to be used for subsequent storage requests. This is useful if you want to run storage in \"admin mode\".\n   *\n   * @example\n   * ```ts\n   * nhost.storage.setAdminSecret('some-admin-secret')\n   * ```\n   *\n   * @param adminSecret Hasura admin secret\n   *\n   * @docs https://docs.nhost.io/reference/javascript/storage/set-admin-secret\n   */\n  setAdminSecret(adminSecret?: string): HasuraStorageClient {\n    this.api.setAdminSecret(adminSecret)\n\n    return this\n  }\n}\n","import axios, { AxiosError, AxiosRequestHeaders } from 'axios'\nimport { assign, createMachine } from 'xstate'\n\nimport { ErrorPayload } from '@nhost/core'\n\nexport type FileUploadContext = {\n  progress: number | null\n  loaded: number\n  error: ErrorPayload | null\n  id?: string\n  bucketId?: string\n  file?: File\n}\n\nexport type FileUploadEvents =\n  | { type: 'ADD'; file: File; id?: string; bucketId?: string; name?: string }\n  | {\n      type: 'UPLOAD'\n      url: string\n      file?: File\n      id?: string\n      bucketId?: string\n      name?: string\n      accessToken?: string\n      adminSecret?: string\n    }\n  | { type: 'UPLOAD_PROGRESS'; progress: number; loaded: number; additions: number }\n  | { type: 'UPLOAD_DONE'; id: string; bucketId: string }\n  | { type: 'UPLOAD_ERROR'; error: ErrorPayload }\n  | { type: 'CANCEL' }\n  | { type: 'DESTROY' }\n\nexport const INITIAL_FILE_CONTEXT: FileUploadContext = { progress: null, loaded: 0, error: null }\n\nexport type FileUploadMachine = ReturnType<typeof createFileUploadMachine>\nexport const createFileUploadMachine = () =>\n  createMachine(\n    {\n      preserveActionOrder: true,\n      schema: {\n        context: {} as FileUploadContext,\n        events: {} as FileUploadEvents\n      },\n      tsTypes: {} as import('./file-upload.typegen').Typegen0,\n      context: { ...INITIAL_FILE_CONTEXT },\n      initial: 'idle',\n      on: {\n        DESTROY: { actions: 'sendDestroy', target: 'stopped' }\n      },\n      states: {\n        idle: {\n          on: {\n            ADD: { actions: 'addFile' },\n            UPLOAD: { cond: 'hasFile', target: 'uploading' }\n          }\n        },\n        uploading: {\n          entry: 'resetProgress',\n          on: {\n            UPLOAD_PROGRESS: { actions: ['incrementProgress', 'sendProgress'] },\n            UPLOAD_DONE: 'uploaded',\n            UPLOAD_ERROR: 'error',\n            CANCEL: 'idle'\n          },\n          invoke: { src: 'uploadFile' }\n        },\n        uploaded: { entry: ['setFileMetadata', 'sendDone'] },\n        error: { entry: ['setError', 'sendError'] },\n        stopped: { type: 'final' }\n      }\n    },\n    {\n      guards: {\n        hasFile: (context, event) => !!context.file || !!event.file\n      },\n\n      actions: {\n        incrementProgress: assign({\n          loaded: (_, { loaded }) => loaded,\n          progress: (_, { progress }) => progress\n        }),\n        setFileMetadata: assign({\n          id: (_, { id }) => id,\n          bucketId: (_, { bucketId }) => bucketId,\n          progress: (_) => 100\n        }),\n        setError: assign({ error: (_, { error }) => error }),\n        sendProgress: () => {},\n        sendError: () => {},\n        sendDestroy: () => {},\n        sendDone: () => {},\n        resetProgress: assign({ progress: (_) => null, loaded: (_) => 0 }),\n        addFile: assign({\n          file: (_, { file }) => file,\n          bucketId: (_, { bucketId }) => bucketId,\n          id: (_, { id }) => id\n        })\n      },\n      services: {\n        uploadFile: (context, event) => (callback) => {\n          const headers: AxiosRequestHeaders = {\n            'Content-Type': 'multipart/form-data'\n          }\n          const fileId = event.id || context.id\n          if (fileId) {\n            headers['x-nhost-file-id'] = fileId\n          }\n          const bucketId = event.bucketId || context.bucketId\n          if (bucketId) {\n            headers['x-nhost-bucket-id'] = bucketId\n          }\n          const file = (event.file || context.file)!\n          headers['x-nhost-file-name'] = event.name || file.name\n          const data = new FormData()\n          data.append('file', file)\n          if (event.adminSecret) {\n            headers['x-hasura-admin-secret'] = event.adminSecret\n          }\n          if (event.accessToken) {\n            headers['Authorization'] = `Bearer ${event.accessToken}`\n          }\n          let currentLoaded = 0\n          const controller = new AbortController()\n          axios\n            .post<{\n              bucketId: string\n              createdAt: string\n              etag: string\n              id: string\n              isUploaded: true\n              mimeType: string\n              name: string\n              size: number\n              updatedAt: string\n              uploadedByUserId: string\n            }>(event.url + '/files', data, {\n              headers,\n              signal: controller.signal,\n              onUploadProgress: (event: ProgressEvent) => {\n                const loaded = Math.round((event.loaded * file.size!) / event.total)\n                const additions = loaded - currentLoaded\n                currentLoaded = loaded\n                callback({\n                  type: 'UPLOAD_PROGRESS',\n                  progress: Math.round((loaded * 100) / event.total),\n                  loaded,\n                  additions\n                })\n              }\n            })\n            .then(({ data: { id, bucketId } }) => {\n              callback({ type: 'UPLOAD_DONE', id, bucketId })\n            })\n            .catch(({ response, message }: AxiosError<{ error?: { message: string } }>) => {\n              callback({\n                type: 'UPLOAD_ERROR',\n                error: {\n                  status: response?.status ?? 0,\n                  message: response?.data?.error?.message || message,\n                  // TODO errors from hasura-storage are not codified\n                  error: response?.data?.error?.message || message\n                }\n              })\n            })\n\n          return () => {\n            controller.abort()\n          }\n        }\n      }\n    }\n  )\n","import { actions, ActorRefFrom, assign, createMachine, send, spawn } from 'xstate'\n\nimport { createFileUploadMachine, FileUploadMachine, INITIAL_FILE_CONTEXT } from './file-upload'\n\nconst { pure, sendParent } = actions\n\nexport type FileItemRef = ActorRefFrom<FileUploadMachine>\n\nexport type AnyFileList = File | File[] | FileList\n\nexport type MultipleFilesUploadContext = {\n  progress: number | null\n  files: FileItemRef[]\n  loaded: number\n  total: number\n}\n\nexport type MultipleFilesUploadEvents =\n  | { type: 'ADD'; files: AnyFileList; bucketId?: string }\n  | {\n      type: 'UPLOAD'\n      url: string\n      files?: AnyFileList\n      bucketId?: string\n      accessToken?: string\n      adminSecret?: string\n    }\n  | { type: 'UPLOAD_PROGRESS'; additions: number }\n  | { type: 'UPLOAD_DONE' }\n  | { type: 'UPLOAD_ERROR' }\n  | { type: 'CANCEL' }\n  | { type: 'REMOVE' }\n  | { type: 'CLEAR' }\n\nexport type MultipleFilesUploadMachine = ReturnType<typeof createMultipleFilesUploadMachine>\n\nexport const createMultipleFilesUploadMachine = () => {\n  return createMachine(\n    {\n      id: 'files-list',\n      schema: {\n        context: {} as MultipleFilesUploadContext,\n        events: {} as MultipleFilesUploadEvents\n      },\n      tsTypes: {} as import('./multiple-files-upload.typegen').Typegen0,\n      context: {\n        progress: null,\n        files: [],\n        loaded: 0,\n        total: 0\n      },\n      initial: 'idle',\n      on: {\n        UPLOAD: { cond: 'hasFileToDownload', actions: 'addItem', target: 'uploading' },\n        ADD: { actions: 'addItem' },\n        REMOVE: { actions: 'removeItem' }\n      },\n      states: {\n        idle: {\n          entry: ['resetProgress', 'resetLoaded', 'resetTotal'],\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        },\n        uploading: {\n          entry: ['upload', 'startProgress', 'resetLoaded', 'resetTotal'],\n          on: {\n            UPLOAD_PROGRESS: { actions: ['incrementProgress'] },\n            UPLOAD_DONE: [\n              { cond: 'isAllUploaded', target: 'uploaded' },\n              { cond: 'isAllUploadedOrError', target: 'error' }\n            ],\n            UPLOAD_ERROR: [\n              { cond: 'isAllUploaded', target: 'uploaded' },\n              { cond: 'isAllUploadedOrError', target: 'error' }\n            ],\n            CANCEL: { actions: 'cancel', target: 'idle' }\n          }\n        },\n        uploaded: {\n          entry: 'setUploaded',\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        },\n        error: {\n          on: {\n            CLEAR: { actions: 'clearList', target: 'idle' }\n          }\n        }\n      }\n    },\n    {\n      guards: {\n        hasFileToDownload: (context, event) =>\n          context.files.some((ref) => ref.getSnapshot()!.matches('idle')) || !!event.files,\n        isAllUploaded: (context) =>\n          context.files.every((item) => item.getSnapshot()?.matches('uploaded')),\n        isAllUploadedOrError: (context) =>\n          context.files.every((item) => {\n            const snap = item.getSnapshot()\n            return snap?.matches('error') || snap?.matches('uploaded')\n          })\n      },\n\n      actions: {\n        incrementProgress: assign((context, event) => {\n          const loaded: number = context.loaded + event.additions\n          const progress = Math.round((loaded * 100) / context.total)\n          return { ...context, loaded, progress }\n        }),\n        setUploaded: assign({\n          progress: (_) => 100,\n          loaded: ({ files }) =>\n            files\n              .map((ref) => ref.getSnapshot()!)\n              .filter((snap) => snap.matches('uploaded'))\n              .reduce((agg, curr) => agg + curr.context.file?.size!, 0)\n        }),\n        resetTotal: assign({\n          total: ({ files }) =>\n            files\n              .map((ref) => ref.getSnapshot()!)\n              .filter((snap) => !snap.matches('uploaded'))\n              .reduce((agg, curr) => agg + curr.context.file?.size!, 0)\n        }),\n        resetLoaded: assign({ loaded: (_) => 0 }),\n        startProgress: assign({ progress: (_) => 0 }),\n        resetProgress: assign({ progress: (_) => null }),\n        addItem: assign((context, { files, bucketId }) => {\n          const additions = files\n            ? Array.isArray(files)\n              ? files // File[]\n              : 'length' in files // FileList\n              ? Array.from(files)\n              : [files] // File\n            : [] // No file\n          const total = context.total + additions.reduce((agg, curr) => agg + curr.size, 0)\n          const progress = Math.round((context.loaded * 100) / total)\n          return {\n            files: [\n              ...context.files,\n              ...additions.map((file) =>\n                spawn(\n                  createFileUploadMachine()\n                    .withConfig({\n                      actions: {\n                        sendProgress: sendParent((_, { additions }) => ({\n                          type: 'UPLOAD_PROGRESS',\n                          additions\n                        })),\n                        sendDone: sendParent('UPLOAD_DONE'),\n                        sendError: sendParent('UPLOAD_ERROR'),\n                        sendDestroy: sendParent('REMOVE')\n                      }\n                    })\n                    .withContext({ ...INITIAL_FILE_CONTEXT, file, bucketId }),\n                  { sync: true }\n                )\n              )\n            ],\n            total,\n            loaded: context.loaded,\n            progress\n          }\n        }),\n        removeItem: assign({\n          files: (context) =>\n            context.files.filter((ref) => {\n              const stopped = ref.getSnapshot()?.matches('stopped')\n              if (stopped) {\n                ref.stop?.()\n              }\n              return !stopped\n            })\n        }),\n        clearList: pure((context) =>\n          context.files.map((ref) => send({ type: 'DESTROY' }, { to: ref.id }))\n        ),\n        upload: pure((context, event) => context.files.map((ref) => send(event, { to: ref.id }))),\n        cancel: pure((context) =>\n          context.files.map((ref) => send({ type: 'CANCEL' }, { to: ref.id }))\n        )\n      }\n    }\n  )\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport { ActionErrorState } from '@nhost/core'\n\nimport { FileItemRef, FileUploadMachine } from '../machines'\nimport { NhostClientReturnType, StorageUploadFileParams } from '../utils/types'\n\nexport interface UploadProgressState {\n  /**\n   * Returns `true` when the file is being uploaded.\n   */\n  isUploading: boolean\n  /**\n   * Returns the progress of the upload, from 0 to 100. Returns null if the upload has not started yet.\n   */\n  progress: number | null\n}\n\nexport interface UploadFileHandlerResult extends ActionErrorState {\n  /**\n   * Returns `true` when the file has been successfully uploaded.\n   */\n  isUploaded: boolean\n  /**\n   * Returns the id of the file.\n   */\n  id?: string\n  /**\n   * Returns the bucket id.\n   */\n  bucketId?: string\n  /**\n   * Returns the name of the file.\n   */\n  name?: string\n}\n\nexport interface FileUploadState extends UploadFileHandlerResult, UploadProgressState {}\n\nexport const uploadFilePromise = async (\n  nhost: NhostClientReturnType,\n  interpreter: FileItemRef | InterpreterFrom<FileUploadMachine>,\n  params: Partial<StorageUploadFileParams>\n): Promise<UploadFileHandlerResult> =>\n  new Promise<UploadFileHandlerResult>((resolve) => {\n    interpreter.send({\n      type: 'UPLOAD',\n      url: nhost.storage.url,\n      accessToken: nhost.auth.getAccessToken(),\n      adminSecret: nhost.adminSecret,\n      ...params\n    })\n    interpreter.subscribe((s) => {\n      if (s.matches('error')) {\n        resolve({\n          error: s.context.error,\n          isError: true,\n          isUploaded: false\n        })\n      } else if (s.matches('uploaded')) {\n        resolve({\n          error: null,\n          isError: false,\n          isUploaded: true,\n          id: s.context.id,\n          bucketId: s.context.id,\n          name: s.context.file?.name\n        })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { AnyFileList, FileItemRef, MultipleFilesUploadMachine } from '../machines'\nimport { NhostClientReturnType } from '../utils/types'\n\nexport interface MultipleUploadProgressState {\n  /**\n   * Returns `true` when the files are being uploaded.\n   */\n  isUploading: boolean\n  /**\n   * Returns the overall progress of the upload, from 0 to 100. Returns null if the upload has not started yet.\n   */\n  progress: number | null\n}\n\nexport interface MultipleFilesHandlerResult {\n  /**\n   * The list of file uploads. The properties can be accessed through `item.getSnapshot()` of with the `useFileUploadItem` hook.\n   */\n  files: FileItemRef[]\n  /**\n   * Returns `true` when all upload request are processed, but at least one of them has failed.\n   */\n  isError: boolean\n  /**\n   * Returns the list of file uploads that have failed\n   */\n  errors: FileItemRef[]\n}\n\nexport interface MultipleFilesUploadState\n  extends MultipleFilesHandlerResult,\n    MultipleUploadProgressState {\n  /**\n   * Returns `true` when all the files have been successfully uploaded.\n   */\n  isUploaded: boolean\n}\n\nexport type UploadMultipleFilesActionParams = {\n  files?: AnyFileList\n  bucketId?: string\n}\n\nexport const uploadMultipleFilesPromise = async (\n  nhost: NhostClientReturnType,\n  service: InterpreterFrom<MultipleFilesUploadMachine>,\n  params?: UploadMultipleFilesActionParams\n): Promise<MultipleFilesHandlerResult> =>\n  new Promise((resolve) => {\n    service.send({\n      type: 'UPLOAD',\n      url: nhost.storage.url,\n      accessToken: nhost.auth.getAccessToken(),\n      adminSecret: nhost.adminSecret,\n      bucketId: params?.bucketId,\n      files: params?.files\n    })\n    service.onTransition((s) => {\n      if (s.matches('error')) {\n        resolve({\n          errors: s.context.files.filter((ref) => ref.getSnapshot()?.context.error),\n          isError: true,\n          files: []\n        })\n      } else if (s.matches('uploaded')) {\n        resolve({ errors: [], isError: false, files: s.context.files })\n      }\n    })\n  })\n"]},"metadata":{},"sourceType":"module"}