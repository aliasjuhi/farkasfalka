{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nimport { InMemoryCache, createHttpLink, split, from, ApolloClient } from \"@apollo/client/core\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { createClient } from \"graphql-ws\";\nfunction createRestartableClient(options) {\n  let restartRequested = false;\n  let restart = () => {\n    restartRequested = true;\n  };\n  let _started = false;\n  const started = () => _started;\n  const client = createClient(__spreadProps(__spreadValues({}, options), {\n    on: __spreadProps(__spreadValues({}, options.on), {\n      connected: () => {\n        _started = true;\n      },\n      opened: originalSocket => {\n        var _a, _b;\n        const socket = originalSocket;\n        (_b = (_a = options.on) == null ? void 0 : _a.opened) == null ? void 0 : _b.call(_a, socket);\n        restart = () => {\n          if (socket.readyState === WebSocket.OPEN) {\n            socket.close(4205, \"Client Restart\");\n          } else {\n            restartRequested = true;\n          }\n        };\n        if (restartRequested) {\n          restartRequested = false;\n          restart();\n        }\n      }\n    })\n  }));\n  return __spreadProps(__spreadValues({}, client), {\n    restart: () => restart(),\n    started\n  });\n}\nconst isBrowser = typeof window !== \"undefined\";\nconst createApolloClient = _ref => {\n  let {\n    nhost,\n    graphqlUrl,\n    headers = {},\n    publicRole = \"public\",\n    fetchPolicy,\n    cache = new InMemoryCache(),\n    connectToDevTools = isBrowser && false,\n    onError\n  } = _ref;\n  let backendUrl = graphqlUrl || (nhost == null ? void 0 : nhost.graphql.getUrl());\n  if (!backendUrl) {\n    throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\");\n  }\n  const interpreter = nhost == null ? void 0 : nhost.auth.client.interpreter;\n  let token = null;\n  const getAuthHeaders = () => {\n    const resHeaders = __spreadProps(__spreadValues({}, headers), {\n      \"Sec-WebSocket-Protocol\": \"graphql-ws\"\n    });\n    if (token) {\n      resHeaders.authorization = `Bearer ${token}`;\n    } else {\n      resHeaders.role = publicRole;\n    }\n    return resHeaders;\n  };\n  const uri = backendUrl;\n  const wsClient = isBrowser && createRestartableClient({\n    url: uri.startsWith(\"https\") ? uri.replace(/^https/, \"wss\") : uri.replace(/^http/, \"ws\"),\n    connectionParams: () => ({\n      headers: __spreadValues(__spreadValues({}, headers), getAuthHeaders())\n    })\n  });\n  const wsLink = wsClient && new GraphQLWsLink(wsClient);\n  const httpLink = setContext((_, _ref2) => {\n    let {\n      headers: headers2\n    } = _ref2;\n    return {\n      headers: __spreadValues(__spreadValues({}, headers2), getAuthHeaders())\n    };\n  }).concat(createHttpLink({\n    uri\n  }));\n  const link = wsLink ? split(_ref3 => {\n    let {\n      query\n    } = _ref3;\n    const mainDefinition = getMainDefinition(query);\n    const {\n      kind\n    } = mainDefinition;\n    let operation;\n    if (\"operation\" in mainDefinition) {\n      operation = mainDefinition.operation;\n    }\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  }, wsLink, httpLink) : httpLink;\n  const apolloClientOptions = {\n    cache: cache || new InMemoryCache(),\n    ssrMode: !isBrowser,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy\n      }\n    },\n    connectToDevTools\n  };\n  apolloClientOptions.link = typeof onError === \"function\" ? from([onError, link]) : from([link]);\n  const client = new ApolloClient(apolloClientOptions);\n  interpreter == null ? void 0 : interpreter.onTransition(async (state, event) => {\n    if ([\"SIGNOUT\", \"SIGNED_IN\", \"TOKEN_CHANGED\"].includes(event.type)) {\n      const newToken = state.context.accessToken.value;\n      token = newToken;\n      if (event.type === \"SIGNOUT\") {\n        try {\n          await client.resetStore();\n        } catch (error) {\n          console.error(\"Error resetting Apollo client cache\");\n          console.error(error);\n        }\n      } else {\n        if (isBrowser && wsClient && wsClient.started()) {\n          wsClient.restart();\n        }\n      }\n    }\n  });\n  return client;\n};\nexport { createApolloClient };","map":{"version":3,"mappings":"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","names":["options","restartRequested","restart","_started","started","client","createClient","__spreadProps","on","connected","opened","originalSocket","socket","readyState","WebSocket","OPEN","isBrowser","window","createApolloClient","nhost","graphqlUrl","headers","publicRole","fetchPolicy","cache","InMemoryCache","connectToDevTools","onError","backendUrl","graphql","getUrl","Error","auth","interpreter","token","getAuthHeaders","resHeaders","authorization","role","uri","createRestartableClient","url","startsWith","replace","connectionParams","__spreadValues","wsLink","wsClient","GraphQLWsLink","httpLink","setContext","_","headers2","concat","createHttpLink","link","split","query","getMainDefinition","kind","mainDefinition","operation","apolloClientOptions","ssrMode","defaultOptions","watchQuery","from","ApolloClient","state","event","includes","type","context","accessToken","value","resetStore","error","console"],"sources":["C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\apollo\\src\\ws.ts","C:\\Users\\Alias\\weboldal\\web-login\\node_modules\\@nhost\\apollo\\src\\index.ts"],"sourcesContent":["// * See https://github.com/enisdenjo/graphql-ws#graceful-restart\nimport { Client, ClientOptions, createClient } from 'graphql-ws'\n\nexport interface RestartableClient extends Client {\n  restart(): void\n  started(): boolean\n}\n\nexport function createRestartableClient(options: ClientOptions): RestartableClient {\n  let restartRequested = false\n  let restart = () => {\n    restartRequested = true\n  }\n  let _started = false\n  const started = () => _started\n\n  const client = createClient({\n    ...options,\n    on: {\n      ...options.on,\n      connected: () => {\n        _started = true\n      },\n      opened: (originalSocket) => {\n        const socket = originalSocket as WebSocket\n        options.on?.opened?.(socket)\n\n        restart = () => {\n          if (socket.readyState === WebSocket.OPEN) {\n            // if the socket is still open for the restart, do the restart\n            socket.close(4205, 'Client Restart')\n          } else {\n            // otherwise the socket might've closed, indicate that you want\n            // a restart on the next opened event\n            restartRequested = true\n          }\n        }\n\n        // just in case you were eager to restart\n        if (restartRequested) {\n          restartRequested = false\n          restart()\n        }\n      }\n    }\n  })\n\n  return {\n    ...client,\n    restart: () => restart(),\n    started\n  }\n}\n","import {\n  ApolloClient,\n  ApolloClientOptions,\n  createHttpLink,\n  from,\n  InMemoryCache,\n  RequestHandler,\n  split,\n  WatchQueryFetchPolicy\n} from '@apollo/client/core'\nimport { setContext } from '@apollo/client/link/context'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { NhostClient } from '@nhost/nhost-js'\n\nimport { createRestartableClient } from './ws'\nconst isBrowser = typeof window !== 'undefined'\n\nexport type NhostApolloClientOptions = {\n  nhost?: NhostClient\n  graphqlUrl?: string\n  headers?: any\n  publicRole?: string\n  fetchPolicy?: WatchQueryFetchPolicy\n  connectToDevTools?: boolean\n  cache?: InMemoryCache\n  onError?: RequestHandler\n}\n\nexport const createApolloClient = ({\n  nhost,\n  graphqlUrl,\n  headers = {},\n  publicRole = 'public',\n  fetchPolicy,\n  cache = new InMemoryCache(),\n  connectToDevTools = isBrowser && process.env.NODE_ENV === 'development',\n  onError\n}: NhostApolloClientOptions): ApolloClient<any> => {\n  let backendUrl = graphqlUrl || nhost?.graphql.getUrl()\n  if (!backendUrl) {\n    throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\")\n  }\n  const interpreter = nhost?.auth.client.interpreter\n\n  let token: string | null = null\n\n  const getAuthHeaders = () => {\n    // add headers\n    const resHeaders = {\n      ...headers,\n      'Sec-WebSocket-Protocol': 'graphql-ws'\n    }\n\n    // add auth headers if signed in\n    // or add 'public' role if not signed in\n    if (token) {\n      resHeaders.authorization = `Bearer ${token}`\n    } else {\n      // ? Not sure it changes anything for Hasura\n      resHeaders.role = publicRole\n    }\n\n    return resHeaders\n  }\n\n  const uri = backendUrl\n\n  const wsClient =\n    isBrowser &&\n    createRestartableClient({\n      url: uri.startsWith('https') ? uri.replace(/^https/, 'wss') : uri.replace(/^http/, 'ws'),\n      connectionParams: () => ({\n        headers: {\n          ...headers,\n          ...getAuthHeaders()\n        }\n      })\n    })\n  const wsLink = wsClient && new GraphQLWsLink(wsClient)\n\n  const httpLink = setContext((_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        ...getAuthHeaders()\n      }\n    }\n  }).concat(\n    createHttpLink({\n      uri\n    })\n  )\n\n  const link = wsLink\n    ? split(\n        ({ query }) => {\n          const mainDefinition = getMainDefinition(query)\n\n          const { kind } = mainDefinition\n          let operation\n          if ('operation' in mainDefinition) {\n            operation = mainDefinition.operation\n          }\n\n          return kind === 'OperationDefinition' && operation === 'subscription'\n        },\n        wsLink,\n        httpLink\n      )\n    : httpLink\n\n  const apolloClientOptions: ApolloClientOptions<any> = {\n    cache: cache || new InMemoryCache(),\n    ssrMode: !isBrowser,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy\n      }\n    },\n    connectToDevTools\n  }\n\n  // add link\n  apolloClientOptions.link = typeof onError === 'function' ? from([onError, link]) : from([link])\n\n  const client = new ApolloClient(apolloClientOptions)\n\n  interpreter?.onTransition(async (state, event) => {\n    if (['SIGNOUT', 'SIGNED_IN', 'TOKEN_CHANGED'].includes(event.type)) {\n      const newToken = state.context.accessToken.value\n      token = newToken\n      if (event.type === 'SIGNOUT') {\n        try {\n          await client.resetStore()\n        } catch (error) {\n          console.error('Error resetting Apollo client cache')\n          console.error(error)\n        }\n      } else {\n        if (isBrowser && wsClient && wsClient.started()) {\n          wsClient.restart()\n        }\n      }\n    }\n  })\n\n  return client\n}\n"]},"metadata":{},"sourceType":"module"}